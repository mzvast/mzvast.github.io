{"version":3,"sources":["routes/posts/2020/06/30-用hygen代码生成器优化效率/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"sSAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAKC,KAAO,MAAMC,MAAQ,KAS9EC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0DADR,0DAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,gEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,4EAEFN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,4uBACAA,OAAAE,EAAA,EAAAF,CAAA,8kBACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gEADR,gEAGAL,OAAAE,EAAA,EAAAF,CAAA,8TAA+DA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACjFC,KAAQ,oCADmD,SAA/D,uJAGAP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,wCADR,wCAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,mDACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,sEACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,2CACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,iCAEFN,OAAAE,EAAA,EAAAF,CAAA,iDACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,6CADR,6CAGAL,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,gBACbC,gBAAiB,OACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,wUAGhBZ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,sEADR,sEAGAL,OAAAE,EAAA,EAAAF,CAAA,0GACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,IAA3B,0jBAeLN,OAAAE,EAAA,EAAAF,CAAA,kBAAQA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,cAAR,sIACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,sBACbC,gBAAiB,aACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,msFAGhBZ,OAAAE,EAAA,EAAAF,CAAA,wBAASA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,0BAAT,mGAAoGN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,eAApG,6PACAN,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,sBACbC,gBAAiB,aACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,oxFAGhBZ,OAAAE,EAAA,EAAAF,CAAA,2GACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,gBACbC,gBAAiB,OACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,6FAGhBZ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,2CADR,2CAGAL,OAAAE,EAAA,EAAAF,CAAA,0VACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,sBACbC,gBAAiB,aACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,0wDAGhBZ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gCADR,gCAGAL,OAAAE,EAAA,EAAAF,CAAA,2LACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,gBACbC,gBAAiB,OACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,ikBAGhBZ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,kYAKJJ,EAAWiB,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,CAChD,CACEV,GAAI,yDACJa,MAAO,EACPC,MAAO,yDACPC,SAAU,IAId,CACIf,GAAI,eACJa,MAAO,EACPC,MAAO,eACPC,SAAU,IAId,CACIf,GAAI,+DACJa,MAAO,EACPC,MAAO,+DACPC,SAAU,IAId,CACIf,GAAI,uCACJa,MAAO,EACPC,MAAO,uCACPC,SAAU,CACN,CACMf,GAAI,4CACJa,MAAO,EACPC,MAAO,4CACPC,SAAU,IAIlB,CACQf,GAAI,qEACJa,MAAO,EACPC,MAAO,qEACPC,SAAU,IAIlB,CACQf,GAAI,0CACJa,MAAO,EACPC,MAAO,0CACPC,SAAU,IAIlB,CACQf,GAAI,+BACJa,MAAO,EACPC,MAAO,+BACPC,SAAU,MAMxB,CACIf,GAAI,eACJa,MAAO,EACPC,MAAO,eACPC,SAAU,MAMDC,EAAc","file":"static/js/107.c83284e1.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"2 min read\",\"minutes\":1.24,\"time\":74400,\"words\":248}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"你可以从本文了解到\"\n    }}>{`你可以从本文了解到`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`为什么要用代码生成器`}</li>\n      <li parentName=\"ul\">{`hygen如何使用来提高工作效率`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"背景\"\n    }}>{`背景`}</h2>\n    <p>{`最初是因为换了基于create-react-blog的框架，这是一个比较素的框架（相比其他带cli的框架而言），每次写新post需要创建1个文件夹和两个文件，并填充一堆信息，非常繁琐，即使可以复制粘贴。但是，这种创作体验并不理想，让写作的人决定自己的新post是基于旧post改改而来的，体验不纯粹。`}</p>\n    <p>{`因为创作门槛比原来高，所以创作的热情相对而言更低了。当我站在2020年6月30日回看这半年一篇都没有发表，我着实决定这个事情到了不得不做的地步。不是难，只是懒。我要用一小段的调研和开发，降低创作启动门槛。`}</p>\n    <h2 {...{\n      \"id\": \"为什么要用代码生成器\"\n    }}>{`为什么要用代码生成器`}</h2>\n    <p>{`这是一个js工程，有着丰富的node工具链生态，我们可以基于开源的代码生成器，打造属于这个项目的定制代码生成器。`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/jondot/hygen\"\n      }}>{`hygen`}</a>{`就是本文选择的(谷歌query：node cli code generator)。【todo：hygen源码分析】`}</p>\n    <h2 {...{\n      \"id\": \"我所做的工作\"\n    }}>{`我所做的工作`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`将hygen安装和初始化`}</li>\n      <li parentName=\"ol\">{`调试编写模板，数据处理`}</li>\n      <li parentName=\"ol\">{`增加cli交互提示`}</li>\n      <li parentName=\"ol\">{`整合到npm script`}</li>\n    </ol>\n    <p>{`下面分步介绍`}</p>\n    <h3 {...{\n      \"id\": \"hygen安装和初始化\"\n    }}>{`hygen安装和初始化`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\",\n        \"data-language\": \"bash\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token function\\\">yarn</span> <span class=\\\"token function\\\">add</span> hygen //依赖安装到项目维度\\n./node_modules/.bin/hygen init self // 在项目中初始化hygen\\n./node_modules/.bin/hygen generator new post // 创建叫post的generator\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"调试编写模板，数据处理\"\n    }}>{`调试编写模板，数据处理`}</h3>\n    <p>{`以本工程为例，在_templates/post下新增文件`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`_templates\n├── generator\n│   ├── help\n│   │   └── index.ejs.t\n│   ├── new\n│   │   └── hello.ejs.t\n│   └── with-prompt\n│       ├── hello.ejs.t\n│       └── prompt.ejs.t\n└── post\n    └── new\n        ├── document.ejs.t   /* ADDED */\n        ├── post.ejs.t       /* ADDED */\n        └── prompt.js        /* ADDED */\n`}</code></pre>\n    <p>{`以`}<inlineCode parentName=\"p\">{`post.ejs.t`}</inlineCode>{`为例，这个文件包含了一个post的元数据，编写如下`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\nto<span class=\\\"token punctuation\\\">:</span> src<span class=\\\"token operator\\\">/</span>routes<span class=\\\"token operator\\\">/</span>posts<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%=</span> h<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token string\\\">'-'</span> <span class=\\\"token operator\\\">+</span> h<span class=\\\"token punctuation\\\">.</span>inflection<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">dasherize</span><span class=\\\"token punctuation\\\">(</span>title<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token operator\\\">/</span>post<span class=\\\"token punctuation\\\">.</span>ts\\n<span class=\\\"token operator\\\">--</span><span class=\\\"token operator\\\">-</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> <span class=\\\"token punctuation\\\">{</span>\\n    title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'&lt;%= title%>'</span><span class=\\\"token punctuation\\\">,</span>\\n    tags<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">-</span> <span class=\\\"token constant\\\">JSON</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">stringify</span><span class=\\\"token punctuation\\\">(</span>tags<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">split</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">','</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">%</span><span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token comment\\\">// 进行了序列化和unescape</span>\\n    spoiler<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'&lt;%= spoiler%>'</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token function-variable function\\\">getContent</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./document.mdx'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`这里`}<inlineCode parentName=\"p\">{`h.inflection.dasherize`}</inlineCode>{`用到了内置helper函数来处理文件名，而`}<inlineCode parentName=\"p\">{`h.getDate()`}</inlineCode>{`则是我们扩展的helper函数（定义在项目根目录的.hygen.js文件中），用户获取日期字符串，示例如下：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// .hygen.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    helpers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function-variable function\\\">getDate</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">let</span> d <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Date</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n            <span class=\\\"token keyword\\\">let</span> year <span class=\\\"token operator\\\">=</span> d<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getFullYear</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">let</span> month <span class=\\\"token operator\\\">=</span> d<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getMonth</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">let</span> day <span class=\\\"token operator\\\">=</span> d<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getDate</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token template-string\\\"><span class=\\\"token template-punctuation string\\\">`</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>year<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>month<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">/</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>day<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token template-punctuation string\\\">`</span></span> <span class=\\\"token comment\\\">// 斜线代表文件夹层级</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`此时我就可以使用如下命令创建post了`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\",\n        \"data-language\": \"bash\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"./node_modules/.bin/hygen post new --title title --spoiler spoiler --tags tag1,tag2\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"增加cli交互提示\"\n    }}>{`增加cli交互提示`}</h3>\n    <p>{`为了减少用户的记忆点，我们可以采用交互式输入框，这就是prompt.js文件起到的作用了，其中定义了我们需要用户输入的元数据。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// _templates/post/new/prompt.js</span>\\nmodule<span class=\\\"token punctuation\\\">.</span>exports <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'title'</span><span class=\\\"token punctuation\\\">,</span>\\n        message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"What's your post's title?\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'spoiler'</span><span class=\\\"token punctuation\\\">,</span>\\n        message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"What's your post's spoiler?\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">{</span>\\n        type<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'input'</span><span class=\\\"token punctuation\\\">,</span>\\n        name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'tags'</span><span class=\\\"token punctuation\\\">,</span>\\n        message<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"What's your post's tags?\\\"</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">]</span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"整合到npm-script\"\n    }}>{`整合到npm script`}</h3>\n    <p>{`最后，再精简用户的记忆点，将生成器的脚本整合到package.json文件中。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\",\n        \"data-language\": \"json\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n  <span class=\\\"token property\\\">\\\"scripts\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">//...</span>\\n    <span class=\\\"token property\\\">\\\"create\\\"</span><span class=\\\"token operator\\\">:</span> <span class=\\\"token string\\\">\\\"hygen post new\\\"</span> <span class=\\\"token comment\\\">// ADDED</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <h2 {...{\n      \"id\": \"总结\"\n    }}>{`总结`}</h2>\n    <p>{`整个代码生成器的定制工作的核心出发点就是减少一切记忆点，对用户的干扰和分心减少到最低，使创作者专注于内容创作而不是编写代码。`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"你可以从本文了解到\",\n    level: 2,\n    title: \"你可以从本文了解到\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"背景\",\n    level: 2,\n    title: \"背景\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"为什么要用代码生成器\",\n    level: 2,\n    title: \"为什么要用代码生成器\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"我所做的工作\",\n    level: 2,\n    title: \"我所做的工作\",\n    children: [\n        {\n              id: \"hygen安装和初始化\",\n              level: 3,\n              title: \"hygen安装和初始化\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"调试编写模板，数据处理\",\n              level: 3,\n              title: \"调试编写模板，数据处理\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"增加cli交互提示\",\n              level: 3,\n              title: \"增加cli交互提示\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"整合到npm-script\",\n              level: 3,\n              title: \"整合到npm script\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"总结\",\n    level: 2,\n    title: \"总结\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}