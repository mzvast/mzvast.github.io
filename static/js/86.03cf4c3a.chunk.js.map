{"version":3,"sources":["routes/posts/2015/07-08-docker-on-windows-experience/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/86.03cf4c3a.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"2 min read\",\"minutes\":1.025,\"time\":61499.99999999999,\"words\":205}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"安装boot2docker\"\n    }}>{`安装Boot2docker`}</h2>\n    <p>{`从`}<a parentName=\"p\" {...{\n        \"href\": \"http://boot2docker.io/\"\n      }}>{`http://boot2docker.io/`}</a>{`可以看到这个软件是为了支持windows和mac的一个中间件包含了一个定制的轻量级VirtualBox虚拟机，最初Docker运行在Linux的哦。\n建议完整安装，这样会包括全部所需的内容。`}</p>\n    <h2 {...{\n      \"id\": \"镜像\"\n    }}>{`镜像`}</h2>\n    <h3 {...{\n      \"id\": \"获取\"\n    }}>{`获取`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker pull ubuntu  #下载最新的ubuntu镜像到本地\ndocker run -t -i ubuntu //bin/bash  #用ubuntu镜像创建一个容器，在其中运行bash应用，这里的“//”是在windows下面使用的转义符，用“/”会报错。\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"查看镜像信息\"\n    }}>{`查看镜像信息`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker images#查看镜像信息\ndocker tag#给镜像添加标签\ndocker inspect [ID]#获取镜像详细信息\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"搜索镜像\"\n    }}>{`搜索镜像`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker search [term]    #搜索镜像，term参数：\n--automated=false仅显示自动创建的对象 \n--no-trunc=false输出信息不截断显示 \n-s,--stars=0指定仅显示评价为指定星级以上的镜像\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"删除镜像\"\n    }}>{`删除镜像`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker rmi [image tag or ID]    #删除镜像，强制删除添加-f参数\ndocker rm [ID]#删除容器\n`}</code></pre>\n    <p>{`不建议强制删除，正确的做法是先删除依赖该镜像的容器，再删除镜像`}</p>\n    <h3 {...{\n      \"id\": \"创建镜像\"\n    }}>{`创建镜像`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker commit [opt] CONTAINER [repo[:tag]]#\n-a,--author=\"\"作者信息，\n-m,--message=\"\"提交消息，\n-p,--pause=true提交时暂停容器运行\n`}</code></pre>\n    <p>{`例如，首先启动一个镜像容器并且在其中创建一个文件，`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -t -i ubuntu //bin/bash\n\nroot@id$touch test\n\nroot@id$exit\n`}</code></pre>\n    <p>{`然后提交`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker commit -m \"add a test\" -a \"mzvast\" id test\n`}</code></pre>\n    <p>{`然后查看本地镜像列表`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker images\n`}</code></pre>\n    <p>{`可以看到多了个test的repo哦！`}</p>\n    <p>{`此外也可以从本地导入镜像比如`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$cat xxx.tar.gz|docker import -ubuntu:14.04，\n`}</code></pre>\n    <p>{`然后也可以在本地镜像列表中看到`}</p>\n    <h3 {...{\n      \"id\": \"导出和载入镜像\"\n    }}>{`导出和载入镜像`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker save -o file_name.tar ubuntu:14.04\n`}</code></pre>\n    <p>{`这样就可以把镜像列表中的ubuntu的tag为14.04的版本导出成tar文件啦`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker load --input file_name.tar或者docker load <file_name.tar\n`}</code></pre>\n    <p>{`这样就可以导入啦`}</p>\n    <h3 {...{\n      \"id\": \"上传镜像\"\n    }}>{`上传镜像`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`$docker push NAME[:tag]  \n`}</code></pre>\n    <p>{`这样就可以上传自制镜像到DockerHub网站啦，不过要先注册哦`}</p>\n    <h2 {...{\n      \"id\": \"容器\"\n    }}>{`容器`}</h2>\n    <h3 {...{\n      \"id\": \"创建容器\"\n    }}>{`创建容器`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker create -it ubuntu:latest\n`}</code></pre>\n    <p>{`然后可以`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker ps -a        #查看所有容器状态\n`}</code></pre>\n    <p>{`看到创建的容器处于停止状态，可以使用`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker start    #启动容器\n`}</code></pre>\n    <p>{`理论上`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run = docker create + docker start\n\n-t选项分配一个伪终端pseudo-tty并且绑定到容器标准输入上，\n-i则让容器的标准输入保持打开状态\nctrl+d或者exit退出容器\n`}</code></pre>\n    <p>{`守护态运行通过-d参数实现`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker run -d ubuntu //bin/sh -c \"while true; do echo hello world; sleep 1;done\"\n`}</code></pre>\n    <p>{`容器启动后会返回一个唯一的ID`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`docker ps   #查看容器信息\ndocker ps logs [id] #查看输出信息\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"终止容器\"\n    }}>{`终止容器`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`docker stop [-t|--time[=10]]    #首先向容器发送SIGTERM信号，等待（默认10秒）一段时间后再发送SIGKILL信号终止容器。\ndocker kill [id]    #强行终止容器\ndocker ps -aq   #查看处于终止状态的容器\ndocker start [id]   #启动终止态的容器\ndocker restart [id] #将正在运行的容器重启\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"进入容器\"\n    }}>{`进入容器`}</h3>\n    <p>在使用-d参数容器会进入守护态，此时用户无法看到容器的信息，如果要进入容器，有多种方法。\n      <pre><code parentName=\"pre\" {...{}}>{`docker attach [id/name] #缺点是多窗口attach到同一个容器的时候会同步显示，阻塞。\ndocker exec ……例如docker exec -ti id //bin/bash，这样就可在容器内开多个bash了\nnsenter工具(enter into namespaces),不推荐，exec是更好的工具。\n`}</code></pre>\n      <p>{`先体验到这里，后续的内容下次更新咯`}</p></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"安装boot2docker\",\n    level: 2,\n    title: \"安装Boot2docker\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"镜像\",\n    level: 2,\n    title: \"镜像\",\n    children: [\n        {\n              id: \"获取\",\n              level: 3,\n              title: \"获取\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"查看镜像信息\",\n              level: 3,\n              title: \"查看镜像信息\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"搜索镜像\",\n              level: 3,\n              title: \"搜索镜像\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"删除镜像\",\n              level: 3,\n              title: \"删除镜像\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"创建镜像\",\n              level: 3,\n              title: \"创建镜像\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"导出和载入镜像\",\n              level: 3,\n              title: \"导出和载入镜像\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"上传镜像\",\n              level: 3,\n              title: \"上传镜像\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"容器\",\n    level: 2,\n    title: \"容器\",\n    children: [\n        {\n              id: \"创建容器\",\n              level: 3,\n              title: \"创建容器\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"终止容器\",\n              level: 3,\n              title: \"终止容器\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"进入容器\",\n              level: 3,\n              title: \"进入容器\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}