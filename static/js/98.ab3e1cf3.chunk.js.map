{"version":3,"sources":["routes/posts/2016/12-07-about-wsl/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","parentName","href","id","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"qSAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAMC,KAAO,KAAKC,MAAQ,IAS9EC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,kEAAgBA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CAClCC,KAAQ,6DADI,iBAGhBN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,kDADR,kDAGAP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,sDADR,uDAGAP,OAAAE,EAAA,EAAAF,CAAA,mfACEA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGE,WAAW,KAAQ,CACpBC,KAAQ,kDADV,2BADF,oWAIAN,OAAAE,EAAA,EAAAF,CAAA,4kBAEAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,2GADR,4GAGAP,OAAAE,EAAA,EAAAF,CAAA,yXAEAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,8FADR,+FAGAP,OAAAE,EAAA,EAAAF,CAAA,ohBACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNO,GAAM,8DADR,+DAGAP,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,qGACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,2JACAL,OAAAE,EAAA,EAAAF,CAAA,MAAIK,WAAW,MAAf,mXAMNT,EAAWY,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,CAChD,CACEH,GAAI,iDACJM,MAAO,EACPC,MAAO,iDACPC,SAAU,CACN,CACMR,GAAI,qDACJM,MAAO,EACPC,MAAO,sDACPC,SAAU,IAIlB,CACQR,GAAI,0GACJM,MAAO,EACPC,MAAO,2GACPC,SAAU,IAIlB,CACQR,GAAI,6FACJM,MAAO,EACPC,MAAO,8FACPC,SAAU,IAIlB,CACQR,GAAI,6DACJM,MAAO,EACPC,MAAO,8DACPC,SAAU,QAQXC,EAAc","file":"static/js/98.ab3e1cf3.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.145,\"time\":8700,\"words\":29}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <p>{`本文旧版本已发表在`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.zhihu.com/question/41967910/answer/134773244\"\n      }}>{`知乎`}</a></p>\n    <h2 {...{\n      \"id\": \"bash-on-windows-存在的问题\"\n    }}>{`bash on windows 存在的问题`}</h2>\n    <h3 {...{\n      \"id\": \"1windows下的ide无法整合wsl\"\n    }}>{`1.windows下的IDE无法整合WSL`}</h3>\n    <p>{`我觉得作为开发环境很重要的一点就是win下的IDE们不能“方便”地直接调用WSL下的程序，比如在vscode下面不能调用WSL里的git，而非得装个git-bash。更别说IDE里直接调用WSL里面的python，node，go了。\n根据微软`}<a parentName=\"p\" {...{\n        \"href\": \"https://blogs.msdn.microsoft.com/commandline/\"\n      }}>{`最新build中`}</a>{`提出的互操作，重点似乎在WSL侧调用windows程序，他们已经把win下的path都append到WSL的path了，但在windows侧则不可见WSL的path，只能通过蹩脚的bash -c 去调用。`}</p>\n    <p>{`在微软自己都没有搞清楚两者互操作关系的前提下，就会有各种类似于这样的问题：用xxx-for-win还是用xxx-on-WSL？\n若只在WSL侧装工具链，windows侧的IDE就是残废成只能做编辑器了，你用的win下的工具链怎么测linux下的bug，怎么加断点调试？`}</p>\n    <h3 {...{\n      \"id\": \"2wsl阉割gui硬伤导致不具备高效的开发环境\"\n    }}>{`2.WSL阉割GUI硬伤导致不具备高效的开发环境`}</h3>\n    <p>{`不仅互操作不行，在WSL里面开发体验也是很糟糕的。\n之前盛传的在windows下用xserver运行Ubuntu桌面程序的视频也是反映了开发者对缺乏GUI支持的诉求。`}</p>\n    <h3 {...{\n      \"id\": \"3wsl定位究竟是开发环境or生产环境？\"\n    }}>{`3.WSL定位究竟是开发环境or生产环境？`}</h3>\n    <p>{`甚至我觉得微软的表述是自相矛盾的，他说WSL是面向开发，但无论怎么看没有GUI的Ubuntu更像是一个部署环境，而不是开发环境，没有IDE的支持怎么调试怎么开发呢？而且按照现在的完成度，只是个玩具。`}</p>\n    <h3 {...{\n      \"id\": \"4关于wsl未来的几点想法\"\n    }}>{`4.关于WSL未来的几点想法`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`微软绝对不会放弃windows下工具链的支持`}</li>\n      <li parentName=\"ul\">{`WSL短期内不能取代windows下工具链，至少从IDE支持度上差距很大`}</li>\n      <li parentName=\"ul\">{`微软的目前的所有动作看起来都似乎表明WSL的真实目的是让linux开发者用dotnet和SQLserver，也就是把linux的开发者拉过去，而不是把windows的开发者推出去。`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"bash-on-windows-存在的问题\",\n    level: 2,\n    title: \"bash on windows 存在的问题\",\n    children: [\n        {\n              id: \"1windows下的ide无法整合wsl\",\n              level: 3,\n              title: \"1.windows下的IDE无法整合WSL\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"2wsl阉割gui硬伤导致不具备高效的开发环境\",\n              level: 3,\n              title: \"2.WSL阉割GUI硬伤导致不具备高效的开发环境\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"3wsl定位究竟是开发环境or生产环境？\",\n              level: 3,\n              title: \"3.WSL定位究竟是开发环境or生产环境？\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"4关于wsl未来的几点想法\",\n              level: 3,\n              title: \"4.关于WSL未来的几点想法\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}