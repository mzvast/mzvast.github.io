(window.webpackJsonp=window.webpackJsonp||[]).push([[112],{439:function(n,s,a){"use strict";a.r(s),a.d(s,"readingTime",function(){return o}),a.d(s,"default",function(){return l}),a.d(s,"tableOfContents",function(){return u}),a.d(s,"frontMatter",function(){return i});var t=a(32),p=(a(0),a(44)),o={text:"7 min read",minutes:6.705,time:402300,words:1341},e={},c="wrapper";function l(n){var s=n.components,a=Object(t.a)(n,["components"]);return Object(p.b)(c,Object.assign({},e,a,{components:s,mdxType:"MDXLayout"}),Object(p.b)("h2",{id:"\u80cc\u666f"},"\u80cc\u666f"),Object(p.b)("p",null,"\u672c\u535a\u5ba2\u5728\u65e5\u5e38\u5199\u4f5c\u4e2d\u9047\u5230\u4e00\u4e9b\u53ef\u8bfb\u6027\u548c\u89c6\u89c9\u4f20\u8fbe\u65b9\u9762\u7684\u95ee\u9898\uff0c\u6bd4\u5982"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"\u6ca1\u6709\u76ee\u5f55 Toc")),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"\u7f3a\u4e4f\u4ee3\u7801\u884c\u9ad8\u4eae LineNumbersHighlight\u3002\u4ee3\u7801\u7f3a\u4e4f\u8868\u73b0\u529b\u3001\u91cd\u70b9\u4e0d\u7a81\u51fa\u3002"))),Object(p.b)("p",null,"\u672c\u6587\u5c31\u5bf9\u6b64\u8fdb\u884c\u5b66\u4e60\uff0c\u6709\u529f\u80fd\u5c31\u7528\uff0c\u6ca1\u6709\u5c31\u9020\u8f6e\u5b50\u3002"),Object(p.b)("h2",{id:"toc"},"Toc"),Object(p.b)("p",null,"\u6b64\u524d\uff0c\u6211\u5728\u6bcf\u6b21\u843d\u7b14\u524d\u4f1a\u5148\u5199\u4e00\u4e2a\u6240\u8c13\u7684\u201c\u4f60\u5c06\u4ece\u672c\u6587\u4e86\u89e3\u5230\u201d\u7684\u4e00\u8282\u6765\u4f5c\u4e3a\u63d0\u7eb2\uff0c\u907f\u514d\u79bb\u9898\u3002\uff08\u4e8b\u5b9e\u8bc1\u660e\u786e\u5b9e\u6709\u5e2e\u52a9\uff09\n\u4f46\u662f\u8fd9\u4e2a\u624b\u5de5\u7684\u76ee\u5f55\u548c\u5177\u5907\u8df3\u8f6c\u80fd\u529b\u7684\u76ee\u5f55\u8fd8\u662f\u5dee\u5f88\u591a\u3002"),Object(p.b)("p",null,"\u672c\u535a\u5ba2\u5de5\u7a0b\u4e2d\u5e76\u6ca1\u6709\u7ec4\u4ef6\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\u4f46\u597d\u5728 mdx \u76f8\u5173\u63d2\u4ef6(mdxTableOfContents)\u63d0\u4f9b\u4e86 toc \u7684\u6570\u636e\u3002\u6211\u4eec\u53ef\u4ee5\u81ea\u5df1\u6e32\u67d3\u4e00\u4e2a toc\uff0c\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5199\u4e00\u4e2a\u76ee\u5f55\u7ec4\u4ef6\u3002"),Object(p.b)("h3",{id:"toc-\u6570\u636e\u6765\u6e90\u53ca\u5176\u6570\u636e\u7ed3\u6784"},"Toc \u6570\u636e\u6765\u6e90\u53ca\u5176\u6570\u636e\u7ed3\u6784"),Object(p.b)("p",null,"\u53ef\u4ee5\u4ece",Object(p.b)("inlineCode",{parentName:"p"},"src/components/BlogPostLayout.tsx"),"\u4e2d\u53d1\u73b0 react-navi \u8def\u7531\u63d0\u4f9b\u4e86\u89c6\u56fe\u6570\u636e\uff0c\u5176\u4e2d tableOfContents \u5c31\u662f mdx \u63d2\u4ef6\u63d0\u4f9b\u7684\u83b7\u53d6 Toc \u6570\u636e\u4f53\u7684 function\u3002"),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx","data-language":"tsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">function</span> <span class="token function">BlogPostLayout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>blogRoot<span class="token punctuation">}</span><span class="token punctuation">:</span> BlogPostLayoutProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span>title<span class="token punctuation">,</span> data<span class="token punctuation">,</span> url<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCurrentRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token punctuation">{</span>connect<span class="token punctuation">,</span> content<span class="token punctuation">,</span> head<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>\n    <span class="token comment">// let {MDXComponent, readingTime} = content;</span>\n<span class="highlighted-line">    <span class="token keyword">let</span> <span class="token punctuation">{</span>MDXComponent<span class="token punctuation">,</span> readingTime<span class="token punctuation">,</span> tableOfContents<span class="token punctuation">}</span> <span class="token operator">=</span> content<span class="token punctuation">;</span></span>    <span class="token keyword">const</span> disqusShortname <span class="token operator">=</span> <span class="token string">\'miaocode\'</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> disqusConfig<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n        url<span class="token punctuation">:</span> <span class="token string">\'https://mzvast.github.io\'</span> <span class="token operator">+</span> url<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>\n        identifier<span class="token punctuation">:</span> data<span class="token punctuation">.</span>slug<span class="token punctuation">,</span>\n        title<span class="token punctuation">:</span> title\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("p",null,"\u5176\u8fd4\u8fd8\u7684\u6570\u636e\u7ed3\u6784",Object(p.b)("inlineCode",{parentName:"p"},"TableOfContentsData"),"\u5982\u4e0b\u3002"),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx","data-language":"tsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">type</span> TocItem <span class="token operator">=</span> <span class="token punctuation">{</span>\n    id<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    level<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    title<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n    children<span class="token punctuation">:</span> TocItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> TableOfContentsData<span class="token punctuation">:</span>TocItem<span class="token punctuation">[</span><span class="token punctuation">]</span>\n'}}))),Object(p.b)("p",null,"\u63d2\u4ef6\u7684\u90e8\u5206\u4ee3\u7801\u6211\u4eec\u53ef\u4ee5\u770b\u4e00\u4e0b,\u503c\u5f97\u5230\u8fd9\u4e2a\u63d2\u4ef6\u53ea\u7528\u5230 level2 \u548c 3\uff0c\u518d\u6df1\u7684\u5c42\u6b21\u5c31\u4e0d\u89e3\u6790\u4e86\u3002\u5982\u679c\u6709\u9700\u8981\u53ef\u4ee5\u901a\u8fc7\u4f20\u53c2\u7684\u65b9\u5f0f\u4fee\u6539\u5c42\u7ea7\uff08\u672c\u535a\u5ba2\u5e76\u4e0d\u9700\u8981\uff09\u3002"),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-tsx","data-language":"tsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="highlighted-line"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span></span><span class="highlighted-line">    <span class="token parameter">root<span class="token punctuation">,</span></span><span class="highlighted-line">    <span class="token punctuation">{</span>minTableOfContentsLevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> maxTableOfContentsLevel <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></span><span class="highlighted-line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>    <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n        hasFrontMatterExport<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        hasTableOfContentsExport<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n        tableOfContents<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// ...</span>\n\n    <span class="token keyword">return</span> info<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n'}}))),Object(p.b)("p",null,"\u6700\u540e\u6709\u4e86\u6570\u636e\u4e4b\u540e\u7684\u7ec4\u4ef6\u7f16\u5199\u95ee\u9898\u5c31\u7b80\u5355\u4e86\u3002\u6837\u5f0f\u4e0a\u590d\u7528 blockquote \u7684\u6837\u5f0f\uff0c\u5e76\u7a0d\u4f5c\u8c03\u6574\uff0c\u5b8c\u6210\u4e4b\u540e\u5c31\u662f\u73b0\u5728\u6587\u7ae0\u5934\u90e8\u7684 Toc \u60f9\u3002"),Object(p.b)("h2",{id:"\u4ee3\u7801\u5757\u9ad8\u4eae"},"\u4ee3\u7801\u5757\u9ad8\u4eae"),Object(p.b)("p",null,"\u5de5\u7a0b\u4e2d@mdx-js/react \u662f\u9ed8\u8ba4\u652f\u6301\u8be5\u529f\u80fd\u7684\u3002\u5177\u4f53\u770b\u4e0b\u9762\u5206\u6790\u3002"),Object(p.b)("h3",{id:"code-block-highlight-\u8bed\u6cd5"},"code block highlight \u8bed\u6cd5"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"\u4ee3\u7801\u5757\u5934\u90e8\u58f0\u660e"),Object(p.b)("p",{parentName:"li"},Object(p.b)("em",{parentName:"p"},"`","`","`","js{1,2,3\u20136}"))),Object(p.b)("li",{parentName:"ul"},Object(p.b)("p",{parentName:"li"},"\u6587\u4e2d\u58f0\u660e"),Object(p.b)("pre",{parentName:"li"},Object(p.b)("code",Object.assign({parentName:"pre"},{}),"highlight-line\uff1a\u9ad8\u4eae\u5f53\u524d\u884c\n\nhighlight-next-line\uff1a\u9ad8\u4eae\u4e0b\u4e00\u884c\n\nhighlight-start\uff1a\u8fde\u7eed\u9ad8\u4eae\u5f00\u59cb\uff0c\u548c hightlight-end \u6210\u5bf9\u4f7f\u7528\u3002\n\nhighlight-range{1, 4-6}\uff1a\u6307\u5b9a\u884c\u53f7\u9ad8\u4eae\u3002\n")))),Object(p.b)("h3",{id:"mdx-\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0"},"mdx \u4e2d\u7684\u5177\u4f53\u5b9e\u73b0"),Object(p.b)("p",null,"\u672c blog \u5de5\u7a0b\u57fa\u4e8e",Object(p.b)("inlineCode",{parentName:"p"},"react-scripts-mdx"),"\uff0c\u5b83\u4f9d\u8d56\u4e86",Object(p.b)("inlineCode",{parentName:"p"},"mdx-loader"),"\uff0c\u8fd9\u4e2a loader \u7684\u5165\u53e3\u4ee3\u7801\u5982\u4e0b"),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token keyword">const</span> <span class="token punctuation">{</span>getOptions<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'loader-utils\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> readingTime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'reading-time\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> emoji <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'remark-emoji\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'remark-images\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> textr <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'remark-textr\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> slug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'remark-slug\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mdx <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'@mdx-js/mdx\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mdxTableOfContents <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mdx-table-of-contents\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> mdxExportJSONByDefault <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'mdx-constant\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> grayMatter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'gray-matter\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> typography <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./typography\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="highlighted-line"><span class="token keyword">const</span> rehypePrism <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./prism\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> result<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span> content<span class="token punctuation">:</span> mdxContent<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">grayMatter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>\n        <span class="token punctuation">{</span>\n            remarkPlugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                slug<span class="token punctuation">,</span>\n                images<span class="token punctuation">,</span>\n                emoji<span class="token punctuation">,</span>\n                <span class="token punctuation">[</span>textr<span class="token punctuation">,</span> <span class="token punctuation">{</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>typography<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>\n            <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="highlighted-line">            rehypePlugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>rehypePrism<span class="token punctuation">]</span><span class="token punctuation">,</span></span>            compilers<span class="token punctuation">:</span> <span class="token punctuation">[</span>\n                mdxTableOfContents<span class="token punctuation">,</span>\n                <span class="token function">mdxExportJSONByDefault</span><span class="token punctuation">(</span><span class="token string">\'frontMatter\'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>\n            <span class="token punctuation">]</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>filepath<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">}</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mdx</span><span class="token punctuation">(</span>mdxContent<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> estimatedReadingTime <span class="token operator">=</span> <span class="token function">readingTime</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\nimport React from \'react\'\nimport { mdx } from \'@mdx-js/react\'\nexport const readingTime = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>estimatedReadingTime<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("p",null,"\u5176\u4e2d\u6709\u4e2a rehypePrism\uff0c\u6211\u4eec\u5bf9\u6b64\u6bd4\u8f83\u611f\u5174\u8da3\uff0c"),Object(p.b)("p",null,"\u5176\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b"),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token punctuation">.</span>\n\u251c\u2500\u2500 getCodeBlockOptions<span class="token punctuation">.</span>js\n\u251c\u2500\u2500 highlightCode<span class="token punctuation">.</span>js\n\u251c\u2500\u2500 highlightLines<span class="token punctuation">.</span>js\n\u251c\u2500\u2500 index<span class="token punctuation">.</span>js\n\u2514\u2500\u2500 loadPrismLanguage<span class="token punctuation">.</span>js\n'}}))),Object(p.b)("p",null,"\u8ba9\u6211\u4eec\u770b\u770b\u4ee3\u7801"),Object(p.b)("h4",{id:"indexjs"},"index.js"),Object(p.b)("p",null,"\u9876\u90e8\u6709\u4e00\u6bb5\u6ce8\u91ca\uff0c\u8868\u660e\u8fd9\u6bb5\u4ee3\u7801\u8ddf",Object(p.b)("a",Object.assign({parentName:"p"},{href:"https://www.gatsbyjs.com/plugins/gatsby-remark-prismjs/"}),"gatsby-remark-prismjs"),"\u6709\u67d0\u79cd\u5173\u8054\u3002"),Object(p.b)("p",null,"\u8fd9\u6bb5\u4ee3\u7801\u505a\u7684\u4e8b\u60c5\u662f",Object(p.b)("inlineCode",{parentName:"p"},"\u7ed3\u7b97\u4ee3\u7801\u5757\u5934\u90e8\u7684\u9ad8\u4eae\u4fe1\u606f"),"\u3002"),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token punctuation">.</span>\n\u251c\u2500\u2500 getCodeBlockOptions<span class="token punctuation">.</span>js\n\u251c\u2500\u2500 highlightCode<span class="token punctuation">.</span>js\n\u251c\u2500\u2500 highlightLines<span class="token punctuation">.</span>js\n<span class="highlighted-line">\u251c\u2500\u2500 index<span class="token punctuation">.</span>js</span>\u2514\u2500\u2500 loadPrismLanguage<span class="token punctuation">.</span>js\n<span class="token comment">/*\nCode used under license from mapbox and Gatsby\nhttps://github.com/mapbox/rehype-prism\n<span class="highlighted-line">https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/src/</span>*/</span>\n\n<span class="token keyword">const</span> visit <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'unist-util-visit\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> nodeToString <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'hast-util-to-string\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> getCodeBlockOptions <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./getCodeBlockOptions\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> highlightCode <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./highlightCode</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> defaultAliases <span class="token operator">=</span> <span class="token punctuation">{</span>\n    js<span class="token punctuation">:</span> <span class="token string">\'jsx\'</span><span class="token punctuation">,</span>\n    html<span class="token punctuation">:</span> <span class="token string">\'markup\'</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">tree</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n<span class="highlighted-line">        <span class="token function">visit</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token string">\'element\'</span><span class="token punctuation">,</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">function</span> <span class="token function">visitor</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> index<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="highlighted-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parent <span class="token operator">||</span> parent<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">\'pre\'</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">\'code\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// \u53ea\u5904\u7406pre/code\u6807\u7b7e\u7684\u76f4\u63a5\u5b69\u5b50</span>\n        <span class="token keyword">let</span> fenceString<span class="token punctuation">;</span>\n        <span class="token keyword">const</span> className <span class="token operator">=</span> node<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>className <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> classListItem <span class="token keyword">of</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>classListItem<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">\'language-\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                fenceString <span class="token operator">=</span> classListItem<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n<span class="highlighted-line">        <span class="token keyword">const</span> <span class="token punctuation">{</span></span><span class="highlighted-line">            language<span class="token punctuation">,</span></span><span class="highlighted-line">            normalizedLanguage<span class="token punctuation">,</span></span><span class="highlighted-line">            highlightedLineNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="highlighted-line">        <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCodeBlockOptions</span><span class="token punctuation">(</span>fenceString<span class="token punctuation">,</span> options<span class="token punctuation">.</span>aliases <span class="token operator">||</span> defaultAliases<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">        <span class="token comment">// \u89e3\u6790\u4ee3\u7801\u5757\u5934\u90e8\u7684{1-10,5,6}\uff0c\u53d8\u6210\u884c\u53f7\u6570\u7ec4</span></span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">nodeToString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            node<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token punctuation">(</span>\n                parent<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>className <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">\'language-\'</span> <span class="token operator">+</span> normalizedLanguage<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            node<span class="token punctuation">.</span>properties<span class="token punctuation">[</span><span class="token string">\'data-language\'</span><span class="token punctuation">]</span> <span class="token operator">=</span> normalizedLanguage<span class="token punctuation">;</span>\n            node<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>\n                <span class="token string">\'data-highlighted-line-numbers\'</span>\n            <span class="token punctuation">]</span> <span class="token operator">=</span> highlightedLineNumbers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            node<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="highlighted-line">            node<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>dangerouslySetInnerHTML <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="highlighted-line">                __html<span class="token punctuation">:</span> <span class="token function">highlightCode</span><span class="token punctuation">(</span>language<span class="token punctuation">,</span> code<span class="token punctuation">,</span> highlightedLineNumbers<span class="token punctuation">)</span></span><span class="highlighted-line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="highlighted-line">            <span class="token comment">// \u5c06\u4ee3\u7801\u5757\u5934\u90e8\u7684\u884c\u53f7\u4f20\u5165\u9ad8\u4eae\u5904\u7406\u51fd\u6570\uff0c\u751f\u4ea7\u51fa\u9700\u8981\u7684html\uff08\u5b83\u8fd8\u4f1a\u5904\u7406code\u4e2d\u7684\u6ce8\u91ca\u5f62\u5f0f\u7684\u9ad8\u4eae\uff09</span></span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/Unknown language/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">throw</span> err<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("h4",{id:"highlightcodejs"},"highlightCode.js"),Object(p.b)("p",null,"\u8fd9\u4e2a\u6587\u4ef6\u7684\u4f5c\u7528\u4e3b\u8981\u5c31\u662f",Object(p.b)("inlineCode",{parentName:"p"},"\u9488\u5bf9\u8bed\u8a00\u8fdb\u884cgrammer\u9ad8\u4eae"),"\u7136\u540e\u5c06\u5904\u7406\u8fc7\u7684 code \u7528",Object(p.b)("inlineCode",{parentName:"p"},"highlightLines"),"\u51fd\u6570\u6807\u8bb0 lineNumber \u9ad8\u4eae"),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token punctuation">.</span>\n\u251c\u2500\u2500 getCodeBlockOptions<span class="token punctuation">.</span>js\n<span class="highlighted-line">\u251c\u2500\u2500 highlightCode<span class="token punctuation">.</span>js</span>\u251c\u2500\u2500 highlightLines<span class="token punctuation">.</span>js\n\u251c\u2500\u2500 index<span class="token punctuation">.</span>js\n\u2514\u2500\u2500 loadPrismLanguage<span class="token punctuation">.</span>js\n<span class="token comment">/*\nCode used under license from Gatsby\nhttps://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/src/\n*/</span>\n\n<span class="token keyword">const</span> Prism <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">prismjs</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">lodash</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> loadPrismLanguage <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./loadPrismLanguage</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> highlightLines <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./highlightLines</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">language<span class="token punctuation">,</span> code<span class="token punctuation">,</span> lineNumbersHighlight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token comment">// (Try to) load languages on demand.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Prism<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>language<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token function">loadPrismLanguage</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Language wasn\'t loaded so let\'s bail.</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">none</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> code<span class="token punctuation">;</span> <span class="token comment">// Don\'t escape if set to none.</span>\n            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> grammar <span class="token operator">=</span> Prism<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>language<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> highlightedCode <span class="token operator">=</span> Prism<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> grammar<span class="token punctuation">,</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="highlighted-line">    <span class="token keyword">const</span> codeSplits <span class="token operator">=</span> <span class="token function">highlightLines</span><span class="token punctuation">(</span>highlightedCode<span class="token punctuation">,</span> lineNumbersHighlight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n    <span class="token keyword">let</span> finalCode <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> lastIdx <span class="token operator">=</span> codeSplits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token comment">// Don\'t add back the new line character after highlighted lines</span>\n    <span class="token comment">// as they need to be display: block and full-width.</span>\n    codeSplits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">split<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        split<span class="token punctuation">.</span>highlight\n            <span class="token operator">?</span> <span class="token punctuation">(</span>finalCode <span class="token operator">+=</span> split<span class="token punctuation">.</span>code<span class="token punctuation">)</span>\n            <span class="token punctuation">:</span> <span class="token punctuation">(</span>finalCode <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>split<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>idx <span class="token operator">==</span> lastIdx <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> finalCode<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))),Object(p.b)("h4",{id:"highlightlinesjs"},"highlightLines.js"),Object(p.b)("p",null,"\u8fd9\u6bb5\u4ee3\u7801\u53ea\u505a\u4e00\u4ef6\u4e8b\u5c31\u662f",Object(p.b)("inlineCode",{parentName:"p"},"\u9ad8\u4eae\u884c")),Object(p.b)("pre",null,Object(p.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx","data-language":"jsx","data-highlighted-line-numbers":"",dangerouslySetInnerHTML:{__html:'<span class="token punctuation">.</span>\n\u251c\u2500\u2500 getCodeBlockOptions<span class="token punctuation">.</span>js\n\u251c\u2500\u2500 highlightCode<span class="token punctuation">.</span>js\n<span class="highlighted-line">\u251c\u2500\u2500 highlightLines<span class="token punctuation">.</span>js</span>\u251c\u2500\u2500 index<span class="token punctuation">.</span>js\n\u2514\u2500\u2500 loadPrismLanguage<span class="token punctuation">.</span>js\n<span class="token comment">/*\nCode used under license from Gatsby\nhttps://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/src/\n*/</span>\n\n<span class="token keyword">const</span> rangeParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">parse-numeric-range</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n * As code has already been prism-highlighted at this point,\n * a JSX opening comment:\n *     {/*\n * would look like this:\n *     &lt;span class="token punctuation">{&lt;/span>&lt;span class="token comment">/*\n * And a HTML opening comment:\n *     &lt;!--\n * would look like this:\n *     &amp;lt;!--\n */</span>\n<span class="token keyword">const</span> <span class="token constant">HIGHLIGHTED_JSX_COMMENT_START</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span class="token punctuation">\\\\{&lt;\\\\/span>&lt;span class="token comment">\\\\/\\\\*</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">HIGHLIGHTED_JSX_COMMENT_END</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\\\*\\\\/&lt;\\\\/span>&lt;span class="token punctuation">\\\\}&lt;/span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">HIGHLIGHTED_HTML_COMMENT_START</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&amp;lt;!--</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">PRISMJS_COMMENT_OPENING_SPAN_TAG</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(&lt;span\\\\sclass="token\\\\scomment">)?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">PRISMJS_COMMENT_CLOSING_SPAN_TAG</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(&lt;\\\\/span>)?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">COMMENT_START</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>\n    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(#|\\\\/\\\\/|\\\\{\\\\/\\\\*|\\\\/\\\\*+|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">HIGHLIGHTED_HTML_COMMENT_START</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">createDirectiveRegExp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">featureSelector</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>featureSelector<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-(next-line|line|start|end|range)({([^}]+)})?</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">COMMENT_END</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(--\x3e|\\\\*\\\\/\\\\}|\\\\*\\\\/)?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">DIRECTIVE</span> <span class="token operator">=</span> <span class="token function">createDirectiveRegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(highlight|hide)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token constant">HIGHLIGHT_DIRECTIVE</span> <span class="token operator">=</span> <span class="token function">createDirectiveRegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">highlight</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">END_DIRECTIVE</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    highlight<span class="token punctuation">:</span> <span class="token regex">/highlight-end/</span><span class="token punctuation">,</span>\n    hide<span class="token punctuation">:</span> <span class="token regex">/hide-end/</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">PLAIN_TEXT_WITH_LF_TEST</span> <span class="token operator">=</span> <span class="token regex">/&lt;span class="token plain-text">[^&lt;]*\\n[^&lt;]*&lt;\\/span>/g</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">stripComment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token comment">/**\n     * This regexp does the following:\n     * 1. Match a comment start, along with the accompanying PrismJS opening comment span tag;\n     * 2. Match one of the directives;\n     * 3. Match a comment end, along with the accompanying PrismJS closing span tag.\n     */</span>\n    line<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n        <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>\n            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\\\s*(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">HIGHLIGHTED_JSX_COMMENT_START</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PRISMJS_COMMENT_OPENING_SPAN_TAG</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">COMMENT_START</span><span class="token punctuation">.</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)\\\\s*</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">.</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\\\s*(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">HIGHLIGHTED_JSX_COMMENT_END</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">COMMENT_END</span><span class="token punctuation">.</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PRISMJS_COMMENT_CLOSING_SPAN_TAG</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">highlightWrap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span class="highlighted-line"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">const</span> <span class="token function-variable function">parseLine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">line<span class="token punctuation">,</span> code<span class="token punctuation">,</span> index<span class="token punctuation">,</span> actions</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> feature<span class="token punctuation">,</span> directive<span class="token punctuation">,</span> directiveRange<span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> flagSource <span class="token operator">=</span> <span class="token punctuation">{</span>\n        feature<span class="token punctuation">,</span>\n        index<span class="token punctuation">,</span>\n        directive<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>feature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>directive<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>directiveRange<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span>directive<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">next-line</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span>\n            actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="highlighted-line">            <span class="token comment">// \u8de8\u884c\u9ad8\u4eae\u7684\u903b\u8f91</span></span><span class="highlighted-line">        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">start</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><span class="highlighted-line">            <span class="token comment">// find the next `${feature}-end` directive, starting from next line</span></span><span class="highlighted-line">            <span class="token keyword">const</span> endIndex <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span></span><span class="highlighted-line">                <span class="token punctuation">(</span><span class="token parameter">line<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> idx <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> <span class="token constant">END_DIRECTIVE</span><span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span><span class="highlighted-line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">            <span class="token keyword">const</span> end <span class="token operator">=</span> endIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> code<span class="token punctuation">.</span>length <span class="token punctuation">:</span> endIndex<span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">                actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> i<span class="token punctuation">,</span> flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">            <span class="token punctuation">}</span></span><span class="highlighted-line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span><span class="highlighted-line">        <span class="token punctuation">}</span></span>        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">line</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span>\n            actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> index<span class="token punctuation">,</span> flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            actions<span class="token punctuation">.</span><span class="token function">stripComment</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">range</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span>\n            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>directiveRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> strippedDirectiveRange <span class="token operator">=</span> directiveRange<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">const</span> range <span class="token operator">=</span> rangeParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strippedDirectiveRange<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>range<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    range<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">relativeIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                        actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>\n                            feature<span class="token punctuation">,</span>\n                            index <span class="token operator">+</span> relativeIndex<span class="token punctuation">,</span>\n                            flagSource\n                        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n\n            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Invalid match specified: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">highlightLineRange</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> highlights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="highlighted-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>highlights<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">HIGHLIGHT_DIRECTIVE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>        <span class="token comment">// HACK split plain-text spans with line separators inside into multiple plain-text spans</span>\n        <span class="token comment">// separatered by line separator - this fixes line highlighting behaviour for jsx</span>\n        code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">PLAIN_TEXT_WITH_LF_TEST</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n            match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\\n/g</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/span>\\n&lt;span class="token plain-text"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> split <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> lines <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span>code<span class="token punctuation">,</span> highlight<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> hide<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> flagSources<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">flag</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">feature<span class="token punctuation">,</span> line<span class="token punctuation">,</span> flagSource</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>line <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> line <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">const</span> lineMeta <span class="token operator">=</span> lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">;</span>\n                lineMeta<span class="token punctuation">[</span>feature<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                lineMeta<span class="token punctuation">.</span>flagSources<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">hide</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hide</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">highlight</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">highlight</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">stripComment</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n            lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token function">stripComment</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">const</span> <span class="token function-variable function">transform</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lines</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n        lines\n            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>hide<span class="token punctuation">,</span> highlight<span class="token punctuation">,</span> flagSources<span class="token punctuation">}</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>hide <span class="token operator">&amp;&amp;</span> highlight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">const</span> formattedSources <span class="token operator">=</span> flagSources\n                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>\n                            <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>feature<span class="token punctuation">,</span> index<span class="token punctuation">,</span> directive<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>\n                                <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  - Line </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n                                    index <span class="token operator">+</span> <span class="token number">1</span>\n                                <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>feature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>directive<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">")</span><span class="token template-punctuation string">`</span></span>\n                        <span class="token punctuation">)</span>\n                        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>\n                        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Line </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n                            index <span class="token operator">+</span> <span class="token number">1</span>\n                        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has been marked as both hidden and highlighted.\\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>formattedSources<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n                    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token keyword">return</span> <span class="token operator">!</span>hide<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>highlight<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    line<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token function">highlightWrap</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">return</span> line<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// If a highlight range is passed with the language declaration, e.g.</span>\n    <span class="token comment">// ``jsx{1, 3-4}</span>\n    <span class="token comment">// we only use that and do not try to parse highlight directives</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>highlights<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        highlights<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lineNumber</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n<span class="highlighted-line">            actions<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>lineNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// \u9ad8\u4eae\u5757\u58f0\u660e</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> split<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> line <span class="token operator">=</span> split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="highlighted-line">            <span class="token function">parseLine</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> split<span class="token punctuation">,</span> i<span class="token punctuation">,</span> actions<span class="token punctuation">)</span><span class="token punctuation">;</span>// \u9ad8\u4eae\u6307\u4ee4</span></span>        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n'}}))))}l.isMDXComponent=!0;var u=function(){arguments.length>0&&void 0!==arguments[0]&&arguments[0];return[{id:"\u80cc\u666f",level:2,title:"\u80cc\u666f",children:[]},{id:"toc",level:2,title:"Toc",children:[{id:"toc-\u6570\u636e\u6765\u6e90\u53ca\u5176\u6570\u636e\u7ed3\u6784",level:3,title:"Toc \u6570\u636e\u6765\u6e90\u53ca\u5176\u6570\u636e\u7ed3\u6784",children:[]}]},{id:"\u4ee3\u7801\u5757\u9ad8\u4eae",level:2,title:"\u4ee3\u7801\u5757\u9ad8\u4eae",children:[{id:"code-block-highlight-\u8bed\u6cd5",level:3,title:"code block highlight \u8bed\u6cd5",children:[]},{id:"mdx-\u4e2d\u7684\u5177\u4f53\u5b9e\u73b0",level:3,title:"mdx \u4e2d\u7684\u5177\u4f53\u5b9e\u73b0",children:[]}]}]},i={}}}]);
//# sourceMappingURL=112.e2bbb27c.chunk.js.map