{"version":3,"sources":["routes/posts/2020/06/30-how-to-build-screen-projection-app-with-WebRTC/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","src","alt","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"sSAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAMC,KAAO,kBAAkBC,MAAQ,KAS3FC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0DADR,0DAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,4BACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,kEAEFN,OAAAE,EAAA,EAAAF,CAAA,sDAAcA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAChCC,KAAQ,yCADE,gBAAd,UAGAP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,4BADR,4BAGAL,OAAAE,EAAA,EAAAF,CAAA,6NACAA,OAAAE,EAAA,EAAAF,CAAA,wEAAsBA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACxCC,KAAQ,oFADU,uCAAtB,mLAGAP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gEADR,gEAGAL,OAAAE,EAAA,EAAAF,CAAA,2NACAA,OAAAE,EAAA,EAAAF,CAAA,iMACAA,OAAAE,EAAA,EAAAF,CAAA,2vBACAA,OAAAE,EAAA,EAAAF,CAAA,yEACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,yDAAsCN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,cAAtC,KACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,uLACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,8DACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,wHAAmDN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAAnD,KACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,6IACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,oKACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,mHACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,8HAAoDN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,cAApD,WACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,uHAEFN,OAAAE,EAAA,EAAAF,CAAA,4RACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,8HACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,mLAAsEN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,WAAtE,KACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,yKAA4DN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,MAAvB,cAA5D,KACAN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAf,yIAEFN,OAAAE,EAAA,EAAAF,CAAA,mbACAA,OAAAE,EAAA,EAAAF,CAAA,iKACAA,OAAAE,EAAA,EAAAF,CAAA,SAAGA,OAAAE,EAAA,EAAAF,CAAA,MAAAA,OAAAG,OAAA,CAAKG,WAAW,KAAQ,CACvBE,IAAO,iEACPC,IAAO,qBAEXT,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gEADR,gEAGAL,OAAAE,EAAA,EAAAF,CAAA,gIACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,qGADR,qGAGAL,OAAAE,EAAA,EAAAF,CAAA,gYACAA,OAAAE,EAAA,EAAAF,CAAA,8PACFA,OAAAE,EAAA,EAAAF,CAAA,MAAAA,OAAAG,OAAA,CAAKG,WAAW,KAAQ,CAClBE,IAAO,mDACPC,IAAO,SAEXT,OAAAE,EAAA,EAAAF,CAAA,4kBACFA,OAAAE,EAAA,EAAAF,CAAA,MAAAA,OAAAG,OAAA,CAAKG,WAAW,KAAQ,CAClBE,IAAO,sDACPC,IAAO,SAEXT,OAAAE,EAAA,EAAAF,CAAA,0YACAA,OAAAE,EAAA,EAAAF,CAAA,2vBACAA,OAAAE,EAAA,EAAAF,CAAA,2CACAA,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MACbN,OAAAE,EAAA,EAAAF,CAAA,KAAGM,WAAW,MAAd,6FAEFN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MACbN,OAAAE,EAAA,EAAAF,CAAA,KAAGM,WAAW,MAAd,oMAGJN,OAAAE,EAAA,EAAAF,CAAA,0bACAA,OAAAE,EAAA,EAAAF,CAAA,8ZACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BI,UAAa,sBACbC,gBAAiB,aACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,0lEAGhBd,OAAAE,EAAA,EAAAF,CAAA,kWACAA,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,kaACAA,OAAAE,EAAA,EAAAF,CAAA,8gCACAA,OAAAE,EAAA,EAAAF,CAAA,2SACAA,OAAAE,EAAA,EAAAF,CAAA,4aACFA,OAAAE,EAAA,EAAAF,CAAA,MAAAA,OAAAG,OAAA,CAAKG,WAAW,KAAQ,CAClBE,IAAO,4CACPC,IAAO,SAEXT,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,6bACAA,OAAAE,EAAA,EAAAF,CAAA,kMACAA,OAAAE,EAAA,EAAAF,CAAA,6mBACFA,OAAAE,EAAA,EAAAF,CAAA,MAAAA,OAAAG,OAAA,CAAKG,WAAW,KAAQ,CAClBE,IAAO,4CACPC,IAAO,SAEXT,OAAAE,EAAA,EAAAF,CAAA,0PACAA,OAAAE,EAAA,EAAAF,CAAA,4FAA2BA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAC7CC,KAAQ,0GADe,6EAG3BP,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,QADR,QAGAL,OAAAE,EAAA,EAAAF,CAAA,UACEA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,oFADQ,wCAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,2HADQ,8EAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,0CADQ,mFAGpBP,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,MAAKN,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,MAAS,CACvCC,KAAQ,0GADQ,+EAQ1BX,EAAWmB,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,CAChD,CACEZ,GAAI,yDACJe,MAAO,EACPC,MAAO,yDACPC,SAAU,IAId,CACIjB,GAAI,2BACJe,MAAO,EACPC,MAAO,2BACPC,SAAU,IAId,CACIjB,GAAI,+DACJe,MAAO,EACPC,MAAO,+DACPC,SAAU,CACN,CACMjB,GAAI,+DACJe,MAAO,EACPC,MAAO,+DACPC,SAAU,IAIlB,CACQjB,GAAI,oGACJe,MAAO,EACPC,MAAO,oGACPC,SAAU,IAIlB,CACQjB,GAAI,OACJe,MAAO,EACPC,MAAO,OACPC,SAAU,IAIlB,CACQjB,GAAI,OACJe,MAAO,EACPC,MAAO,OACPC,SAAU,MAMxB,CACIjB,GAAI,OACJe,MAAO,EACPC,MAAO,OACPC,SAAU,MAMDC,EAAc","file":"static/js/104.9da6b2d1.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.905,\"time\":54300.00000000001,\"words\":181}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"你可以从本文了解到\"\n    }}>{`你可以从本文了解到`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`本文背景`}</li>\n      <li parentName=\"ol\">{`用WebRTC构建屏幕分享应用 `}</li>\n    </ol>\n    <p>{`本文对应的代码`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/mzvast/how2webrtc\"\n      }}>{`在此`}</a>{`。`}</p>\n    <h2 {...{\n      \"id\": \"本文背景\"\n    }}>{`本文背景`}</h2>\n    <p>{`首先，本文不是WebRTC零基础教程。记录和分享在编写屏幕分享demo时候遇到的问题。`}</p>\n    <p>{`代码的master分支是修改自`}<a parentName=\"p\" {...{\n        \"href\": \"https://dev.to/michaelneu/i-webrtc-you-building-a-video-chat-in-javascript-2j38\"\n      }}>{`building-a-video-chat-in-javascript`}</a>{`，develop分支对协议进行了重构和模块化改进，并增加各种清理能力。`}</p>\n    <h2 {...{\n      \"id\": \"用webrtc构建屏幕分享应用\"\n    }}>{`用WebRTC构建屏幕分享应用`}</h2>\n    <p>{`我们的场景是1个教师(A)，1个学生端(B)。老师可以发起投屏，看到学生屏幕内容。`}</p>\n    <p>{`值得注意的是，webrtc属于点对点双向通信，谁是主叫方本身并不重要。`}</p>\n    <p>{`【基于交互考量】由于学生端在业务场景下有可能存在抢占的情况，即B在跟A1投屏，此时A2要抢占，为了得知B是否被占用，所以A先试探性的问一下B是不是忙，从而避免无意中抢占正在投屏的设备。因此，我们选择三步走：A试探B（或者抢占通知），B主动（或者断开前一个连接），A确认。`}</p>\n    <p>{`完整的offer/answer机制如下：`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A 告知 B 要开始投屏了(`}<inlineCode parentName=\"li\">{`A --> B`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`B 创建一个RTCPeerConnection对象，使用.createOffer()方法产生一个offer（一个SDP会话描述）`}</li>\n      <li parentName=\"ul\">{`B 用他的offer调用setLocalDescription()`}</li>\n      <li parentName=\"ul\">{`B 将offer字符串化，并使用信令机制将其发送给A(`}<inlineCode parentName=\"li\">{`A <-- B`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`A用B的offer调用setRemoteDescription()，以便她的RTCPeerConnection知道B的设置。`}</li>\n      <li parentName=\"ul\">{`A调用createAnswer()，成功的回调是传入一个本地的会话描述：A的answer。`}</li>\n      <li parentName=\"ul\">{`通过调用setLocalDescription()将其answer设置为本地描述。`}</li>\n      <li parentName=\"ul\">{`A然后使用信令机制将她的字符串化的answer发回给B(`}<inlineCode parentName=\"li\">{`A --> B`}</inlineCode>{`)。`}</li>\n      <li parentName=\"ul\">{`B使用setRemoteDescription()将A的应答设置为远程会话描述`}</li>\n    </ul>\n    <p>{`AB还需要交换网路信息，“查找候选人（find candidate）”这个表达是指使用ICE框架查找网络接口和端口的过程。`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A 创建一个RTCPeerConnection对象，绑定handler监听icecandidate事件。`}</li>\n      <li parentName=\"ul\">{`当A从B那里获得候选消息时，她调用addIceCandidate()，将候选项添加列表中。(`}<inlineCode parentName=\"li\">{`A <-- B`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`在handler中，A通过他们的信令通道将字符串化的候选数据发送给B。(`}<inlineCode parentName=\"li\">{`A --> B`}</inlineCode>{`)`}</li>\n      <li parentName=\"ul\">{`B做类似的处理，调用addIceCandidate()，将候选项添加列表中`}</li>\n    </ul>\n    <p>{`JSEP支持ICE Candidate Trickling，它允许主叫方(caller)在最初的offer之后递增地向被叫方提供候选项（candidates），并使被叫方开始在通话中进行操作并建立连接而不用等所有候选项到达。`}</p>\n    <p>{`⚠️下图中，左边认为是B，右边是A。（忽略括号中的AB）`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"https://miro.medium.com/max/1302/1*HmMdrpVBTP2vYMhrVOdNOw.jpeg\",\n        \"alt\": \"Image for post\"\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"对端发现与信令服务器\"\n    }}>{`对端发现与信令服务器`}</h3>\n    <p>{`可以用任何消息服务实现，比如websocket，mqtt等。`}</p>\n    <h3 {...{\n      \"id\": \"在信令之后：使用-ice来对付nat和防火墙\"\n    }}>{`在信令之后：使用 ICE来对付NAT和防火墙`}</h3>\n    <p>{`对于元数据信令，WebRTC应用程序使用中介服务器，但对于实际的媒体和数据流，一旦建立对话的话，RTCPeerConnection就会尝试点对点地直接连接客户端。`}</p>\n    <p>{`在简单的情况中，每个WebRTC端点都有一个唯一的地址，可以与其他端进行交换以便直接通信。\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://michaelyou.github.io/img/without_nat.png\",\n        \"alt\": null\n      }}></img></p>\n    <p>{`实际上大多数设备都是处在一层或者多层NAT之后的，其中有一些包含可以阻挡某些端口和协议的防病毒软件，还有很多设备是在代理和公司防火墙之后的。防火墙和NAT实际上可以由相同的设备实现，比如说家庭WiFi路由器。\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://michaelyou.github.io/img/nat_real_world.png\",\n        \"alt\": null\n      }}></img></p>\n    <p>{`WebRTC应用程序可以使用ICE框架来消除实际网络的复杂性。为了实现这一点，你的应用程序必须将 ICE服务器的URL传递给RTCPeerConnection，就像下面所描述的那样。`}</p>\n    <p>{`ICE试图找到连接对方的最佳途径。它会并行地尝试所有可能性，并选择最有效的选项。 ICE首先尝试使用从设备操作系统和网卡获取的主机地址进行连接；如果不成功的话（对于NAT后面的设备就会失败）， ICE会使用 STUN服务器获取外部地址，如果还是失败的话，则通过 TURN中继服务器路由数据。`}</p>\n    <p>{`换句话说：`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`STUN服务器是用来获取外部地址的。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`TURN服务器是用来在直接连接（点到点）失败的情况下进行中继数据流量的`}</p>\n      </li>\n    </ul>\n    <p>{`每个 TURN服务器都支持 STUN： TURN服务器也是一个增加了内置中继功能的 STUN服务器。 ICE还可以应付NAT设置的复杂性：实际上，NAT“打孔”可能不仅仅需要一个公共IP:端口地址。`}</p>\n    <p>{`STUN 和/或 TURN服务器的URL（可选择地）由iceServers配置对象中的WebRTC应用程序指定，该配置对象是RTCPeerConnection构造函数的第一个参数。对于本项目来说，值看起来是这样的`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">const</span> webrtc <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">RTCPeerConnection</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      iceServers<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          urls<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">\\\"stun:stun.stunprotocol.org\\\"</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          url<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"turn:relay.backups.cz\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          credential<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webrtc\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          username<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webrtc\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">{</span>\\n          url<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"turn:relay.backups.cz?transport=tcp\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          credential<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webrtc\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n          username<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">\\\"webrtc\\\"</span><span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n      <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`一旦RTCPeerConnection具有该信息， ICE的作用就会自动发生：RTCPeerConnection使用 ICE框架 来计算到对端之间的最佳路径，并根据需要使用 STUN和 TURN服务器。`}</p>\n    <h3 {...{\n      \"id\": \"stun\"\n    }}>{`STUN`}</h3>\n    <p>{`NAT给设备提供了一个IP地址以使用专用局域网，但是这个地址不能在外部使用。由于没有公用地址，WebRTC端对端就无法进行通信。而WebRTC使用STUN来解决这个问题。`}</p>\n    <p>{`STUN服务器位于公共网络上，并且有一个简单的任务：检查传入请求的IP地址（来自运行在NAT后面的应用程序），并将该地址作为响应发送回去。换句话说，应用程序使用 STUN服务器从公共角度发现其IP:端口。这个过程使得WebRTC一端为自己获得一个可公开访问的地址，然后通过信令机制将其传递给另一端以建立直接连接。（实际上不同NAT工作方式都有所不同，可能有多个NAT层，但是原理是一样的）。`}</p>\n    <p>{`因为 STUN服务器不需要做太多的工作或者记特别多的东西，所以相对低规格的 STUN服务器就可以处理大量的请求。`}</p>\n    <p>{`根据webrtcstats.com的统计（2013年），大多数WebRTC通话都成功地使用 STUN进行连接，有86%。尽管对于防火墙之后的两端之间的呼叫以及复杂的NAT配置，成功通话量会更少一些。\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://michaelyou.github.io/img/stun.png\",\n        \"alt\": null\n      }}></img></p>\n    <h3 {...{\n      \"id\": \"turn\"\n    }}>{`TURN`}</h3>\n    <p>{`RTCPeerConnection尝试通过UDP建立对等端之间的直接通信。如果失败的话，RTCPeerConnection就会使用TCP进行连接。如果使用TCP还失败的话，可以用 TURN服务器作为后备，在终端之间转发数据。`}</p>\n    <p>{`重申： TURN用于中继对等端之间的音频/视频/数据流，而不是信令数据。`}</p>\n    <p>{`TURN服务器具有公共地址，因此即使对等端位于防火墙或代理之后也可以与其他人联系。 TURN服务器有一个概念上来讲简单的任务—中继数据流—但是与 STUN服务器不同的是，他们会消耗大量的带宽。换句话说， TURN服务器需要更加的强大。\n`}<img parentName=\"p\" {...{\n        \"src\": \"https://michaelyou.github.io/img/turn.png\",\n        \"alt\": null\n      }}></img></p>\n    <p>{`上图显示了 TURN的作用：单纯的 STUN没有成功建立连接，所以每个对等端还需要使用 TURN服务器。`}</p>\n    <p>{`关于如何搭建STUN和TURN服务器参见`}<a parentName=\"p\" {...{\n        \"href\": \"https://michaelyou.github.io/2018/08/01/%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84WebRTC/\"\n      }}>{`真实世界中的WebRTC：STUN, TURN and signaling`}</a></p>\n    <h2 {...{\n      \"id\": \"refs\"\n    }}>{`Refs`}</h2>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://dev.to/michaelneu/i-webrtc-you-building-a-video-chat-in-javascript-2j38\"\n        }}>{`building-a-video-chat-in-javascript`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://medium.com/av-transcode/what-is-webrtc-and-how-to-setup-stun-turn-server-for-webrtc-communication-63314728b9d0\"\n        }}>{`what-is-webrtc-and-how-to-setup-stun-turn-server-for-webrtc-communication`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://zhuanlan.zhihu.com/p/75387873\"\n        }}>{`WebRTC：连接建立过程的网络穿透`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://michaelyou.github.io/2018/08/01/%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84WebRTC/\"\n        }}>{`真实世界中的WebRTC：STUN, TURN and signaling`}</a></li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"你可以从本文了解到\",\n    level: 2,\n    title: \"你可以从本文了解到\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"本文背景\",\n    level: 2,\n    title: \"本文背景\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"用webrtc构建屏幕分享应用\",\n    level: 2,\n    title: \"用WebRTC构建屏幕分享应用\",\n    children: [\n        {\n              id: \"对端发现与信令服务器\",\n              level: 3,\n              title: \"对端发现与信令服务器\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"在信令之后：使用-ice来对付nat和防火墙\",\n              level: 3,\n              title: \"在信令之后：使用 ICE来对付NAT和防火墙\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"stun\",\n              level: 3,\n              title: \"STUN\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"turn\",\n              level: 3,\n              title: \"TURN\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"refs\",\n    level: 2,\n    title: \"Refs\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}