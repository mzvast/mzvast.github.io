{"version":3,"sources":["routes/posts/2022/01/19-1400-for-await-...-of/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"sSAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAMC,KAAO,kBAAkBC,MAAQ,KAS3FC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0DADR,0DAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,wBAASA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAC3BC,KAAQ,sIADH,cAAT,gHAGAP,OAAAE,EAAA,EAAAF,CAAA,kBAAQA,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,gBAAR,SAAqEN,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,aAArE,4EACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,0DADR,0DAGAL,OAAAE,EAAA,EAAAF,CAAA,sDAAcA,OAAAE,EAAA,EAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAChCC,KAAQ,4FADE,eAAd,uCAEkCP,OAAAE,EAAA,EAAAF,CAAA,cAAYM,WAAW,KAAvB,oBAFlC,2FAGAN,OAAAE,EAAA,EAAAF,CAAA,gPACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,cACbC,gBAAiB,KACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,y7KAGhBZ,OAAAE,EAAA,EAAAF,CAAA,8XACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,eACbC,gBAAiB,MACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,iUAGhBZ,OAAAE,EAAA,EAAAF,CAAA,wTACAA,OAAAE,EAAA,EAAAF,CAAA,qJACAA,OAAAE,EAAA,EAAAF,CAAA,qQACAA,OAAAE,EAAA,EAAAF,CAAA,sQACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,cACbC,gBAAiB,KACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,yxGAGhBZ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,EAAAF,CAAA,wMAKJJ,EAAWiB,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,CAChD,CACEV,GAAI,yDACJa,MAAO,EACPC,MAAO,yDACPC,SAAU,IAId,CACIf,GAAI,eACJa,MAAO,EACPC,MAAO,eACPC,SAAU,IAId,CACIf,GAAI,yDACJa,MAAO,EACPC,MAAO,yDACPC,SAAU,IAId,CACIf,GAAI,eACJa,MAAO,EACPC,MAAO,eACPC,SAAU,MAMDC,EAAc","file":"static/js/137.4c1e05a1.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.945,\"time\":56699.99999999999,\"words\":189}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"你可以从本文了解到\"\n    }}>{`你可以从本文了解到`}</h2>\n    <h2 {...{\n      \"id\": \"背景\"\n    }}>{`背景`}</h2>\n    <p>{`在看`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/vercel/vercel/blob/3ff777b8ede7ab9a76c5b9ccfcb0e2799ca21957/packages/cli/src/util/deploy/process-deployment.ts\"\n      }}>{`vercel/cli`}</a>{`代码的时候什么看到了比较少见的用法。`}</p>\n    <p>{`是`}<inlineCode parentName=\"p\">{`for await of`}</inlineCode>{`与`}<inlineCode parentName=\"p\">{`generator`}</inlineCode>{`的结合。稍后会 demo 来说明。`}</p>\n    <h2 {...{\n      \"id\": \"首先谁在用这个写法\"\n    }}>{`首先谁在用这个写法`}</h2>\n    <p>{`在代码搜索平台`}<a parentName=\"p\" {...{\n        \"href\": \"https://sourcegraph.com/search?q=context:global+for+await+%28const+&patternType=literal\"\n      }}>{`sourcegraph`}</a>{`上搜索关键字`}<inlineCode parentName=\"p\">{`for await (const`}</inlineCode>{`，可以看到有 n 多大型项目在用。`}</p>\n    <p>{`我们来看 stars 排名第一的 puppeteer 的代码，可以看出这部分是以流的方式分片读取chunk存入buffer。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"data-language\": \"ts\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getReadableAsBuffer</span><span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token parameter\\\">readable<span class=\\\"token punctuation\\\">:</span> Readable<span class=\\\"token punctuation\\\">,</span>\\n    path<span class=\\\"token operator\\\">?</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">string</span></span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token builtin\\\">Promise</span><span class=\\\"token operator\\\">&lt;</span>Buffer<span class=\\\"token operator\\\">></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>isNode <span class=\\\"token operator\\\">&amp;&amp;</span> path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">throw</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token string\\\">'Cannot write to a path outside of Node.js environment.'</span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">const</span> fs <span class=\\\"token operator\\\">=</span> isNode <span class=\\\"token operator\\\">?</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token function\\\">importFSModule</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">let</span> fileHandle<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'fs'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>promises<span class=\\\"token punctuation\\\">.</span>FileHandle<span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>path <span class=\\\"token operator\\\">&amp;&amp;</span> fs<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        fileHandle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">await</span> fs<span class=\\\"token punctuation\\\">.</span>promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">open</span><span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'w'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">const</span> buffers <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"highlighted-line\\\">    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> chunk <span class=\\\"token keyword\\\">of</span> readable<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span></span>        buffers<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>chunk<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>fileHandle<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">await</span> fs<span class=\\\"token punctuation\\\">.</span>promises<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">writeFile</span><span class=\\\"token punctuation\\\">(</span>fileHandle<span class=\\\"token punctuation\\\">,</span> chunk<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>path<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">await</span> fileHandle<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">close</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> resultBuffer <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">try</span> <span class=\\\"token punctuation\\\">{</span>\\n        resultBuffer <span class=\\\"token operator\\\">=</span> Buffer<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">concat</span><span class=\\\"token punctuation\\\">(</span>buffers<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">finally</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> resultBuffer<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`其他的例子也都差不多，基本模式也就是语法所定义的。of后面接iterable对象（通常是数组、迭代器等等），puppeteer里面用的是数组。vercel用的是iterator。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"data-language\": \"jsx\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">for</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token punctuation\\\">(</span>variable <span class=\\\"token keyword\\\">of</span> iterable<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  statement\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`那么来看看vercel的iterator用法。值得注意的是这是一个cli应用，所有的操作都需要通过屏幕输出给用户进行到哪一步了。`}</p>\n    <p>{`为了清晰期间去掉了业务代码，抽象成以下最简demo。`}</p>\n    <p>{`其main函数是在执行一段代码createSomething的时候中途去执行另一段代码createOtherStuff，再回来继续执行createSomething。`}</p>\n    <p>{`可以看到这个模式有一个特点，yield出来的消息最终都抛到了main函数，有一种事件集线器的效果。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\",\n        \"data-language\": \"ts\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> event <span class=\\\"token keyword\\\">of</span> <span class=\\\"token function\\\">createSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>event<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token comment\\\">// update spinner/indicator</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">createSomething</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'createSomething-1'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'createSomething-2'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token keyword\\\">await</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">const</span> event <span class=\\\"token keyword\\\">of</span> <span class=\\\"token function\\\">createOtherStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">yield</span> event<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'event-done'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">async</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token operator\\\">*</span> <span class=\\\"token function\\\">createOtherStuff</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'createOtherStuff-1'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'createOtherStuff-2'</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">yield</span> <span class=\\\"token string\\\">'createOtherStuff-done'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\"\n        }\n      }}></code></pre>\n    <h2 {...{\n      \"id\": \"小节\"\n    }}>{`小节`}</h2>\n    <p>{`这是一个很有趣但是很强大的写法，希望之后有机会能再项目中用上。`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"你可以从本文了解到\",\n    level: 2,\n    title: \"你可以从本文了解到\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"背景\",\n    level: 2,\n    title: \"背景\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"首先谁在用这个写法\",\n    level: 2,\n    title: \"首先谁在用这个写法\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"小节\",\n    level: 2,\n    title: \"小节\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}