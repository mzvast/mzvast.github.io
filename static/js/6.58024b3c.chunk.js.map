{"version":3,"sources":["components/TagIndexPage.module.css","components/TagPage.module.css","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/TagIndexPage.tsx","components/TagPage.tsx","routes/tags.tsx"],"names":["module","exports","TagIndexPage","TagPage","_toConsumableArray","arr","Array","isArray","i","arr2","length","_arrayWithoutHoles","iter","Symbol","iterator","Object","prototype","toString","call","from","_iterableToArray","TypeError","_nonIterableSpread","_ref","tags","react_default","a","createElement","className","styles","map","tag","key","href","dist_es","name","count","blogRoot","routes","route","url","ArticleSummary","crawlRoutes","_callee4","root","_ref2","paths","regenerator_default","wrap","_context4","prev","next","cache","crawl","context","crawlingRoutes","sent","resolve","method","urls","abrupt","stop","tagRoutes","compose","withContext","req","objectSpread","tagsRoot","mountpath","withCrawlerPatterns","/:tag","_tag","asyncToGenerator","mark","_callee","_context","t0","getAvailableTagsFromRoutes","t1","t2","_x2","_x3","apply","this","arguments","mount","/","title","getView","_getView","_callee2","_context2","fromPairs","toLowerCase","forEach","data","push","components_TagIndexPage","join","_x4","_x5","getTitle","params","_getView2","_callee3","lowerCaseTag","_context3","find","metaTag","components_TagPage","_x6","_x7","Set","concat"],"mappings":"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","file":"static/js/6.58024b3c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagIndexPage\":\"TagIndexPage_TagIndexPage__1KLH1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TagPage\":\"TagPage_TagPage__2Zrai\"};","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import React from 'react'\nimport { Link } from 'react-navi'\nimport styles from './TagIndexPage.module.css'\n\ninterface Tag {\n  count: number\n  href: string\n  name: string\n}\n\ninterface TagIndexPage {\n  tags: Tag[]\n}\n\nfunction TagIndexPage({ tags }: TagIndexPage) {\n  return (\n    <div className={styles.TagIndexPage}>\n      <h1>Tags</h1>\n      <ul>\n        {tags.map(tag => (\n          <li key={tag.href}>\n            <Link href={tag.href}>\n              {tag.name} ({tag.count})\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagIndexPage\n","import React from 'react'\nimport ArticleSummary from './ArticleSummary'\nimport styles from './TagPage.module.css'\nimport { Route } from 'navi'\n\ninterface TagPageProps {\n  blogRoot: string\n  name: string\n  routes: Route[]\n}\n\nfunction TagPage({ blogRoot, name, routes }: TagPageProps) {\n  return (\n    <div className={styles.TagPage}>\n      <h1>{name} posts</h1>\n      <ul>\n        {routes.map(route => (\n          <li key={route.url.href}>\n            <ArticleSummary blogRoot={blogRoot} route={route} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default TagPage\n","import React from 'react'\nimport { compose, crawl, mount, resolve, route, withContext, withCrawlerPatterns, Route } from 'navi'\nimport { join } from 'path'\nimport { fromPairs } from 'lodash'\nimport TagIndexPage from '../components/TagIndexPage'\nimport TagPage from '../components/TagPage'\nimport routes from './index'\n\nasync function crawlRoutes(root): Promise<Route[]> {\n  if (!crawlRoutes.cache[root]) {\n    let { paths } = await crawl({\n      context: {\n        crawlingRoutes: true,\n      },\n      root,\n      routes,\n    })\n    crawlRoutes.cache[root] = await resolve({\n      method: 'HEAD',\n      routes,\n      urls: paths,\n    }) \n  }\n  return crawlRoutes.cache[root]\n}\ncrawlRoutes.cache = {} as { [root: string]: Route[] }\n\ninterface TagsNavContext {\n  blogRoot: string\n  tagsRoot: string\n  crawlingRoutes?: boolean\n}\n\nconst tagRoutes = compose(\n  withContext((req, context): TagsNavContext => ({\n    ...context,\n    tagsRoot: req.mountpath,\n  })),\n  withCrawlerPatterns({\n    '/:tag': async (req, context: TagsNavContext) => {\n      if (!context.crawlingRoutes) {\n        return getAvailableTagsFromRoutes(\n          await crawlRoutes(context.blogRoot)\n        ).map(tag => '/'+tag)\n      }\n      return []\n    }\n  }),\n  mount({\n    '/': route<TagsNavContext>({\n      title: 'Tags',\n\n      getView: async (req, context) => {\n        // Build a list of pages for each tag\n        let routes = await crawlRoutes(context.blogRoot)\n        let tags = getAvailableTagsFromRoutes(routes)\n        let tagRoutes = fromPairs(tags.map(name => [name.toLowerCase(), []]))\n        routes.forEach(route => {\n          let data = route.data\n          if (data && data.tags) {\n            data.tags.forEach(tag => {\n              tag = tag.toLowerCase()\n              if (tagRoutes[tag]) {\n                tagRoutes[tag].push(route)\n              }\n            })\n          }\n        })\n        return (\n          <TagIndexPage\n            tags={tags.map(name => ({\n              name,\n              href: join(req.mountpath, name.toLowerCase()),\n              count: (tagRoutes[name.toLowerCase()] || []).length,\n            }))}\n          />\n        )\n      },\n    }),\n\n    '/:tag': route<TagsNavContext>({\n      getTitle: req => req.params.tag,\n      getView: async (req, context) => {\n        let lowerCaseTag = req.params.tag.toLowerCase()\n        let routes = await crawlRoutes(context.blogRoot)\n\n        // Build a list of pages that include the tag from the site map\n        let tagRoutes = [] as Route[]\n        routes.forEach((route: Route) => {\n          let tags = (route.data && route.data.tags) || []\n          if (tags.find(metaTag => metaTag.toLowerCase() === lowerCaseTag)) {\n            tagRoutes.push(route)\n          }\n        })\n\n        return (\n          <TagPage\n            blogRoot={context.blogRoot}\n            name={req.params.tag}\n            routes={tagRoutes}\n          />\n        )\n      },\n    }),\n  })\n)\n\nfunction getAvailableTagsFromRoutes(routes: Route[]): string[] {\n  return Array.from(\n    new Set(\n      [].concat(...routes.map(route => (route.data && route.data.tags) || [])),\n    ),\n  )\n}\n\nexport default tagRoutes\n"],"sourceRoot":""}