{"version":3,"sources":["routes/posts/2020/12/04-0023-Testing-Principles-of-software-development/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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,GAAI,mFACJO,MAAO,EACPC,MAAO,oFACPC,SAAU,IAId,CACIT,GAAI,yEACJO,MAAO,EACPC,MAAO,yEACPC,SAAU,IAId,CACIT,GAAI,+EACJO,MAAO,EACPC,MAAO,+EACPC,SAAU,IAId,CACIT,GAAI,uDACJO,MAAO,EACPC,MAAO,uDACPC,SAAU,IAId,CACIT,GAAI,uDACJO,MAAO,EACPC,MAAO,uDACPC,SAAU,IAId,CACIT,GAAI,uDACJO,MAAO,EACPC,MAAO,uDACPC,SAAU,IAId,CACIT,GAAI,yDACJO,MAAO,EACPC,MAAO,yDACPC,SAAU,IAId,CACIT,GAAI,+EACJO,MAAO,EACPC,MAAO,+EACPC,SAAU,IAId,CACIT,GAAI,6DACJO,MAAO,EACPC,MAAO,6DACPC,SAAU,IAId,CACIT,GAAI,yEACJO,MAAO,EACPC,MAAO,yEACPC,SAAU,IAId,CACIT,GAAI,2CACJO,MAAO,EACPC,MAAO,2CACPC,SAAU,IAId,CACIT,GAAI,iDACJO,MAAO,EACPC,MAAO,iDACPC,SAAU,IAId,CACIT,GAAI,qCACJO,MAAO,EACPC,MAAO,iDACPC,SAAU,MAMDC,EAAc","file":"static/js/128.b3a2b748.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.975,\"time\":58500,\"words\":195}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"你可以从本文了解到\"\n    }}>{`你可以从本文了解到`}</h2>\n    <p>{`本文是对《软件设计的 201 个原则》的第6章——软件开发的测试原则的学习`}</p>\n    <p>{`测试是包含以下行为的集合：`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`对独立的软件组件执行测试（即：单元测试，Unit Testing），以确保其行为与组件设计规格说明中的定义足够的接近`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`对执行过单元测试的组件集合执行测试（即：集成测试，Integration Testing），以确保这些组件一起工作时的行为足够接近设计中的说明。`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`对集成测试过的所有组件进行测试（即：软件系统级测试，Software Systems-level Testing），以确保它们可以作为一个系统来运行，且行为足够接近软件需求规格说明中的定义。`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`制定软件系统级测试的测试计划。`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`制定软件集成测试的测试计划。`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`制定单元测试的测试计划。`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`建立测试装置（test harness）和测试环境（test environment）。`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"107-依据需求跟踪测试\"\n    }}>{`107 依据需求跟踪测试`}</h2>\n    <p>{`理解哪些测试可以验证哪些需求是很重要的。有如下两个原因:（1）在生成测试时，你会发现，了解是否所有需求都在被测试是很有用的。（2）在执行测试时，你会发现，了解正在验证哪些需求是很有用的。`}</p>\n    <p>{`此外，如果你的需求已经排了优先级（原则 50），可以很容易得出测试的相对优先级；也就是说，一个测试的优先级是其所有对应需求的优先级的最大值。`}</p>\n    <p>{`维护一个大二进制表，其中行对应于所有软件测试，列对应于软件需求规格说明中的每个需求。任何位置的 1 表示此测试有助于验证此需求。`}</p>\n    <p>{`注意，一整行都没有被置 1 表示此测试没有目的，一整列都没有被置 1 表示该需求漏测。能够成功地创建这样一个表，取决于你唯一地引用每个需求的能力（原则 52）。`}</p>\n    <h2 {...{\n      \"id\": \"108-在测试之前早做测试计划\"\n    }}>{`108 在测试之前早做测试计划`}</h2>\n    <h2 {...{\n      \"id\": \"109-不要测试自己开发的软件\"\n    }}>{`109 不要测试自己开发的软件`}</h2>\n    <p>{`软件开发人员永远不应成为自己软件的主要测试者。开发人员比较适合进行初始调试（译者注：自测）和单元测试。 `}{`[相反的观点，可参见Mills, H., et al., \"Cleanroom Software Engineering\"，in IEEE Software, 4, 5 (September 1987), pp. 19–25.]`}</p>\n    <p>{`PS，目前确实有新的倾向，由程序员来测试自己的代码。但本原则提到的因素依然值得考虑。一个能够充分对自己代码进行测试的程序员，需要能够把自己的视角切换到一个测试人员，并且有发现bug的足够欲望。`}</p>\n    <h2 {...{\n      \"id\": \"110-不要为自己的软件做测试计划\"\n    }}>{`110 不要为自己的软件做测试计划`}</h2>\n    <p>{`你不仅不应该测试自己的软件（原则 109），而且也不应该负责为软件生成测试数据、测试方案或测试计划。如果你负责了，那么你可能会在测试生成中犯与软件创建中相同的错误。例如，如果你在设计软件时对合法输入的范围做了一个错误的假设，那么在生成测试计划时，你很可能会做出同样的假设。`}</p>\n    <h2 {...{\n      \"id\": \"111-测试只能揭示缺陷的存在\"\n    }}>{`111 测试只能揭示缺陷的存在`}</h2>\n    <p>{`无论多么彻底和深入，测试只能揭示程序中缺陷的存在，而并不能确保程序没有缺陷。它可以增加你对程序正确性的信心，但它不能证明程序的正确性。为了获得真正的正确性，必须使用完全不同的方法，即正确性证明。`}</p>\n    <h2 {...{\n      \"id\": \"112-虽然大量的错误可证明毫无价值，但是零错误并不能说明软件的价值\"\n    }}>{`112 虽然大量的错误可证明毫无价值，但是零错误并不能说明软件的价值`}</h2>\n    <p>{`这是杰拉尔德·温伯格（Gerald Weinberg）的“无差错谬论”（Absence of Errors Fallacy）。它真正地将测试纳入了视野。它还将所有的软件工程和管理纳入视野。本原则的第一部分显然是正确的，有很多错误的软件是没用的。第二部分则发人深省。它表达的是：无论你多么努力地消除错误，除非你在开发正确的系统，否则你都是在浪费时间。`}</p>\n    <p>{`Akao 的《质量功能部署》（Quality Function Deployment, Cambridge, Mass.: Productivity Press, 1990）详细介绍了一种方法，用于确保你在整个软件生命周期中开发正确的系统。本原则的一个推论是，如果你在开发错误的系统，那么世界上所有的形式化方法、所有的测试和所有的产品保证都将于事无补。`}</p>\n    <h2 {...{\n      \"id\": \"113-成功的测试应发现错误\"\n    }}>{`113 成功的测试应发现错误`}</h2>\n    <h2 {...{\n      \"id\": \"114-半数的错误出现在-15-的模块中\"\n    }}>{`114 半数的错误出现在 15% 的模块中`}</h2>\n    <p>{`保守估算，在大型系统中，大约所有软件错误的半数出现在 15% 的模块中，80% 的软件错误出现在 50% 的模块中。Gary Okimoto 和 Gerald Weinberg 的结论更引人注目，所有错误的 80% 是在仅仅 2% 的模块中发现的（参见 Weinberg 的《质量软件管理》： Quality Software Managetnent, Vol. 1: Systems Thinking, New York: Dorset House, 1992）。因此，在测试软件时，你可以这样认为，在发现错误的地方，很可能会发现更多错误。`}</p>\n    <p>{`要维护日志（译者注：指测试日志），不仅记录在项目的每个时间段内发现了多少错误，还要记录每个模块发现了多少错误。当历史表明一个模块非常容易出错时，你最好从头开始重写它，强调简单性（原则67），而不是聪明。`}</p>\n    <h2 {...{\n      \"id\": \"115-使用黑盒测试和白盒测试\"\n    }}>{`115 使用黑盒测试和白盒测试`}</h2>\n    <h2 {...{\n      \"id\": \"116-测试用例应包含期望的结果\"\n    }}>{`116 测试用例应包含期望的结果`}</h2>\n    <h2 {...{\n      \"id\": \"117-测试不正确的输入\"\n    }}>{`117 测试不正确的输入`}</h2>\n    <h2 {...{\n      \"id\": \"118-压力测试必不可少\"\n    }}>{`118 压力测试必不可少`}</h2>\n    <h2 {...{\n      \"id\": \"119-大爆炸理论不适用\"\n    }}>{`119 大爆炸理论不适用`}</h2>\n    <p>{`你不能通过忽略单元测试和集成测试来节省时间。`}</p>\n    <h2 {...{\n      \"id\": \"120-使用-mccabe-复杂度指标\"\n    }}>{`120 使用 McCabe 复杂度指标`}</h2>\n    <h2 {...{\n      \"id\": \"121-使用有效的测试完成度标准\"\n    }}>{`121 使用有效的测试完成度标准`}</h2>\n    <p>{`有效度量测试进度的两个想法是：`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`每周发现新错误的比率。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`暗中在软件中埋下已知的 bug （ Tom Gilb 管这个叫 bebugging ）后，这些 bug 到目前为止被发现的百分比。`}</p>\n      </li>\n    </ul>\n    <p>{`对于测试进度的一个无效指标是测试用例通过的百分比（当然除非你确定测试用例很好地覆盖了需求）。`}</p>\n    <h2 {...{\n      \"id\": \"122-达成有效的测试覆盖\"\n    }}>{`122 达成有效的测试覆盖`}</h2>\n    <p>{`在测试计划生成或测试执行阶段，有一些指标可以用来确定代码执行测试的全面程度。`}</p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`行覆盖率，用于衡量至少执行一次的语句的百分比。`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`分支覆盖率，用于衡量程序中被执行的分支的百分比。`}</p>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\">{`路径覆盖率，用于衡量所有可能路径（通常是无限的）覆盖程度`}</p>\n      </li>\n    </ol>\n    <h2 {...{\n      \"id\": \"123-不要在单元测试之前集成\"\n    }}>{`123 不要在单元测试之前集成`}</h2>\n    <h2 {...{\n      \"id\": \"124-测量你的软件\"\n    }}>{`124 测量你的软件`}</h2>\n    <p>{`一个发现原因的方法是测量你的软件，也就是，嵌入特殊的指令到软件中，来报告执行轨迹、异常状况、过程调用等等`}</p>\n    <h2 {...{\n      \"id\": \"125-分析错误的原因\"\n    }}>{`125 分析错误的原因`}</h2>\n    <p>{`错误在软件中是很常见的。我们会花费大量的资源来发现和修复它们。`}</p>\n    <p>{`从一开始就防止它们的发生，从而降低它们的影响，是更划算的。`}</p>\n    <p>{`为此的一个方法是，当检测到错误的时候，分析它们的原因。`}</p>\n    <h2 {...{\n      \"id\": \"126-对错不对人\"\n    }}>{`126 对“错”不对人`}</h2>\n    <p>{`当你或他人在你的代码中发现错误时，公开坦诚得讨论它。与其责骂自己，不如将它当作自己和他人的学习经历（更多信息见原则 125）。`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"你可以从本文了解到\",\n    level: 2,\n    title: \"你可以从本文了解到\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"107-依据需求跟踪测试\",\n    level: 2,\n    title: \"107 依据需求跟踪测试\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"108-在测试之前早做测试计划\",\n    level: 2,\n    title: \"108 在测试之前早做测试计划\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"109-不要测试自己开发的软件\",\n    level: 2,\n    title: \"109 不要测试自己开发的软件\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"110-不要为自己的软件做测试计划\",\n    level: 2,\n    title: \"110 不要为自己的软件做测试计划\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"111-测试只能揭示缺陷的存在\",\n    level: 2,\n    title: \"111 测试只能揭示缺陷的存在\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"112-虽然大量的错误可证明毫无价值，但是零错误并不能说明软件的价值\",\n    level: 2,\n    title: \"112 虽然大量的错误可证明毫无价值，但是零错误并不能说明软件的价值\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"113-成功的测试应发现错误\",\n    level: 2,\n    title: \"113 成功的测试应发现错误\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"114-半数的错误出现在-15-的模块中\",\n    level: 2,\n    title: \"114 半数的错误出现在 15% 的模块中\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"115-使用黑盒测试和白盒测试\",\n    level: 2,\n    title: \"115 使用黑盒测试和白盒测试\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"116-测试用例应包含期望的结果\",\n    level: 2,\n    title: \"116 测试用例应包含期望的结果\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"117-测试不正确的输入\",\n    level: 2,\n    title: \"117 测试不正确的输入\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"118-压力测试必不可少\",\n    level: 2,\n    title: \"118 压力测试必不可少\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"119-大爆炸理论不适用\",\n    level: 2,\n    title: \"119 大爆炸理论不适用\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"120-使用-mccabe-复杂度指标\",\n    level: 2,\n    title: \"120 使用 McCabe 复杂度指标\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"121-使用有效的测试完成度标准\",\n    level: 2,\n    title: \"121 使用有效的测试完成度标准\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"122-达成有效的测试覆盖\",\n    level: 2,\n    title: \"122 达成有效的测试覆盖\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"123-不要在单元测试之前集成\",\n    level: 2,\n    title: \"123 不要在单元测试之前集成\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"124-测量你的软件\",\n    level: 2,\n    title: \"124 测量你的软件\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"125-分析错误的原因\",\n    level: 2,\n    title: \"125 分析错误的原因\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"126-对错不对人\",\n    level: 2,\n    title: \"126 对“错”不对人\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}