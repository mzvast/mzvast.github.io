{"version":3,"sources":["routes/posts/2019/02/03-defining-component-apis-in-react/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","href","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/105.af1221ca.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"2 min read\",\"minutes\":1.815,\"time\":108899.99999999999,\"words\":363}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"背景\"\n    }}>{`背景`}</h2>\n    <p>{`经过一段时间的 React 项目开发，写了不少的组件，也踩过不少的坑。本文学习整理了一些觉得比较实用的组件 API 编写的建议。`}</p>\n    <h2 {...{\n      \"id\": \"组件-api-建议\"\n    }}>{`组件 API 建议`}</h2>\n    <h3 {...{\n      \"id\": \"尽可能最小化-api-暴露数量\"\n    }}>{`尽可能最小化 API 暴露数量`}</h3>\n    <p>{`这意味着更少的学习成本，让其他人更容易理解和使用。`}</p>\n    <h3 {...{\n      \"id\": \"易于检索的目录结构\"\n    }}>{`易于检索的目录结构`}</h3>\n    <p>{`不要过早的组织层次复杂的目录结构，在组件数量并不多的时候这么做是吃力不讨好。扁平的目录结构天生拥有字母顺序检索优势，便于其他人检索。`}</p>\n    <h3 {...{\n      \"id\": \"避免写-renderxxx-类似的方法\"\n    }}>{`避免写 renderXXX 类似的方法`}</h3>\n    <p>{`大部分的 render 开头的函数大概率可能应该自身是一个组件。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// Instead of this</span>\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Items</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">renderItems</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> items <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">item</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>li key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">renderItem</span><span class=\\\"token punctuation\\\">(</span>item<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">renderItem</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">item</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span>item<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token function\\\">renderItems</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// Do this</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">ItemList</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> items <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token operator\\\">&lt;</span>ul<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">{</span>items<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">item</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token operator\\\">&lt;</span>li key<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>item<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n        <span class=\\\"token operator\\\">&lt;</span>Item <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>item<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>li<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>ul<span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">Item</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span> name <span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token operator\\\">&lt;</span>div<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>item<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>div<span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Items</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> items <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token operator\\\">&lt;</span>ItemList items<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>items<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"在数据边界拆分组件\"\n    }}>{`在数据边界拆分组件`}</h3>\n    <p>{`一些普通展示类组件的 API，通常应当由其数据模型来定义，而不是分开来传 props。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// Instead of this</span>\\n<span class=\\\"token operator\\\">&lt;</span>Card\\n  image<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>product<span class=\\\"token punctuation\\\">.</span>thumbnail<span class=\\\"token punctuation\\\">}</span>\\n  title<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>product<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span>\\n  text<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>product<span class=\\\"token punctuation\\\">.</span>description<span class=\\\"token punctuation\\\">}</span>\\n  link<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>product<span class=\\\"token punctuation\\\">.</span>permalink<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token comment\\\">// Do this</span>\\n<span class=\\\"token operator\\\">&lt;</span>ProductCard <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>product<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`很可能 ProductCard 并不能复用，那么只留这么一份定义就可以了。你可以遵循“`}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\"\n      }}>{`Rule of three`}</a>{`”，也就是假如同样的逻辑在代码中出现了 3 次，就重构这个东西吧。`}</p>\n    <h3 {...{\n      \"id\": \"避免为了重用组件而写笨重的组件-reusable-！-flexible\"\n    }}>{`避免为了重用组件而写笨重的组件 reusable ！== flexible`}</h3>\n    <p>{`别为了避免写一个新的组件，而给一个组件增加抽象属性和额外逻辑。例如，一个 Button 可能可以接受不同的 color，size，shape，但没必要每次都传一堆 props 组合进去，所谓`}<a parentName=\"p\" {...{\n        \"href\": \"https://speakerdeck.com/jenncreighton/the-how-and-why-of-flexible-react-components-289aa486-464a-4dea-b89a-6f92d0af6606\"\n      }}>{`Apropcalypse`}</a>{`。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// Instead of this</span>\\n<span class=\\\"token operator\\\">&lt;</span>Button\\n  variant<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'secondary'</span>\\n  size<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'large'</span>\\n  outline\\n  label<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'Buy Now'</span>\\n  icon<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'shoppingBag'</span>\\n  onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token comment\\\">// Do this</span>\\n<span class=\\\"token operator\\\">&lt;</span>SecondaryButton\\n  size<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'large'</span>\\n  onClick<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleClick<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Icon name<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'shoppingBag'</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n  Buy Now\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>SecondaryButton<span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"用-composition\"\n    }}>{`用 composition`}</h3>\n    <p>{`要尽量用 composition 的方式而不是 inherit 的方式，保证组件的灵活性。不要重复发明 props.children。如果定义的 props 接受的文字而不是基于数据结构，可能用 composition 是更好的方式。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// Instead of this</span>\\n<span class=\\\"token operator\\\">&lt;</span>Header\\n  title<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'Hello'</span>\\n  subhead<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'This is a header'</span>\\n  text<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'And it has arbitrary props'</span>\\n<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token comment\\\">// Do this</span>\\n<span class=\\\"token operator\\\">&lt;</span>Header<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Heading<span class=\\\"token operator\\\">></span>Hello<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Heading<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Subhead<span class=\\\"token operator\\\">></span>This <span class=\\\"token keyword\\\">is</span> a header<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Subhead<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Text<span class=\\\"token operator\\\">></span>And it uses composition<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Text<span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Header<span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`采用 composition 的方式，就不需要那么多的 documentation 了。你也可以将 composition 版本的组件绑定到某种数据模型，就像这样。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">PageHeader</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\"><span class=\\\"token punctuation\\\">{</span>\\n  title<span class=\\\"token punctuation\\\">,</span>\\n  description\\n<span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span>\\n  <span class=\\\"token operator\\\">&lt;</span>Header<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Heading<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>title<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Heading<span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token operator\\\">&lt;</span>Text<span class=\\\"token operator\\\">></span><span class=\\\"token punctuation\\\">{</span>description<span class=\\\"token punctuation\\\">}</span><span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Text<span class=\\\"token operator\\\">></span>\\n  <span class=\\\"token operator\\\">&lt;</span><span class=\\\"token operator\\\">/</span>Header<span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token comment\\\">// And ideally can be used like this</span>\\n<span class=\\\"token operator\\\">&lt;</span>PageHeader <span class=\\\"token punctuation\\\">{</span><span class=\\\"token operator\\\">...</span>page<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"避免用枚举值做布尔值-props\"\n    }}>{`避免用枚举值做布尔值 props`}</h3>\n    <p>{`布尔值作为 props 有时候会令人困惑，例如`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Button primary <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span>Button secondary <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`那么这样会怎样?`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Button primary secondary <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`这样一来不看文档就真看不懂了。因此可以尝试下面的方式`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token operator\\\">&lt;</span>Button variant<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"primary\\\"</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`虽然多打了几个字，但更具可读性。`}</p>\n    <h3 {...{\n      \"id\": \"保持-props-api-平行\"\n    }}>{`保持 props API 平行`}</h3>\n    <p>{`尽量保持不同组件间取同样名字的 props，这样更容易猜测用法和记住名称。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// Instead of this</span>\\n<span class=\\\"token operator\\\">&lt;</span>DatePicker\\n  date<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>date<span class=\\\"token punctuation\\\">}</span>\\n  onSelect<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleDateChange<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\\n<span class=\\\"token comment\\\">// Do this</span>\\n<span class=\\\"token operator\\\">&lt;</span>DatePicker\\n  value<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>date<span class=\\\"token punctuation\\\">}</span>\\n  onChange<span class=\\\"token operator\\\">=</span><span class=\\\"token punctuation\\\">{</span>handleDateChange<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`Styled System 库鼓励多个组件采用平行的 props API。例如 color 在 rebass 库的所有组件中都有同样的效果。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\",\n        \"data-language\": \"typescript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// example from Rebass</span>\\n<span class=\\\"token operator\\\">&lt;</span>Box color<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'tomato'</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n<span class=\\\"token operator\\\">&lt;</span>Heading color<span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">'tomato'</span> <span class=\\\"token operator\\\">/</span><span class=\\\"token operator\\\">></span>\\n\"\n        }\n      }}></code></pre>\n    <h3 {...{\n      \"id\": \"寻求团队建议\"\n    }}>{`寻求团队建议`}</h3>\n    <p>{`以上的建议并不适用于所有需求，需要针对业务做灵活的变化。最好的建议是跟团队讨论，创建 RFCs 和 PRs，并尝试`}<a parentName=\"p\" {...{\n        \"href\": \"https://ponyfoo.com/articles/readme-driven-development\"\n      }}>{`Readme Driven Development`}</a>{`。写 React 组件很容易，但为团队创建一个好用的组件库值得花时间和努力去把事情做对。`}</p>\n    <h2 {...{\n      \"id\": \"refs\"\n    }}>{`Refs`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://jxnblk.com/blog/defining-component-apis-in-react/\"\n      }}>{`Defining Component APIs in React`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://reactjs.org/docs/thinking-in-react.html\"\n      }}>{`thinking-in-react`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)\"\n      }}>{`Rule of three`}</a></p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://speakerdeck.com/jenncreighton/the-how-and-why-of-flexible-react-components-289aa486-464a-4dea-b89a-6f92d0af6606\"\n      }}>{`Apropcalypse(强烈推荐)`}</a></p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"背景\",\n    level: 2,\n    title: \"背景\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"组件-api-建议\",\n    level: 2,\n    title: \"组件 API 建议\",\n    children: [\n        {\n              id: \"尽可能最小化-api-暴露数量\",\n              level: 3,\n              title: \"尽可能最小化 API 暴露数量\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"易于检索的目录结构\",\n              level: 3,\n              title: \"易于检索的目录结构\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"避免写-renderxxx-类似的方法\",\n              level: 3,\n              title: \"避免写 renderXXX 类似的方法\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"在数据边界拆分组件\",\n              level: 3,\n              title: \"在数据边界拆分组件\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"避免为了重用组件而写笨重的组件-reusable-！-flexible\",\n              level: 3,\n              title: \"避免为了重用组件而写笨重的组件 reusable ！== flexible\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"用-composition\",\n              level: 3,\n              title: \"用 composition\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"避免用枚举值做布尔值-props\",\n              level: 3,\n              title: \"避免用枚举值做布尔值 props\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"保持-props-api-平行\",\n              level: 3,\n              title: \"保持 props API 平行\",\n              children: [\n                      \n                    ]\n            },\n      {\n              id: \"寻求团队建议\",\n              level: 3,\n              title: \"寻求团队建议\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"refs\",\n    level: 2,\n    title: \"Refs\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}