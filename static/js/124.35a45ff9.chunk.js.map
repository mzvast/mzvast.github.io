{"version":3,"sources":["routes/posts/2020/12/03-2335-Coding-Principles-of-software-development/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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,CACIT,GAAI,mEACJO,MAAO,EACPC,MAAO,mEACPC,SAAU,IAId,CACIT,GAAI,6DACJO,MAAO,EACPC,MAAO,6DACPC,SAAU,IAId,CACIT,GAAI,yEACJO,MAAO,EACPC,MAAO,yEACPC,SAAU,IAId,CACIT,GAAI,mEACJO,MAAO,EACPC,MAAO,mEACPC,SAAU,IAId,CACIT,GAAI,uDACJO,MAAO,EACPC,MAAO,uDACPC,SAAU,IAId,CACIT,GAAI,uDACJO,MAAO,EACPC,MAAO,uDACPC,SAAU,IAId,CACIT,GAAI,+BACJO,MAAO,EACPC,MAAO,+BACPC,SAAU,IAId,CACIT,GAAI,+EACJO,MAAO,EACPC,MAAO,+EACPC,SAAU,IAId,CACIT,GAAI,2FACJO,MAAO,EACPC,MAAO,2FACPC,SAAU,IAId,CACIT,GAAI,2CACJO,MAAO,EACPC,MAAO,2CACPC,SAAU,IAId,CACIT,GAAI,iDACJO,MAAO,EACPC,MAAO,iDACPC,SAAU,IAId,CACIT,GAAI,uDACJO,MAAO,EACPC,MAAO,uDACPC,SAAU,IAId,CACIT,GAAI,+EACJO,MAAO,EACPC,MAAO,+EACPC,SAAU,IAId,CACIT,GAAI,iDACJO,MAAO,EACPC,MAAO,iDACPC,SAAU,IAId,CACIT,GAAI,2CACJO,MAAO,EACPC,MAAO,2CACPC,SAAU,MAMDC,EAAc","file":"static/js/124.35a45ff9.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.82,\"time\":49199.99999999999,\"words\":164}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"你可以从本文了解到\"\n    }}>{`你可以从本文了解到`}</h2>\n    <p>{`本文是对《软件设计的 201 个原则》的第5章——软件开发的编码原则的学习`}</p>\n    <p>{`编码是包含以下行为的集合：`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`将设计阶段确定的算法转换为用计算机语言编写的程序。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`将程序（通常是自动化的）转换为可被计算机直接执行的语言。`}</p>\n      </li>\n    </ul>\n    <p>{`编码的主要输出结果就是一组形成文件的程序清单。`}</p>\n    <h2 {...{\n      \"id\": \"087-避免使用特殊技巧\"\n    }}>{`087 避免使用特殊技巧`}</h2>\n    <p>{`底线：避免编写使用特殊技巧的代码，以向世界展示你有多聪明！`}</p>\n    <h2 {...{\n      \"id\": \"088-避免使用全局变量\"\n    }}>{`088 避免使用全局变量`}</h2>\n    <p>{`“全局”意味着，任何人都可能错误的修改它的值。`}</p>\n    <p>{`可以将重要数据封装在对应模块中（原则 65），这样任何人都必须通过指定方式来访问或者修改它。可以显式传递参数给需要特定数据的程序。如果发现参数过多，那么可能你的设计需要改造。`}</p>\n    <h2 {...{\n      \"id\": \"089-编写可自上而下阅读的程序\"\n    }}>{`089 编写可自上而下阅读的程序`}</h2>\n    <p>{`要编写有助于读者理解的程序。`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`顶部要包含详细的对外说明，用以明确定义程序的目的与用途。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`顶部要说明外部可访问的方式、局部变量和算法。`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`使用被称为“结构化”的编程结构，这从本质上更易于遵循。`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"090-避免副作用\"\n    }}>{`090 避免副作用`}</h2>\n    <p>{`程序的副作用，是指程序的某些操作不是其主要目的，并且这些操作对程序外部可见（或其结果能被外部感知）。`}</p>\n    <p>{`副作用是软件中许多细微错误的来源。即，这些错误是潜伏最深的，一旦它们的症状表现出来是最难排查的。`}</p>\n    <h2 {...{\n      \"id\": \"091-使用有意义的命名\"\n    }}>{`091 使用有意义的命名`}</h2>\n    <h2 {...{\n      \"id\": \"092-程序首先是写给人看的\"\n    }}>{`092 程序首先是写给人看的`}</h2>\n    <p>{`现在最有价值的资源是人力：开发软件的人力，维护软件的人力和提高软件能力的人力。`}</p>\n    <p>{`如果你需要执行效率，这没问题，但要提升程序的可读性，以免在提升执行效率的过程中浪费人力。`}</p>\n    <h2 {...{\n      \"id\": \"093-使用最优的数据结构\"\n    }}>{`093 使用最优的数据结构`}</h2>\n    <p>{`如果你选择了正确的数据结构，算法（以及代码）将变得易于编写、阅读以及维护。`}</p>\n    <p>{`当你准备编写程序时，应该将算法和数据结构一起考虑。`}</p>\n    <p>{`在选择最佳组合之前，请尝试两个或三个或更多不同的组合。`}</p>\n    <p>{`应确保将数据结构封装在一个组件内（原则65），这样当发现更好的数据结构时，可以轻松地修改。`}</p>\n    <h2 {...{\n      \"id\": \"094-先确保正确，再提升性能\"\n    }}>{`094 先确保正确，再提升性能`}</h2>\n    <p>{`提升正常运行程序的性能，比“让高性能程序正常运行”容易很多。`}</p>\n    <p>{`当你进行初始编码时，不要担心优化问题。`}</p>\n    <p>{`在这种情况下，在任何时候一个组件要是能够按时（或者提前）完成并且可靠运行，应值得庆祝。`}</p>\n    <h2 {...{\n      \"id\": \"095-在写完代码之前写注释\"\n    }}>{`095 在写完代码之前写注释`}</h2>\n    <p>{`我们写代码注释是为了让软件更易于调试、测试以及维护。`}</p>\n    <p>{`在写代码的同时写注释（或者提前写注释，参见原则 96），这会让你更容易调试软件。`}</p>\n    <p>{`当你调试软件时，无疑会发现一些错误。`}</p>\n    <p>{`如果从算法到代码的转换过程存在错误，那么你只需要修改代码，而不需要修改注释。`}</p>\n    <p>{`如果算法存在错误，那么你对注释和代码都需要修改。`}</p>\n    <p>{`但如果不写代码注释，你怎么能发现算法的错误呢？`}</p>\n    <h2 {...{\n      \"id\": \"096-先写文档后写代码\"\n    }}>{`096 先写文档后写代码`}</h2>\n    <p>{`在为一个组件完成详细设计（即，将它的外部接口和算法写为文档）之后，在代码中编写行间注释。`}</p>\n    <p>{`这些注释大部分与前面完成的接口与算法的文档没什么不同。`}</p>\n    <p>{`之后将每行注释转化为与之对应的代码片段。（注意：如果最后发现每条注释只对应一行代码，你很可能对算法描述的过于细致了。）`}</p>\n    <p>{`你会发现调试过程变得顺畅许多。`}</p>\n    <h2 {...{\n      \"id\": \"097-手动运行每个组件\"\n    }}>{`097 手动运行每个组件`}</h2>\n    <p>{`手工执行一些简单的测试用例，一个软件组件或许会花 30 分钟时间。`}</p>\n    <p>{`如果不这么做？现在节省30分钟，直接去做单元测试、集成测试和系统测试。`}</p>\n    <p>{`一旦系统挂了，将花费3–4人天的成本去定位失败的原因。`}</p>\n    <p>{`总之，30分钟比3–4人天加上6×30分钟的成本要少。`}</p>\n    <h2 {...{\n      \"id\": \"098-代码审查\"\n    }}>{`098 代码审查`}</h2>\n    <p>{`软件的详细设计评审和代码审查，由 Michael Fagan 首次提出，论文标题为“用设计和代码审查减少程序中的错误”（\"Design and Code Inspections to Reduce Errors in Program Development\"，IBM Systems Journal, 15, 3 (July 1976), pp. 182–211）。`}</p>\n    <p>{`由此发现的错误，能占到所有被发现的软件错误的82%。`}</p>\n    <p>{`数据显示，你甚至可以减少 50% 至 90% 的测试时间。`}</p>\n    <h2 {...{\n      \"id\": \"099-你可以使用非结构化的语言\"\n    }}>{`099 你可以使用非结构化的语言`}</h2>\n    <p>{`非结构化的代码打破了 Edsger Dijkstra 的建议，其要求对控制结构限制在 IF-THEN-ELSE, DO-WHILE, DO-UNTIL 和 CASE 几类。`}</p>\n    <p>{`注意，使用一种没有这些控制结构的语言（如，汇编语言），也可以写出结构化的代码。可以在代码中增加结构化控制的注释，并限制 GOTO 只能用来实现这些控制结构。`}</p>\n    <p>{`GOTO 语句会被使用到，但它们将实现更好的控制结构，并且将促进而不是妨碍可读性、可维护性和可证明性。`}</p>\n    <h2 {...{\n      \"id\": \"100-结构化的代码，未必是好的代码\"\n    }}>{`100 结构化的代码，未必是好的代码`}</h2>\n    <p>{`但需要注意的是，并非所有的“结构化”程序都是好的。`}</p>\n    <p>{`对高质量的程序，结构几乎是必要条件，但远不是充分条件。`}</p>\n    <h2 {...{\n      \"id\": \"101-不要嵌套太深\"\n    }}>{`101 不要嵌套太深`}</h2>\n    <p>{`嵌套超过三层会严重降低可理解性。`}</p>\n    <p>{`人类的头脑在变得混乱之前只能记住一定数量的逻辑。`}</p>\n    <h2 {...{\n      \"id\": \"102-使用合适的语言\"\n    }}>{`102 使用合适的语言`}</h2>\n    <h2 {...{\n      \"id\": \"103-编程语言不是借口\"\n    }}>{`103 编程语言不是借口`}</h2>\n    <p>{`事实上，如果你是一个好的程序员，对任何一种编程语言你都应该是个好程序员（原则104）；尽管不太理想的编程语言可能会让你的工作困难一些。`}</p>\n    <h2 {...{\n      \"id\": \"104-编程语言的知识没那么重要\"\n    }}>{`104 编程语言的知识没那么重要`}</h2>\n    <p>{`不管使用哪种语言，优秀的程序员都是优秀的。不管使用哪种语言，糟糕的程序员仍然是糟糕的。不可能有一个人是\"优秀的C程序员\"，同时是\"糟糕的Ada程序员\"。如果他确实在Ada语言上表现的很糟糕，那大概率也不会在C语言上表现很好！除此之外，一个真正优秀的程序员应该可以很容易的学会一种新语言。这是因为一个真正优秀的程序员理解和赞赏高质量编程的概念，而不只是某些编程语言的语法和语义特性。`}</p>\n    <p>{`所以，为一个项目选择语言的首要驱动力应该是什么语言更合适（原则102），而不是程序员都在抱怨“我们只知道C语言”。如果由于项目选择了其他语言而导致一些人退出，这个项目很可能会更好！`}</p>\n    <h2 {...{\n      \"id\": \"105-格式化你的代码\"\n    }}>{`105 格式化你的代码`}</h2>\n    <p>{`使用标准的缩进规则，可大大提高程序的可读性。选择遵循哪种规则无关紧要，但一旦选择了，就要维持一致。`}</p>\n    <h2 {...{\n      \"id\": \"106-不要太早编码\"\n    }}>{`106 不要太早编码`}</h2>\n    <p>{`编写软件和盖房子类似。这两者都需要很多准备工作。没有坚固稳定的混凝土地基，盖房子不会成功。没有坚固稳定的需求和设计作为基础，编码也不会成功。想一想当地基已经浇筑完成之后，对房子做修改有多么困难！`}</p>\n    <p>{`不要因为管理层想看到“进展”，就被迫过早编写代码。在设立基线前，要确认需求和设计是正确且合适的，在对最终产品编码前更要确认。附带说一下，不要从这个原则推断出原型试验的方法有问题（原则5，10，11，12，13）。在需求基线完成很早之前，试验性编码没有错。只是不要认为这是最终的产品。针对本条原则，Manny Lehman 提出了一个相反的观点：不要太晚编码！`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"你可以从本文了解到\",\n    level: 2,\n    title: \"你可以从本文了解到\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"087-避免使用特殊技巧\",\n    level: 2,\n    title: \"087 避免使用特殊技巧\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"088-避免使用全局变量\",\n    level: 2,\n    title: \"088 避免使用全局变量\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"089-编写可自上而下阅读的程序\",\n    level: 2,\n    title: \"089 编写可自上而下阅读的程序\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"090-避免副作用\",\n    level: 2,\n    title: \"090 避免副作用\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"091-使用有意义的命名\",\n    level: 2,\n    title: \"091 使用有意义的命名\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"092-程序首先是写给人看的\",\n    level: 2,\n    title: \"092 程序首先是写给人看的\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"093-使用最优的数据结构\",\n    level: 2,\n    title: \"093 使用最优的数据结构\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"094-先确保正确，再提升性能\",\n    level: 2,\n    title: \"094 先确保正确，再提升性能\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"095-在写完代码之前写注释\",\n    level: 2,\n    title: \"095 在写完代码之前写注释\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"096-先写文档后写代码\",\n    level: 2,\n    title: \"096 先写文档后写代码\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"097-手动运行每个组件\",\n    level: 2,\n    title: \"097 手动运行每个组件\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"098-代码审查\",\n    level: 2,\n    title: \"098 代码审查\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"099-你可以使用非结构化的语言\",\n    level: 2,\n    title: \"099 你可以使用非结构化的语言\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"100-结构化的代码，未必是好的代码\",\n    level: 2,\n    title: \"100 结构化的代码，未必是好的代码\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"101-不要嵌套太深\",\n    level: 2,\n    title: \"101 不要嵌套太深\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"102-使用合适的语言\",\n    level: 2,\n    title: \"102 使用合适的语言\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"103-编程语言不是借口\",\n    level: 2,\n    title: \"103 编程语言不是借口\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"104-编程语言的知识没那么重要\",\n    level: 2,\n    title: \"104 编程语言的知识没那么重要\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"105-格式化你的代码\",\n    level: 2,\n    title: \"105 格式化你的代码\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"106-不要太早编码\",\n    level: 2,\n    title: \"106 不要太早编码\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}