{"version":3,"sources":["routes/posts/2022/06/14-1331-how-to-build-a-level-logger/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"sSAGaA,EAAc,CAACC,KAAO,aAAaC,QAAU,KAAMC,KAAO,MAAMC,MAAQ,KAS/EC,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,IAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,IAAAF,CAAA,KAAQ,CACNK,GAAM,0DADR,0DAGAL,OAAAE,EAAA,IAAAF,CAAA,KAAQ,CACNK,GAAM,gBADR,gBAGAL,OAAAE,EAAA,IAAAF,CAAA,odAEAA,OAAAE,EAAA,IAAAF,CAAA,wVAEAA,OAAAE,EAAA,IAAAF,CAAA,KAAQ,CACNK,GAAM,iEADR,iEAGAL,OAAAE,EAAA,IAAAF,CAAA,gDAAaA,OAAAE,EAAA,IAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CAC/BC,KAAQ,2GADC,4BAAb,yGAGAP,OAAAE,EAAA,IAAAF,CAAA,WAAKA,OAAAE,EAAA,IAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,eACbC,gBAAiB,MACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,kkJAGhBZ,OAAAE,EAAA,IAAAF,CAAA,uJACAA,OAAAE,EAAA,IAAAF,CAAA,4FAA2BA,OAAAE,EAAA,IAAAF,CAAA,cAAYM,WAAW,KAAvB,oJAA3B,UACAN,OAAAE,EAAA,IAAAF,CAAA,iNACAA,OAAAE,EAAA,IAAAF,CAAA,+RACAA,OAAAE,EAAA,IAAAF,CAAA,KAAQ,CACNK,GAAM,oDADR,oDAGAL,OAAAE,EAAA,IAAAF,CAAA,mIAA+BA,OAAAE,EAAA,IAAAF,CAAA,IAAAA,OAAAG,OAAA,CAAGG,WAAW,KAAQ,CACjDC,KAAQ,yCADmB,YAA/B,uGAGAP,OAAAE,EAAA,IAAAF,CAAA,WAAKA,OAAAE,EAAA,IAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BE,UAAa,eACbC,gBAAiB,MACjBC,gCAAiC,GACjCC,wBAA2B,CACzBC,OAAU,+zEAGhBZ,OAAAE,EAAA,IAAAF,CAAA,uFACAA,OAAAE,EAAA,IAAAF,CAAA,4IACAA,OAAAE,EAAA,IAAAF,CAAA,oMACAA,OAAAE,EAAA,IAAAF,CAAA,4MACAA,OAAAE,EAAA,IAAAF,CAAA,2CACAA,OAAAE,EAAA,IAAAF,CAAA,mgCACAA,OAAAE,EAAA,IAAAF,CAAA,kXACAA,OAAAE,EAAA,IAAAF,CAAA,KAAQ,CACNK,GAAM,wDADR,wDAGAL,OAAAE,EAAA,IAAAF,CAAA,unBAKJJ,EAAWiB,gBAAiB,EACrB,IAAMC,EAAkB,WAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,SAAmB,CAChD,CACEV,GAAI,yDACJa,MAAO,EACPC,MAAO,yDACPC,SAAU,CACN,CACMf,GAAI,eACJa,MAAO,EACPC,MAAO,eACPC,SAAU,QAQXC,EAAc","file":"static/js/141.814e629f.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.575,\"time\":34500,\"words\":115}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"你可以从本文了解到\"\n    }}>{`你可以从本文了解到`}</h2>\n    <h3 {...{\n      \"id\": \"背景\"\n    }}>{`背景`}</h3>\n    <p>{`由于最近在熟悉一个新项目，其中自定义了一个level logger，但是其输出的行号却不是真实调用logger的地方，而是在封装的类内部。\n那么，这一定是一个bug，我们应该如何去修复呢？`}</p>\n    <p>{`那么我们自己来实现一个level logger该怎么做呢？\n首先，我们看正常情况如何去封装一个logger，然后如何给这个logger加上level管理的功能。`}</p>\n    <h4 {...{\n      \"id\": \"1、封装一个最简单的logger\"\n    }}>{`1、封装一个最简单的logger`}</h4>\n    <p>{`我们可以看到`}<a parentName=\"p\" {...{\n        \"href\": \"https://stackoverflow.com/questions/13815640/a-proper-wrapper-for-console-log-with-correct-line-number\"\n      }}>{`这篇问答`}</a>{`,提供了一个清晰的demo，其主要代码如下`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"data-language\": \"jsx\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token keyword\\\">var</span> <span class=\\\"token function-variable function\\\">Debugger</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">gState<span class=\\\"token punctuation\\\">,</span> klass</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 存储新log函数的局部变量</span>\\n  <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>debug <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>gState <span class=\\\"token operator\\\">&amp;&amp;</span> klass<span class=\\\"token punctuation\\\">.</span>isDebug<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> m <span class=\\\"token keyword\\\">in</span> console<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token comment\\\">// 遍历console的方法</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> console<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token comment\\\">// bind了this之后，存进debug中</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>debug<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> console<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span>window<span class=\\\"token punctuation\\\">.</span>console<span class=\\\"token punctuation\\\">,</span> klass<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">+</span><span class=\\\"token string\\\">\\\": \\\"</span><span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token keyword\\\">else</span><span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> m <span class=\\\"token keyword\\\">in</span> console<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> console<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">==</span> <span class=\\\"token string\\\">'function'</span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>debug<span class=\\\"token punctuation\\\">[</span>m<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>debug\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nisDebug <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span> <span class=\\\"token comment\\\">//global debug state</span>\\n\\ndebug <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">Debugger</span><span class=\\\"token punctuation\\\">(</span>isDebug<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span>\\n\\ndebug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hello log!'</span><span class=\\\"token punctuation\\\">)</span>\\ndebug<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trace</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Hello trace!'</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`“行号”实际上就是window.console.xxx方法被调用的所在位置。`}</p>\n    <p>{`所以这个Debugger在做的事情就是让`}<inlineCode parentName=\"p\">{`你在调用它的方法的时候，实际上是间接在操作window.console.xxx`}</inlineCode>{`。`}</p>\n    <p>{`为了实现这样的效果，就可以通过bind方法，产生一个新的函数并且存下来。`}</p>\n    <p>{`这样在外部调用Debugger存下来的方法，就相当于在window.console上面直接调用方法。自然就可以打印正确的行号了。`}</p>\n    <h4 {...{\n      \"id\": \"2、增加level管理功能\"\n    }}>{`2、增加level管理功能`}</h4>\n    <p>{`关于level管理功能，我们先找一个比较通用的库`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/pimterry/loglevel\"\n      }}>{`loglevel`}</a>{`，先来看一下它的API签名怎么设计的。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"data-language\": \"jsx\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"log<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">trace</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">debug</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">error</span><span class=\\\"token punctuation\\\">(</span>msg<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setLevel</span><span class=\\\"token punctuation\\\">(</span>level<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">[</span>persist<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setDefaultLevel</span><span class=\\\"token punctuation\\\">(</span>level<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resetLevel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> \\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">enableAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">disableAll</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getLevel</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getLogger</span><span class=\\\"token punctuation\\\">(</span>loggerName<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getLoggers</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`其中最核心的方法就是setLevel，`}</p>\n    <p>{`我们在看代码之前可以想象大致有2种实现思路。`}</p>\n    <p>{`1、所有log都经由一个函数处理，这个函数内部判断当前level是否要打印。`}</p>\n    <p>{`2、根据不同的level，动态绑定函数（如果某个level不要打印，就绑定空函数）`}</p>\n    <p>{`方案分析：`}</p>\n    <p>{`方案1：这会存在一个问题，假如这个函数不是直接返回了bind后的函数，即使这个统一函数内部封装了window.console的调用，但由于真实调用位置始终在logger函数内，所以调用logger函数所在的行号是无法体现的的。（这个logger函数要能保留行号，也必须满足前面的bind原理，即内部不做封装，只做bind。但如果只做bind，是不能实现区分level而选择性调用的。也就是说这个方案实现起来存在难以跨域的障碍。）`}</p>\n    <p>{`方案2：这是loglevel实现的方案。每次setLevel的时候绑定一次。实现原理跟前面最简单logger是一样的。至于打印参数什么的，可以在bind的时候传入。`}</p>\n    <h4 {...{\n      \"id\": \"3、总结。回到bug本身\"\n    }}>{`3、总结。回到bug本身`}</h4>\n    <p>{`那本文定位到的我们的一个logger中行号始终不变，其根本原因是采用了level实现方案1。为了修这个bug，核心就是要实现“调用自定义logger的方法就相当于在调用window.console的方法“。只要遵循这条原则，一切都迎刃而解了。其他都是实现细节问题。`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"你可以从本文了解到\",\n    level: 2,\n    title: \"你可以从本文了解到\",\n    children: [\n        {\n              id: \"背景\",\n              level: 3,\n              title: \"背景\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}