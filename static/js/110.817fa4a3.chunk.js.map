{"version":3,"sources":["routes/posts/2020/08/28-HTTP-headers/document.mdx"],"names":["readingTime","text","minutes","time","words","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_home_runner_work_mzvast_github_io_mzvast_github_io_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","href","className","data-language","data-highlighted-line-numbers","dangerouslySetInnerHTML","__html","isMDXComponent","tableOfContents","arguments","length","undefined","level","title","children","frontMatter"],"mappings":"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","file":"static/js/110.817fa4a3.chunk.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\nexport const readingTime = {\"text\":\"1 min read\",\"minutes\":0.84,\"time\":50400,\"words\":168}\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2 {...{\n      \"id\": \"你可以从本文了解到\"\n    }}>{`你可以从本文了解到`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`为什么要在 headers 中传递认证信息`}</li>\n      <li parentName=\"ol\">{`有哪些方案，各自优缺点如何`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"为什么要在-headers-中传递认证信息\"\n    }}>{`为什么要在 headers 中传递认证信息`}</h2>\n    <p>{`可视为独立的一层身份控制机制，后台可以加在某个域的根 controller 下面，根据用户身份“分发”给为不同身份的人设计的不同的子 controller 处理。`}</p>\n    <p>{`那么 HTTP 报文的 header 中可以加认证信息的地方主要有 cookie 和自定义字段这两种位置了。（不考虑在 query 中带身份信息）`}</p>\n    <p>{`以下只讨论由客户端写入认证信息的场景。`}</p>\n    <h2 {...{\n      \"id\": \"cookie-中写入认证信息\"\n    }}>{`Cookie 中写入认证信息`}</h2>\n    <p>{`众所周知，Cookie 在 Chrome80 后，对三方 Cookie 策略进行了调整。`}</p>\n    <h3 {...{\n      \"id\": \"名词解释\"\n    }}>{`名词解释`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`First-party cookie`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`匹配用户当前访问站点（浏览器地址栏 URI）的域名 cookie`}</li>\n          <li parentName=\"ul\">{`如：用户访问 vredu.baidu.com，页面中`}{`*`}{`.baidu.com 的请求会携带.baidu.com 域下的 cookie，为 first-party cookie`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`Third-party cookie（第三方 cookie）`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`非 first-party cookie`}</li>\n          <li parentName=\"ul\">{`如：百度统计（hm.baidu.com）收到的请求，来自于用户访问第三方站点 kuaishou.com 的页面中嵌入的百度统计的链接，此时.baidu.com 域下的 cookie 就是 third-party cookie`}</li>\n        </ul></li>\n    </ul>\n    <p>{`本地起 devServer 所代理的域名是 A`}<inlineCode parentName=\"p\">{`c.baidu.com`}</inlineCode>{`\n假如开发环境的后台服务器域名是 B`}<inlineCode parentName=\"p\">{`a.b.baidu.com`}</inlineCode></p>\n    <p>{`在这种情况下，由请求 B 得到的 token 写入 A 的 cookie。这导致再次请求 B，在非 https 环境下，这次第三方 cookie 传递将会被浏览器阻断。`}</p>\n    <h2 {...{\n      \"id\": \"在-headers-中携带\"\n    }}>{`在 headers 中携带`}</h2>\n    <p>{`思路很清晰，把 token 放到 headers 单独成一个字段。但在 umi-request/axios 等网络库中，无论是通过 request.interceptors 或者 extendOptions 都无法请求成功，cookie 会弄丢。`}</p>\n    <p>{`经过对 XMLHttpRequest 相关请求发起过程的研究，`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/axios/axios/blob/0d8765562401910c1c509f6739a3bc558721e123/lib/adapters/xhr.js#L125\"\n      }}>{`Axios 源码`}</a>{`和`}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader\"\n      }}>{`MDN`}</a>{`告诉我们，需要服务器指定 Access-Control-Allow-Headers 才可以，否则会在 preflight 阶段被拒绝。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"data-language\": \"javascript\",\n        \"data-highlighted-line-numbers\": \"\",\n        \"dangerouslySetInnerHTML\": {\n          \"__html\": \"<span class=\\\"token comment\\\">// Add headers to the request</span>\\n<span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'setRequestHeader'</span> <span class=\\\"token keyword\\\">in</span> request<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    utils<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>requestHeaders<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">setRequestHeader</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token parameter\\\">val<span class=\\\"token punctuation\\\">,</span> key</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>\\n            <span class=\\\"token keyword\\\">typeof</span> requestData <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token operator\\\">&amp;&amp;</span>\\n            key<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toLowerCase</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'content-type'</span>\\n        <span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Remove Content-Type if data is undefined</span>\\n            <span class=\\\"token keyword\\\">delete</span> requestHeaders<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token comment\\\">// Otherwise add header to the request</span>\\n            request<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setRequestHeader</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">,</span> val<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\"\n        }\n      }}></code></pre>\n    <p>{`后台同学进行了配置之后，请求成功了。`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\nexport const tableOfContents = (components={}) => [\n  {\n    id: \"你可以从本文了解到\",\n    level: 2,\n    title: \"你可以从本文了解到\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"为什么要在-headers-中传递认证信息\",\n    level: 2,\n    title: \"为什么要在 headers 中传递认证信息\",\n    children: [\n        \n      ]\n  },\n{\n    id: \"cookie-中写入认证信息\",\n    level: 2,\n    title: \"Cookie 中写入认证信息\",\n    children: [\n        {\n              id: \"名词解释\",\n              level: 3,\n              title: \"名词解释\",\n              children: [\n                      \n                    ]\n            }\n      ]\n  },\n{\n    id: \"在-headers-中携带\",\n    level: 2,\n    title: \"在 headers 中携带\",\n    children: [\n        \n      ]\n  }\n]\n\nexport const frontMatter = {}\n\n"],"sourceRoot":""}