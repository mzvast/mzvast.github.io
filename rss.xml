<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>OverRainbow</title>
        <link>/</link>
        <description>If Nothing Changes, Nothing Is Going to Change</description>
        <lastBuildDate>Mon, 27 Dec 2021 17:49:36 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <item>
            <title><![CDATA[Congratulations on Your New Blog!]]></title>
            <link>/posts/2000-01-05-welcome</link>
            <guid>/posts/2000-01-05-welcome</guid>
            <content:encoded><![CDATA[<div><div class="document_logo__clVwj"><img src="/static/media/navi-logo.0f2f9d7f.svg" class="document_logo-navi__3KPfj" alt="logo"/><img src="/static/media/react-logo.5d5d9eef.svg" class="document_logo-react__2TChU" alt="logo"/></div><h2 id="how-to">How to…</h2><p><strong>To update this post,</strong> edit <code>src/pages/posts/2019-01-05-welcome/document.mdx</code> and save to reload.</p><p><strong>To update the site’s title,</strong> edit the metadata in <code>src/siteMetadata.js</code>.</p><p><strong>To your bio and photo,</strong> edit the Bio component in <code>src/components/Bio.js</code>.</p><p><strong>To change the site’s colors,</strong> edit the <code>:root</code> block in <code>src/index.module.css</code>.</p><p><strong>To create a new post,</strong> add a new directory to <code>src/pages/posts</code> that is prefixed with the new post’s publication date, then create a <code>post.js</code> file inside it:</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  title<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Learn How To Build This Blog From Scratch</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'react'</span><span class="token punctuation">,</span> <span class="token string">'navi'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  spoiler<span class="token punctuation">:</span> <span class="token string">"An online course with loads of live demos and exercises."</span><span class="token punctuation">,</span>
  <span class="token function-variable function">getContent</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./document.mdx'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><p><strong>To set the maximum number of posts on an index page,</strong>, set the <code>indexPageSize</code> property of the object exported by <code>src/siteMetadata.js</code>.</p><p><strong>To modify the generated HTML,</strong> update the <code>src/renderPageToString.js</code> file.</p><p><strong>To add non-blog pages,</strong> just use <a href="https://frontarm.com/navi/reference/declarations/#createpage"><code>Navi.createPage()</code></a>, <a href="https://frontarm.com/navi/reference/declarations/#createswitch"><code>Navi.createSwitch()</code></a> and <a href="https://frontarm.com/navi/reference/declarations/#createredirect"><code>Navi.createRedirect()</code></a>. For an example, check the about page at <code>src/pages/about/index.js</code>. If you create a page, remember to add it to the root switch at <code>src/pages/index.js</code>.</p><p><strong>To brush up on React’s fundamentals,</strong> check out the <a href="https://frontarm.com/courses/learn-raw-react/">React (without the buzzwords)</a> and <a href="https://frontarm.com/courses/async-javascript/">Asynchronous JavaScript</a> courses.</p><h2 id="the-lowdown">The lowdown</h2><p>This template is designed with a JAMstack architecture. This means that the blog is statically rendered for the fastest possible load time, but once loaded, it turns into a single page app — ensuring navigation is silky smooth.</p><p>It follows a convention-over-configuation philosophy. It should work out of the box with minimal effort for most people’s needs, but can also be configured where required.</p><p>Finally, an effort has been made to prefer explicit code over concise code, and simplicity over complexity. Magic is avoided wherever possible, even if this means more code is required for the desired result.</p><h2 id="the-tools">The tools</h2><ul><li><a href="https://reactjs.org">React</a> renders the UI</li><li><a href="https://mdxjs.com">MDX</a> converts markdown into React components</li><li><a href="https://frontarm.com/navi/">Navi</a> handles routing and creates static HTML files for each route</li><li><a href="https://reactjs.org/docs/create-a-new-react-app.html">create-react-app</a> builds the app’s assets and provides the dev server</li></ul></div>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CentOS6 VPS安装LNMP+WordPress ip建站全过程]]></title>
            <link>/posts/2015-07-04-centos6-vps-wordpress</link>
            <guid>/posts/2015-07-04-centos6-vps-wordpress</guid>
            <content:encoded><![CDATA[<p>搭建环境：搬瓦工512M，5G。</p><p>主要步骤：</p><ol><li>安装LNMP</li><li>创建数据库</li><li>添加虚拟主机</li><li>安装WordPress</li><li>配置和权限</li></ol><p>以下是具体过程</p><h2 id="安装lnmp和ftp">安装LNMP和FTP</h2><p>LNMP（linux+Nginx+MySQL+PHP），一键安装包<a href="http://lnmp.org/install.html" title="LNMP一键安装">http://lnmp.org/install.html</a>按照该教程指导进行安装。</p><p>首先，推荐使用Xshell作为终端连接VPS（考虑到putty每次登陆都要输入密码，非常的麻烦）</p><p>登陆后运行：</p><pre><code>screen -S lnmp #创建一个不会被打断的“后台”
</code></pre><p>screen常用命令有：</p><pre><code>screen -S name  #创建名为name的屏幕
(ctrl+a)+d  #暂时中断会话
screen -ls  #显示会话和ID
screen -r num   #继续ID为num的会话
</code></pre><p>安装LNMP执行：</p><pre><code>wget -c http://soft.vpser.net/lnmp/lnmp1.2-full.tar.gz
tar zxf lnmp1.2-full.tar.gz
cd lnmp1.2-full
./install.sh lnmp
</code></pre><p>期间需要设置：</p><ul><li>MySQL密码（回车默认为root）</li><li>是否启用MySQL InnoDB（n回车）</li><li>MySQL版本号（默认回车）</li><li>PHP版本号（默认回车）</li><li>内存优化其（默认回车不安装）</li><li>提示&quot;Press any key to install…or Press Ctrl+c to cancel&quot;后，按（回车开始安装）。</li></ul><p>等待大约30分钟……安装成功</p><p>然后执行安装FTP：</p><pre><code>./pureftpd.sh 
</code></pre><h2 id="创建数据库">创建数据库</h2><p>浏览器访问<code>[你的ip]/phpmyadmin</code>进入数据库管理后台，新建数据库wordpress</p><h2 id="添加虚拟主机">添加虚拟主机</h2><p>运行：</p><pre><code>lnmp vhost add
</code></pre><ul><li>域名设置：这里暂时用[你的ip]，</li><li>是否还要添加域名：no</li><li>设置网站目录:回车</li><li>是否开启伪静态：y回车</li><li>伪静态类型：wordpress回车</li><li>是否开启log功能：y回车</li><li>回车开始安装</li></ul><p>因为添加vhost导致“路由”的改变，此时已经不能通过<code>[你的ip]/phpmyadmin</code>访问数据库后台了。所以要把phpmyAdmin和pureFTPd、探针等文件复制到<code>/home/wwwroot/[你的ip]</code>下面，为了安全记得把phpmyAdmin改一个名字</p><h2 id="安装wordpress">安装WordPress</h2><p>PS:当前在~路径下操作</p><p>   运行命令：</p><pre><code>wget -c https://cn.wordpress.org/wordpress-4.2.2-zh_CN.tar.gz
tar zxvf wordpress-4.2.2-zh_CN.tar.gz
</code></pre><p>   权限设置：</p><pre><code>chown -R www:www wordpress
</code></pre><p>   复制到nginx目录：</p><pre><code>cp -R wordpress/* /home/wwwroot/[你的ip]
</code></pre><p>（PS：默认情况nginx根目录是：/home/wwwroot/default/，添加vhost以后已经将你的ip绑定到/home/wwwroot/[你的ip]下面）</p><p>访问[你的ip]按照向导安装WordPress即可</p><h2 id="配置和权限">配置和权限</h2><p>不进行这一步的话在插件安装和更新上会遇到问题。</p><blockquote><p>登陆phpMyAdmin如果提示无法读取目录、超时或报502 Bad Gateway错误。需要修改/home/wwwroot/[你的ip]/.user.in将里面的内容删除，重启ftp服务生效。</p></blockquote><p>由于.user.ini文件无法直接修改（设置了特殊属性，查看属性<code>lsattr .user.ini</code>）</p><p>修改前需要执行：</p><pre><code>chattr -i .user.ini
</code></pre><p>修改完成后再执行：</p><pre><code>chattr +i .user.ini
</code></pre><blockquote><p>插件升级提示&quot;要执行请求的操作，WordPress需要访问您网页服务器的权限。请输入您的FTP登陆凭据以继续&quot;并且报错比如无法读取wp-content等等，那么需要执行权限设置操作。</p></blockquote><p>在wp-config.php文件中添加以下内容</p><pre><code>define(&quot;FS_METHOD&quot;,&quot;direct&quot;);
define(&quot;FS_CHMOD_DIR&quot;, 0777);
define(&quot;FS_CHMOD_FILE&quot;, 0777);
</code></pre><h2 id="鸣谢">鸣谢</h2><p><a href="http://jingyan.baidu.com/article/4f34706efc1237e387b56da4.html">http://jingyan.baidu.com/article/4f34706efc1237e387b56da4.html</a></p><p><a href="http://www.mengjx.com/setup-lnmp-environment-and-install-wordpress-in-centos.html">http://www.mengjx.com/setup-lnmp-environment-and-install-wordpress-in-centos.html</a></p><p><a href="http://blog.csdn.net/fox64194167/article/details/33333301">http://blog.csdn.net/fox64194167/article/details/33333301</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[WordPress ip站点迁移到域名站点过程]]></title>
            <link>/posts/2015-07-05-wordpress-ip-site-to-www</link>
            <guid>/posts/2015-07-05-wordpress-ip-site-to-www</guid>
            <content:encoded><![CDATA[<h2 id="tk顶级域名免费注册">tk顶级域名免费注册</h2><p>节省篇幅，此处<a href="http://jingyan.baidu.com/article/148a192179dc824d71c3b11b.html" title="百度经验">参考</a></p><p>注册有延时，邮件没收到要耐心等一会哈。记得做好dns解析到你的ip哦~</p><h2 id="ip站点迁移到域名">ip站点迁移到域名</h2><p>这里用到的还是这三个命令，还记得嘛？</p><pre><code>lnmp vhost {add|list|del}
</code></pre><p>值得注意的是首先登陆WordPress后台，【设置】&gt;【常规】将其中的WordPress地址和站点地址都改成你的www域名。</p><p>然后运行</p><pre><code>lnmp vhost del     #删除ip vhost
lnmp vhost add     #添加站点www域名
</code></pre><p>-记得要添加两个哦，一个是“www.域名.com”，另一个是“域名.com”哈。依然设置成伪静态和wordpress哦</p><p>接下来是目录迁移带权限</p><pre><code>cp -R /home/wwwroot/ip* /home/wwwroot/域名
</code></pre><p>然后进入<code>/home/wwwroot/域名</code>目录，修改那个带“i”标志的.user.ini文件，这个文件是在lnmp vhost add时候系统生成的呢所以每次add都要修改哈。修改的过程复习一下：因为.user.ini文件无法直接修改</p><p>修改前需要执行：</p><pre><code>chattr -i .user.ini
</code></pre><p>修改完成后再执行：</p><pre><code>chattr +i .user.ini
</code></pre><p>登陆看看ftp是否正常了呢，测试一下安装新插件，如果提示写入读取出错思密达就试试删除  目录下wp-config.php中的</p><pre><code>define(&quot;FS_METHOD&quot;,&quot;direct&quot;);
define(&quot;FS_CHMOD_DIR&quot;, 0777);
define(&quot;FS_CHMOD_FILE&quot;, 0777);
</code></pre><p>我在删除之后就正常了哦。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Vagrant初体验]]></title>
            <link>/posts/2015-07-07-vagrant-experience</link>
            <guid>/posts/2015-07-07-vagrant-experience</guid>
            <content:encoded><![CDATA[<p>首先需要下载<a href="https://www.vagrantup.com/">vagrantup</a>和<a href="https://www.virtualbox.org/">virtualbox</a></p><h2 id="vagrant常用命令">Vagrant常用命令</h2><pre><code>vagrant box add {title} {url} #添加一个虚拟机,{url}可以是网址，也可以指向本地的文件,{title}是虚拟机的名称可以自定
vagrant init {title}  #初始化该虚拟机
vagrant up    #启动虚拟机
vagrant halt [name]   #关闭虚拟机
vagrant box list  #列出当前导入的box
vagrant destory   #移除虚拟机
vagrant box remove [name] #移除box
vagrant status [name] #查看虚拟机的状态
vagrant ssh   #ssh连接虚拟机
</code></pre><h2 id="box的来源">BOX的来源</h2><p>可以自己打包box，也可以用其他人打包好的box哦，推荐一个觉得还不错的box站点<a href="vagrantbox.es">vagrantbox.es</a></p><h2 id="关于配置文件">关于配置文件</h2><p>配置文件在当前目录的Vagrantfile文件中</p><h2 id="体验过程">体验过程</h2><p>说道体验我们就来从头到尾走一个过程吧！安装完上面提到的两个软件，在这里面我们以Devopera CentOS 6 LAMP stack这个box为例。Let’s Go!</p><pre><code>mkdir vagrant &amp;&amp; cd vagrant
</code></pre><p>   添加box：</p><pre><code>vagrant box add doco6-lamp-dev http://devopera.com/node/63/download/centos6
</code></pre><p>然后就会自动的用curl下载这个文件了，你也可以先下载好然后给它传入一个本地地址哈。比如这样</p><pre><code>vagrant box add doco6-dj1off-dev \\E:\\doco6-dj1offr006-dev.box     #添加box
vagrant init doco6-lamp-dev #初始化
</code></pre><p>这个时候目录下就会出现一个.vagrant目录和一个Vagrantfile文件</p><pre><code>vagrant up #启动虚拟机
</code></pre><p>如果没有报错，那么就可以通过ssh登录虚拟机了，有点激动哈！</p><pre><code>vagrant ssh #ssh登录虚拟机。成功登录会显示当前虚拟机的配置信息和监听的端口号。
</code></pre><p>然后就可以运行各种命令了，玩的差不多了，咱们关机吧</p><pre><code>vagrant halt
</code></pre><p>如果你不再使用这个虚拟机了，想要销毁使用痕迹，运行。这样下次vagrant up的时候又会重新初始化这台虚拟机咯。</p><pre><code>vagrant destroy 
</code></pre><p>如果你想打包这个虚拟机，那么就要用到打包命令</p><pre><code>vagrant package
</code></pre><p>可附带参数（原文引用）</p><pre><code>--base NAME - Instead of packaging a VirtualBox machine that Vagrant manages, this will package a VirtualBox machine that VirtualBox manages. NAME should be the name or UUID of the machine from the VirtualBox GUI.
--output NAME - The resulting package will be saved as NAME. By default, it will be saved as package.box.
--include x,y,z - Additional files will be packaged with the box. These can be used by a packaged Vagrantfile (documented below) to perform additional tasks.
--vagrantfile FILE - Packages a Vagrantfile with the box, that is loaded as part of the Vagrantfile load order when the resulting box is used.
</code></pre><p>那么今天初步的体验先到这里，更多体验期待就下次分享啦~</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[docker-on-windows-experience]]></title>
            <link>/posts/2015-07-08-docker-on-windows-experience</link>
            <guid>/posts/2015-07-08-docker-on-windows-experience</guid>
            <content:encoded><![CDATA[<h2 id="安装boot2docker">安装Boot2docker</h2><p>从<a href="http://boot2docker.io/">http://boot2docker.io/</a>可以看到这个软件是为了支持windows和mac的一个中间件包含了一个定制的轻量级VirtualBox虚拟机，最初Docker运行在Linux的哦。
建议完整安装，这样会包括全部所需的内容。</p><h2 id="镜像">镜像</h2><h3 id="获取">获取</h3><pre><code>docker pull ubuntu  #下载最新的ubuntu镜像到本地
docker run -t -i ubuntu //bin/bash  #用ubuntu镜像创建一个容器，在其中运行bash应用，这里的“//”是在windows下面使用的转义符，用“/”会报错。
</code></pre><h3 id="查看镜像信息">查看镜像信息</h3><pre><code>docker images#查看镜像信息
docker tag#给镜像添加标签
docker inspect [ID]#获取镜像详细信息
</code></pre><h3 id="搜索镜像">搜索镜像</h3><pre><code>docker search [term]    #搜索镜像，term参数：
--automated=false仅显示自动创建的对象 
--no-trunc=false输出信息不截断显示 
-s,--stars=0指定仅显示评价为指定星级以上的镜像
</code></pre><h3 id="删除镜像">删除镜像</h3><pre><code>docker rmi [image tag or ID]    #删除镜像，强制删除添加-f参数
docker rm [ID]#删除容器
</code></pre><p>不建议强制删除，正确的做法是先删除依赖该镜像的容器，再删除镜像</p><h3 id="创建镜像">创建镜像</h3><pre><code>docker commit [opt] CONTAINER [repo[:tag]]#
-a,--author=&quot;&quot;作者信息，
-m,--message=&quot;&quot;提交消息，
-p,--pause=true提交时暂停容器运行
</code></pre><p>例如，首先启动一个镜像容器并且在其中创建一个文件，</p><pre><code>docker run -t -i ubuntu //bin/bash

root@id$touch test

root@id$exit
</code></pre><p>然后提交</p><pre><code>$docker commit -m &quot;add a test&quot; -a &quot;mzvast&quot; id test
</code></pre><p>然后查看本地镜像列表</p><pre><code>$docker images
</code></pre><p>可以看到多了个test的repo哦！</p><p>此外也可以从本地导入镜像比如</p><pre><code>$cat xxx.tar.gz|docker import -ubuntu:14.04，
</code></pre><p>然后也可以在本地镜像列表中看到</p><h3 id="导出和载入镜像">导出和载入镜像</h3><pre><code>$docker save -o file_name.tar ubuntu:14.04
</code></pre><p>这样就可以把镜像列表中的ubuntu的tag为14.04的版本导出成tar文件啦</p><pre><code>$docker load --input file_name.tar或者docker load &lt;file_name.tar
</code></pre><p>这样就可以导入啦</p><h3 id="上传镜像">上传镜像</h3><pre><code>$docker push NAME[:tag]  
</code></pre><p>这样就可以上传自制镜像到DockerHub网站啦，不过要先注册哦</p><h2 id="容器">容器</h2><h3 id="创建容器">创建容器</h3><pre><code>docker create -it ubuntu:latest
</code></pre><p>然后可以</p><pre><code>docker ps -a        #查看所有容器状态
</code></pre><p>看到创建的容器处于停止状态，可以使用</p><pre><code>docker start    #启动容器
</code></pre><p>理论上</p><pre><code>docker run = docker create + docker start

-t选项分配一个伪终端pseudo-tty并且绑定到容器标准输入上，
-i则让容器的标准输入保持打开状态
ctrl+d或者exit退出容器
</code></pre><p>守护态运行通过-d参数实现</p><pre><code>docker run -d ubuntu //bin/sh -c &quot;while true; do echo hello world; sleep 1;done&quot;
</code></pre><p>容器启动后会返回一个唯一的ID</p><pre><code>docker ps   #查看容器信息
docker ps logs [id] #查看输出信息
</code></pre><h3 id="终止容器">终止容器</h3><pre><code>docker stop [-t|--time[=10]]    #首先向容器发送SIGTERM信号，等待（默认10秒）一段时间后再发送SIGKILL信号终止容器。
docker kill [id]    #强行终止容器
docker ps -aq   #查看处于终止状态的容器
docker start [id]   #启动终止态的容器
docker restart [id] #将正在运行的容器重启
</code></pre><h3 id="进入容器">进入容器</h3><p>在使用-d参数容器会进入守护态，此时用户无法看到容器的信息，如果要进入容器，有多种方法。<pre><code>docker attach [id/name] #缺点是多窗口attach到同一个容器的时候会同步显示，阻塞。
docker exec ……例如docker exec -ti id //bin/bash，这样就可在容器内开多个bash了
nsenter工具(enter into namespaces),不推荐，exec是更好的工具。
</code></pre><p>先体验到这里，后续的内容下次更新咯</p></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[时间遇上空间]]></title>
            <link>/posts/2015-07-29-time-and-space</link>
            <guid>/posts/2015-07-29-time-and-space</guid>
            <content:encoded><![CDATA[<p>如何让推送更有意义？这是一个很大的课题。
要想解决这个问题，首先得明确什么对你才是重要的？这也是一个很大的课题。</p><p>仔细想想开发者似乎都没有搞清楚用户应用场景，更多的站在商家利益的角度。商业化，毁掉的是否一款产品的灵魂？这也是一个很大的课题…</p><p>分析着分析着，我似乎已经分不清手中的这款产品究竟是为何而存在。但有一点是可以肯定的，它成为了开发者和我的利益的桥梁。</p><p>扯的有点远，但又恰到好处戳到了痛点，那就是利益。所以，衡量一款产品好不好，是一个方面，而对用户带来的利益，是另一个方面。好的产品似乎应该既要好用，还要给用户带来最大的利益。然而要好用就需要精心设计和付出更多努力，给用户创造价值就需要让利给用户，这两者怎么看都是需要投入需要成本的。如果没有商业逻辑的支撑，做好产品似乎是空中楼阁。</p><p>这里不得不提到宇宙的核心价值规律：用时间换空间或者空间换时间。即空间时间等价。</p><p>世界上有两样东西是绝对不会没人想要的，第一是节省时间，然后可以有更多时间去做想做的事，第二是拥有或者经历更多空间，这让人从直觉上感受到存在感。总之就是让人用更少的时间获得更多空间。这就叫爽。</p><p>因此，理论上让人爽的产品，应该让人忘记它的存在，而默默替你把事情做好。也就是节省时间的产品的存在价值是永恒的空间。</p><p>然而，有些产品却令人上瘾，却并没有带来时间上的节省，不得不说是罪恶的。不过倘若是一种消磨时间的放松方式却未尝不可。</p><p>因此，这两类产品之间的界限并不是绝对的，甚至是共生共存的，我们可以理解为用节省时间的产品节省的时间是用来花费在消磨时间的产品上的。</p><p>这点很令人审视，倘若时间和空间转换守恒，那么时间的节省或者消磨一定转化成了等值的空间并且一定可以转化成同样的时间。</p><p>不过从每个人到个体成长值来看，节省时间做有意义的事似乎是最合适的目标。也就是把时间更多的转化成空间不管是拥有的还是经历的。因此，因为自己没有时间精力而从别人的经历中获取知识是一种好的价值获取方式。</p><p>说了那么多，绕了好大一圈，并没有得出明确的结论，多的是思考。思考如何让产品更好的节省时间为自己。这是第一步，也是很重要的一步。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[I've never been to me]]></title>
            <link>/posts/2016-03-10-I&apos;ve-never-been-to-me</link>
            <guid>/posts/2016-03-10-I&apos;ve-never-been-to-me</guid>
            <content:encoded><![CDATA[<p>最近埋头倒腾drupal，陷入头疼状态，3月7日，偶然打开电影《杜拉拉追婚记》。</p><p><img src="http://farm6.staticflickr.com/5701/22648674829_ed2cc8ce0f_b.jpg" alt="杜拉拉追婚记"/></p><p>映入眼帘的是萌萌的林依晨和“李大仁”（看完电影才去补番的:P）</p><p>电影的片尾居然粗线了那首我高中时期超爱的一首蓝调歌曲改编的歌曲，脑袋一热，一搜，果然原歌名是《<a href="https://www.youtube.com/watch?v=SZgIk2b68gQ">I’ve never been to me</a>》。</p><p>而这一寻找就是6年，期间用过各种方法去寻找，试过听蓝调榜单一首首听然后放弃了，也试过歌词搜索，然而依稀只记得make love ，因此也是难寻╮(╯▽╰)╭。不过好在终于还是找到了，然后就特别的去补番了《我可能不会爱你》，大概就三天（7日，8日，9日）看完24集，也是蛮拼的—!Maggie和平安挺pretty~</p><p><img src="https://upload.wikimedia.org/wikipedia/zh/7/78/%E6%88%91%E5%8F%AF%E8%83%BD%E4%B8%8D%E6%9C%83%E6%84%9B%E4%BD%A0%E5%AE%A3%E5%82%B3%E7%85%A7.jpg" alt="我可能不会爱你"/></p><p>还记得，当年小学还是初中的时候听到的在office安装光盘里面带的音乐，也是之后找了好久才找到，那个情况不一样，是韩文歌，不知道歌名也不知道歌词囧。结果你造嘛，我后来把那张光盘里面的文件进行了研究，把里面的可能的音乐文件都找了一遍，结果都没有，后来把其中一个文件改了个后缀名，天啦噜，居然是加了壳的mp3，然后播放器里面直接就读了出来这首歌名……竟然叫《因为是女子》，然后去找来了mv看，那时候超感动的，剧情简单说就是女孩和男孩相爱了，有一天女孩不小心把汽油撒到自己的眼睛然后失明了，然后男孩移植了自己的眼睛给女孩，重要的不是剧情，而是那种跟音乐融合的感觉辣。</p><p>生活时常不经意会让你惊喜，只要你始终对它不离不弃。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[angularJS 1.5 component与ui-router的结合]]></title>
            <link>/posts/2016-08-28-angular-component-ui-router</link>
            <guid>/posts/2016-08-28-angular-component-ui-router</guid>
            <content:encoded><![CDATA[<h2 id="准备工作">准备工作</h2><p>为了正常使用component的新特性和顺利结合进angular-ui-router，先检查依赖。（angular-ui-router版本太低会导致传参数入component在$resolve的时候无效，哎，都是泪T_T，本宝宝以为只要angular版本高于1.5就行了，结果折腾了半天发现angular-ui-router也要对应更新）</p><p>主要的依赖需求是：</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token string">"angular"</span><span class="token punctuation">:</span> <span class="token string">"^1.5.8"</span><span class="token punctuation">,</span>    
<span class="token string">"angular-ui-router"</span><span class="token punctuation">:</span> <span class="token string">"^1.0.0"</span>
</code></pre><h2 id="引入component">引入component</h2><p>首先假如定义如下的元件：</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers="">app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'myComponent'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    templateUrl<span class="token punctuation">:</span> <span class="token string">'myComponent.html'</span><span class="token punctuation">,</span>
    controller<span class="token punctuation">:</span> <span class="token string">'MyController'</span><span class="token punctuation">,</span>
    bindings<span class="token punctuation">:</span> <span class="token punctuation">{</span> input1<span class="token punctuation">:</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> input2<span class="token punctuation">:</span> <span class="token string">'&lt;'</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="传统写法">传统写法</h3><p>使用template，通过$resolve传递数据。（本宝宝喜欢这个方法，在component实例化之前用promise的方式取数据，很强大！）</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers="">$stateProvider<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  template<span class="token punctuation">:</span> <span class="token string">'&lt;my-component input1="$resolve.foo" input2="$resolve.bar">&lt;/my-component>'</span><span class="token punctuation">,</span>
  url<span class="token punctuation">:</span> <span class="token string">'/foo/:fooId/:barId'</span><span class="token punctuation">,</span>
  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">foo</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">$stateParams<span class="token punctuation">,</span> FooService</span><span class="token punctuation">)</span> <span class="token operator">=></span> FooService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>$stateParams<span class="token punctuation">.</span>fooId<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">bar</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">$stateParams<span class="token punctuation">,</span> BarService</span><span class="token punctuation">)</span> <span class="token operator">=></span> BarService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>$stateParams<span class="token punctuation">.</span>barId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="component参数指定">component参数指定</h3><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers="">$stateProvider<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  component<span class="token punctuation">:</span> <span class="token string">'myComponent'</span><span class="token punctuation">,</span>
  url<span class="token punctuation">:</span> <span class="token string">'/foo/:fooId/:barId'</span><span class="token punctuation">,</span>
  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// input1 and input2 are same names as myComponent `bindings`</span>
    <span class="token function-variable function">input1</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">$stateParams<span class="token punctuation">,</span> FooService</span><span class="token punctuation">)</span> <span class="token operator">=></span> FooService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>$stateParams<span class="token punctuation">.</span>fooId<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">input2</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">$stateParams<span class="token punctuation">,</span> BarService</span><span class="token punctuation">)</span> <span class="token operator">=></span> BarService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>$stateParams<span class="token punctuation">.</span>barId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="namebindings对象的形式">name:bindings对象的形式</h3><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers="">$stateProvider<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  component<span class="token punctuation">:</span> <span class="token string">'myComponent'</span><span class="token punctuation">,</span>
  bindings<span class="token punctuation">:</span> <span class="token punctuation">{</span> input1<span class="token punctuation">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span> input2<span class="token punctuation">:</span> <span class="token string">"bar"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  url<span class="token punctuation">:</span> <span class="token string">'/foo/:fooId/:barId'</span><span class="token punctuation">,</span>
  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">foo</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">$stateParams<span class="token punctuation">,</span> FooService</span><span class="token punctuation">)</span> <span class="token operator">=></span> FooService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>$stateParams<span class="token punctuation">.</span>fooId<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function-variable function">bar</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">$stateParams<span class="token punctuation">,</span> BarService</span><span class="token punctuation">)</span> <span class="token operator">=></span> BarService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>$stateParams<span class="token punctuation">.</span>barId<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><hr/><h2 id="参考文献">参考文献</h2><p><a href="https://github.com/angular-ui/ui-router/issues/2627">https://github.com/angular-ui/ui-router/issues/2627</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[raspberrypi realvnc]]></title>
            <link>/posts/2016-11-16-raspberrypi-realvnc</link>
            <guid>/posts/2016-11-16-raspberrypi-realvnc</guid>
            <content:encoded><![CDATA[<h2 id="准备工作">准备工作</h2><p>主要的参考就是这篇<a href="https://www.raspberrypi.org/documentation/remote-access/vnc/">官方教程</a>。</p><p>以下指的成功的定义是：</p><ul><li>开机自动启动vnc服务</li></ul><p>官方指导100%成功的场景是这样的：</p><ul><li>开机默认启动到桌面模式</li><li>树莓派配置的interface中开启vnc开关</li></ul><p>以下情况下100%失败：</p><ul><li>开机默认启动到文本模式</li></ul><p>研究了一会，跳了几次坑之后，终于明白为什么官方教程主推service mode而晦涩的掩盖了virtual mode。</p><h2 id="探索">探索</h2><ul><li><p>在首次安装完realvnc后出现这一行字，也就是说有两种模式，分别对应两个service</p><pre><code>Installed systemd unit for VNC Server in Service Mode daemon
Start or stop the service with:
  systemctl (start|stop) vncserver-x11-serviced.service
Mark or unmark the service to be started at boot time with:
  systemctl (enable|disable) vncserver-x11-serviced.service
Installed systemd unit for VNC Server in Virtual Mode daemon
Start or stop the service with:
  systemctl (start|stop) vncserver-virtuald.service
Mark or unmark the service to be started at boot time with:
  systemctl (enable|disable) vncserver-virtuald.service
</code></pre></li></ul><h3 id="service模式详解">service模式详解</h3><ul><li>服务名：vncserver-x11-serviced.service</li><li>连接地址：直接就是ip</li><li>树莓派的interface中的VNC控制的即该服务的开关</li><li>是可以直接使用的（自带授权），用于以service模式启动vncserver，即通过转发到x11桌面服务来连接。</li><li>依赖关系：必须启用lightdm服务（启动到桌面模式会自动带起该服务，但启动到CLI模式则不会带起该服务），否则能连接，但是黑屏。</li><li>该模式特殊作用：具有在root权限下运行vncserver的能力，realvnc的托盘区图标也会有所不同来指示这种区别：在该模式下托盘区的图标是黑底，非root模式下托盘区的图标是白底。</li></ul><h3 id="virtual模式详解">virtual模式详解</h3><ul><li>服务名：vncserver-virtuald.service：</li><li>连接地址：ip：&lt;虚拟桌面号&gt;</li><li>是不能直接使用的（需要企业授权），</li><li>用于以virtual 模式启动vncserver，即通过创建virtual desktop来连接，</li><li>具有按需创建的优点。</li></ul><h4 id="vncserver的本质">vncserver的本质</h4><ul><li>可以看到vncserver是软链接到vncserver-virtual的，也就是运行vncserver创建的是virtual desktop</li></ul><h2 id="在headless模式下的完美方案">在headless模式下的完美方案</h2><p>说了那么多，探索这些背后关联的目的就是为了在没有授权的情况下，尽可能的实现virtual模式的自动启动。</p><ul><li>主要包括以下两点：<ul><li>上面两个服务都不需要启用。（通过树莓派配置界面中interface的vnc可以直接关闭service模式）</li><li>编写systemd服务来保持virtual desktop的开机启动</li></ul></li></ul><h3 id="新建vncserver自启服务">新建vncserver自启服务</h3><p>有人已经写好了服务<a href="https://raspberrypi.stackexchange.com/questions/39372/etc-init-d-tightvncserver-script-fails-at-boot">模板</a>，可以直接拿来用。</p><ul><li><p>新建文件 /etc/systemd/system/vncserver@.service 内容如下:</p><pre><code>[Unit]
Description=Remote desktop service (VNC)
After=syslog.target network.target

[Service]
Type=forking
User=pi
PAMName=login
PIDFile=/home/pi/.vnc/%H:%i.pid
ExecStartPre=-/usr/bin/vncserver -kill :%i &gt; /dev/null 2&gt;&amp;1
ExecStart=/usr/bin/vncserver -depth 24 -geometry 1280x800 :%i
ExecStop=/usr/bin/vncserver -kill :%i

[Install]
WantedBy=multi-user.target
</code></pre></li></ul><ul><li><p>添加可执行权限：</p><pre>sudo chmod +x  /etc/systemd/system/vncserver@.service</pre></li><li><p>测试：</p><pre>sudo systemctl start vncserver@1.service</pre></li><li><p>自启服务：</p><pre>sudo systemctl daemon-reload &amp;&amp; sudo systemctl enable vncserver@1.service</pre></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Hugo借助Travis CI实现GitHub Pages自动部署实践]]></title>
            <link>/posts/2016-11-17-hello-hugo-and-more</link>
            <guid>/posts/2016-11-17-hello-hugo-and-more</guid>
            <content:encoded><![CDATA[<h2 id="内容概述">内容概述</h2><ul><li>hugo的安装</li><li>子模块同步</li><li>语法高亮</li><li>Travis CI配置</li></ul><h2 id="环境介绍">环境介绍</h2><ul><li>win10x64 一周年纪念版及更新版本</li><li><a href="https://chocolatey.org">chocolatey</a>包管理器</li><li><a href="https://git-scm.com/downloads">GitBash</a></li><li>Python 2.7+或3.5+</li></ul><h2 id="hugo的安装">Hugo的安装</h2><p><a href="https://gohugo.io/">hugo</a>的安装很简单，管理员权限下输入该命令：</p><pre><code>choco install -y hugo
</code></pre><p>基本的hugo命令可以参考官网的<a href="https://gohugo.io/overview/quickstart/">快速上手</a>，详解hugo的话又可以单独开篇文章了，本文的重点是自动化部署，赶紧进入重点。</p><h2 id="子模块同步">子模块同步</h2><p>为什么这里要提到子模块呢？主要原因是hugo自己不带主题，主题是单独放入在themes路径下的。
通常比较合适的做法不是去直接clone别人的主题，而是先fork，然后clone自己的这个目录。
下一条添加子模块的命令：</p><pre><code>git submodule add &lt; github url&gt; themes/casper
</code></pre><h2 id="语法高亮">语法高亮</h2><p>hugo对服务端语法高亮支持的不错，借助于python插件<a href="http://pygments.org/">Pygments</a>。
只要一条命令：</p><pre><code>pip install Pygments
</code></pre><p>然后在hugo的主配置文件<code>config.toml</code>里面加入相关配置即可，贴上我的供参考：</p><pre><code># color-codes for highlighting derived from this style
pygmentsStyle = &quot;xcode&quot;
# true: use pygments-css or false: color-codes directly
pygmentsUseClasses = false
# add syntax highlighting with GitHub flavoured code fences 
PygmentsCodeFences = true
</code></pre><h2 id="travis-ci的配置">Travis CI的配置</h2><p>看到网上许多的配置搞的来比较复杂，有的还抄来抄去抄错了。</p><p>我做了个直观易懂的配置，基本都是常见命令。云端构建一次平均20多秒。
直接上配置文件<code>travis.yml</code>：</p><ul><li>注意要先生成GH_TOKEN<a href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/">(官方教程链接)</a>。也就是在下图所示页面生成一个token：<img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-11-14T234335+0800"/></li><li>然后把这个token添加到<a href="https://travis-ci.org/">Travis</a>的环境变量里去。如下图所示
<img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-11-14T235039+0800"/><img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-11-14T234823+0800"/>。</li><li>最后简单介绍构建脚本的编写<a href="https://docs.travis-ci.com/user/customizing-the-build/#The-Build-Lifecycle">(构建的生命周期)</a>。由于直接用go get &lt; github url &gt;的方式下载到的不是稳定版，为了和本地环境一致，需要用下载编译后可执行文件的方式，并可以指定版本号。因此，并不需要CI安装了go语言。</li></ul><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">language: go

go:
  - <span class="token number">1.7</span>.3

branches:
  only:
    - <span class="token builtin class-name">source</span>

env:
 global:
   - GH_REF: github.com/mzvast/mzvast.github.io.git

sudo: required

git:
  submodules: <span class="token boolean">false</span>

<span class="token comment"># Use sed to replace the SSH URL with the public URL, then initialize submodules</span>
before_install:
  - <span class="token function">sed</span> -i <span class="token string">'s/git@github.com:/https:\/\/github.com\//'</span> .gitmodules
  - <span class="token function">git</span> submodule update --init --recursive

install:
  - <span class="token builtin class-name">export</span> <span class="token assign-left variable">HUGO_VERSION</span><span class="token operator">=</span><span class="token number">0.30</span>.2
  - <span class="token function">sudo</span> pip <span class="token function">install</span> Pygments
  - <span class="token function">wget</span> https://github.com/spf13/hugo/releases/download/v<span class="token variable">$HUGO_VERSION</span>/hugo_<span class="token variable">${HUGO_VERSION}</span>_Linux-64bit.tar.gz
  - <span class="token function">tar</span> xzf hugo_<span class="token variable">${HUGO_VERSION}</span>_Linux-64bit.tar.gz
  - <span class="token function">chmod</span> a+x hugo

script:
  - ./hugo

after_script:
  - <span class="token builtin class-name">cd</span> ./public
  - <span class="token function">git</span> init
  - <span class="token function">git</span> config user.name <span class="token string">"mzvast"</span>
  - <span class="token function">git</span> config user.email <span class="token string">"mzvast@gmail.com"</span>
  - <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
  - <span class="token function">git</span> commit -m <span class="token string">"Update docs"</span>
  - <span class="token function">git</span> push --force --quiet <span class="token string">"https://<span class="token variable">${GH_TOKEN}</span>@<span class="token variable">${GH_REF}</span>"</span> master:master
</code></pre><h2 id="修订说明">修订说明</h2><hr/><table><thead><tr><th align="left">时间</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">2017–11–15</td><td align="left">增加插图，更新部分说明性内容。</td></tr><tr><td align="left">2016–11–19</td><td align="left">修改Travis配置文件中hugo的下载方式，确保版本为0.17，同时加快构建速度到20秒。</td></tr><tr><td align="left">2017–09–14</td><td align="left">更新Travis配置文件中hugo版本。</td></tr></tbody></table>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[树莓派遇上kcptun]]></title>
            <link>/posts/2016-11-19-hello-kcp</link>
            <guid>/posts/2016-11-19-hello-kcp</guid>
            <content:encoded><![CDATA[<h2 id="本文涉及内容">本文涉及内容</h2><ul><li>kcptun服务端的搭建</li><li>kcptun客户端在树莓派上的搭建</li><li>kcptun客户端systemd自启脚本的使用</li></ul><h2 id="环境">环境</h2><ul><li>搬瓦工512M/centos6</li><li>树莓派3/rasbian-PIXEL</li></ul><h2 id="服务端">服务端</h2><p>推荐这款<a href="http://www.jianshu.com/p/78420fad1481">一键安装脚本</a></p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token variable">$wget</span> --no-check-certificate https://raw.githubusercontent.com/kuoruan/kcptun_installer/master/kcptun.sh
<span class="token variable">$chmod</span> +x ./kcptun.sh
$./kcptun.sh
</code></pre><p>需要配置的内容主要是：</p><ul><li>设置 Kcptun 的服务端端口</li><li>设置加速的 IP</li><li>设置需要加速的端口</li><li>设置 Kcptun 密码</li></ul><p>安装之后，Kcptun服务交由 Supervisor 管理</p><p>Kcptun 相关命令：</p><ul><li>服务启停：<code>supervisorctl {start|stop|restart|status} kcptun</code></li><li>如需更新：<code>./kcptun.sh update</code></li><li>如需重新配置：<code>./kcptun.sh reconfig</code></li><li>卸载：<code>./kcptun.sh uninstall</code></li></ul><p>注意！要把屏幕输出的json内容复制一下，后面会用到。</p><h2 id="windows客户端">windows客户端</h2><p>首先说说windows的gui程序，先下载一个<a href="https://github.com/dfdragon/kcptun_gclient/releases">配置kcptun的工具</a>，然后下载<a href="https://github.com/xtaci/kcptun/releases">kcptun主程序</a>，打开工具，将屏幕输出的内容以json导入配置，设置下本地端口，启动即可。</p><ul><li>特别注意！ipv6地址在写时候要加<code>[...]</code>方括号</li></ul><h2 id="树莓派客户端">树莓派客户端</h2><p>从上面的主程序中找到arm_64bit的版本下载，解压到一个目录，假定为kcp。然后新建三个脚本，<code>start.sh</code>，<code>stop.sh</code>，<code>restart.sh</code>。
内容如下：</p><ul><li><p>start.sh    </p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token shebang important">#!/bin/bash</span>
./client_linux_arm7 -l :<span class="token operator">&lt;</span> <span class="token builtin class-name">local</span> port <span class="token operator">></span> -r <span class="token operator">&lt;</span> <span class="token function">ip</span> <span class="token operator">></span>:<span class="token operator">&lt;</span> port <span class="token operator">></span> -key <span class="token string">"bromide-tavern-sewer"</span> -crypt aes -datashard <span class="token number">10</span> -parityshard <span class="token number">3</span> -conn <span class="token number">1</span> -mtu <span class="token number">1350</span> -sndwnd <span class="token number">1024</span> -rcvwnd <span class="token number">1024</span> -dscp <span class="token number">0</span> -autoexpire <span class="token number">60</span> -keepalive <span class="token number">10</span> -sockbuf <span class="token number">4194304</span> -mode fast <span class="token operator">></span> kcptun.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Kcptun started."</span>
</code></pre></li><li><p>stop.sh</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token shebang important">#!/bin/bash</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Stopping Kcptun..."</span>
<span class="token assign-left variable">PID</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> client_linux_arm7 <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token variable">`</span></span>
<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">""</span> <span class="token operator">!=</span>  <span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">"killing <span class="token variable">$PID</span>"</span>
  <span class="token function">kill</span> -9 <span class="token variable">$PID</span>
<span class="token keyword">fi</span>
<span class="token builtin class-name">echo</span> <span class="token string">"Kcptun stoped."</span>
</code></pre></li><li><p>restart.sh</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token shebang important">#!/bin/bash</span>
<span class="token builtin class-name">cd</span> /root/kcptun/
<span class="token function">sh</span> client-stop.sh
<span class="token builtin class-name">echo</span> <span class="token string">"Restarting Kcptun..."</span>
<span class="token function">sh</span> client-start.sh
</code></pre></li></ul><h2 id="systemd自启服务脚本">systemd自启服务脚本</h2><p>手动启动服务总不是个好办法，毕竟重启就得手动运行一遍，实在无聊。  </p><ul><li><p>新建一个文件/etc/systemd/system/kcptun.service内容如下</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers=""><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>Kcptun Client Service
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target
<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>simple
<span class="token assign-left variable">User</span><span class="token operator">=</span>nobody
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span><span class="token operator">&lt;</span> 上面的start.sh的主体部分<span class="token punctuation">(</span>去掉shebang行<span class="token punctuation">)</span>粘贴过来即可 <span class="token operator">></span>
<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>default.target
</code></pre></li><li><p>增加可执行权限<br/>
<code>sudo chmod +x  /etc/systemd/system/kcptun.service</code></p></li><li><p>测试运行<br/>
<code>sudo systemctl start kcptun.service</code></p></li><li><p>启用服务<br/>
<code>sudo systemctl daemon-reload &amp;&amp; sudo systemctl enable kcptun.service</code></p></li></ul><h2 id="修订说明">修订说明</h2><hr/><table><thead><tr><th align="left">时间</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">2016–11–23</td><td align="left">增加systemd自启脚本</td></tr></tbody></table>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Python版本管理之pyenv]]></title>
            <link>/posts/2016-11-23-python-pyenv</link>
            <guid>/posts/2016-11-23-python-pyenv</guid>
            <content:encoded><![CDATA[<h2 id="环境">环境</h2><ul><li>类unix系统</li><li>不支持windows</li></ul><h2 id="安装">安装</h2><ul><li><p>前置需求</p><ul><li><p>Ubuntu/Debian:  </p><pre><code>```bash
sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev 
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils
```
</code></pre></li><li><p>Fedora/CentOS/RHEL:  </p><pre><code>```bash
yum install zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel
```
</code></pre></li><li><p>Mac OS X:</p><pre><code>```bash
brew install readline xz
```
</code></pre></li></ul></li><li><p>运行一键安装脚本(安装完自带virtualenv插件)</p></li></ul><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">$ <span class="token function">curl</span> -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer <span class="token operator">|</span> <span class="token function">bash</span>
</code></pre><ul><li>然后根据提示可能需要把这段加入到~/.bash_profile,重载一下shell</li></ul><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"~/.pyenv/bin:<span class="token environment constant">$PATH</span>"</span>
<span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv init -<span class="token variable">)</span></span>"</span>
<span class="token builtin class-name">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>pyenv virtualenv-init -<span class="token variable">)</span></span>"</span>
</code></pre><h2 id="以创建flask项目为例测试">以创建flask项目为例测试</h2><ul><li><p>在任意位置新建flask目录:<br/>
<code>mkdir -p pythonProject/flask&amp;&amp;cd pythonProject/flask</code></p></li><li><p>安装3.5.2版本python:<br/>
<code>pyenv install 3.5.2</code>
- 注意：在proxychains4代理的情况下若在ipv6网络中安装后面的python可能会报错<br/>
<code>You must get working getaddrinfo() function. or you can specify &quot;--disable-ipv6&quot;. getaddrinfo()</code>
- 解决方法<br/>
在命令前加上代理地址，例如<br/>
<code>http_proxy=127.0.0.1:1080 pyenv install 3.5.2</code></p></li><li><p>在3.5.2版本下创建名为flask的虚拟环境(这个flask的命名和上面那个目录名没有任何关系):<br/>
<code>pyenv virtualenv 3.5.2 flask</code></p></li><li><p>新建pyenv用于识别环境的文件(pyenv通过该文件识别这个目录的虚拟环境)：<br/>
<code>echo &quot;flask&quot;&gt; .python-version</code><br/>
此时可以看到命令提示符前出现了<code>(flask)</code>的标识，说明现在的环境与系统环境隔离了</p></li><li><p>安装Flask包<br/>
<code>pip install Flask</code></p></li><li><p>新建flask demo主程序
<code>cat &gt;app.py</code>
粘贴这段</p><pre><code>```python
from flask import Flask
app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello():
    return &quot;Hello World!&quot;

if __name__ == &quot;__main__&quot;:
    app.run()
```
</code></pre><p>回车,ctrl+D</p></li><li><p>运行<code>python app.py</code>可以看到程序正常运行了</p></li><li><p>卸载某virtualenv<br/>
<code>pyenv uninstall flask</code></p></li></ul><h2 id="shell环境下使用virtualenv">shell环境下使用virtualenv</h2><ul><li><p>上面介绍的是用.python-version文件的方式让shell自动识别当前目录所在环境。假如想手动切换当前shell所用的virtualenv该怎么操作呢？  </p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token comment">#pyenv shell &lt; virtualenv NAME 或者system ></span>
pyenv shell flask <span class="token comment">#切换到名为flask的virtualenv</span>
pyenv shell system <span class="token comment">#切换到系统默认的环境</span>
</code></pre></li></ul><h2 id="后记">后记</h2><p>这样一来在linux系统上的python版本管理问题是解决了，而且使用起来跟nvm特别接近，但在windows环境并不能用这个程序，有待进一步探索。</p><h2 id="参考">参考</h2><ul><li><a href="https://github.com/yyuu/pyenv">pyenv</a>  </li><li><a href="https://github.com/yyuu/pyenv-installer">pyenv-installer安装器</a>  </li><li><a href="https://github.com/yyuu/pyenv-virtualenv">pyenv-virtualenv插件</a>  </li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[cmder设置当前活动页utf8编码，完美解决进度条乱码]]></title>
            <link>/posts/2016-11-29-chcp-utf8</link>
            <guid>/posts/2016-11-29-chcp-utf8</guid>
            <content:encoded><![CDATA[<h2 id="修复方法分析比较">修复方法分析比较</h2><h3 id="网上流传的方法">网上流传的方法</h3><ul><li>最简单的修复方法就是设置当前活动页为utf8编码，然而windows10下面很buggy，设置chcp后重新打开终端还是GBK编码。也不是完全无效，具体测试得出就是系统目录下面的cmd.exe改动生效了，但是指向cmd的快捷方式依然不生效。因此通过改动源头cmd来改变编码的路子似乎走不通。</li><li>有些人想出的方法就是去改注册表，亲测windows10下无效，而且直接修改注册表的关键位置有可能会对系统的运行造成潜在影响。</li></ul><h3 id="终极解决方案">终极解决方案</h3><ul><li>因此，最稳妥的方法就是每次启动终端的时候自动切换当前活动页为utf8，而且借助我们的好朋友cmder，实现起来非常简单，只需要在环境变量(cmder右键-&gt;Settings-&gt;Startup-&gt;Environment)，添加一条<code>chcp utf-8</code>，保存，重新打开cmder即可。原理上很简单，就是在每次在cmder中打开个新cmd的时候执行一段bat脚本。</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[proxychains-ng ipv6 错误的解决方案]]></title>
            <link>/posts/2016-11-29-proxychains-ng-ipv6-error</link>
            <guid>/posts/2016-11-29-proxychains-ng-ipv6-error</guid>
            <content:encoded><![CDATA[<h2 id="错误原因">错误原因</h2><ul><li>推测原因是来自proxychains-ng对ipv6地址的支持有点问题。</li></ul><h2 id="解决方案">解决方案</h2><ul><li>手动临时指定http代理服务器为某ipv4地址的服务器，此时就不需要用Proxychains4命令了<br/><code>http_proxy=127.0.0.1:1080 &lt;命令&gt;</code></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[python版本管理之conda]]></title>
            <link>/posts/2016-11-29-python-conda</link>
            <guid>/posts/2016-11-29-python-conda</guid>
            <content:encoded><![CDATA[<h2 id="适用环境">适用环境</h2><ul><li>全平台(windows、linux、macOS)</li><li>本文主要针对windows</li><li>参考这段<a href="https://www.youtube.com/watch?v=YJC6ldI3hWk">视频</a></li></ul><h2 id="安装conda">安装conda</h2><ul><li>这里仅安装包管理器<a href="http://conda.pydata.org/miniconda.html">miniconda</a>，而不是400MB+的conda(包含n多科学计算库)</li><li>miniconda版本的选择并不特别重要，因为conda可以以项目为单位，分别安装python版本，并在之间切换。这里以安装<a href="https://repo.continuum.io/miniconda/Miniconda2-latest-Windows-x86_64.exe">自带Python 2.7的版本</a>为例。也是考虑到linux下系统自带也是2.x版本的。</li></ul><h2 id="基本使用，以创建flask项目为例">基本使用，以创建flask项目为例</h2><ul><li><p>创建环境，并安装flask包</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token comment">#conda create --name &lt;env名称> &lt;要安装的包(可选),空格分隔>  </span>

<span class="token comment">#基于当前全局python版本产生新环境，这跟virtualenv类似</span>
conda create --name my_app flask

<span class="token comment">#指定python版本为3.x系列，conda自动下载并安装python3的最新版本，这点跟pyenv类似</span>
conda create --name <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token number">3</span> my_app flask
</code></pre></li><li><p>激活/退出该环境</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">activate my_app
deactivate my_app
</code></pre></li><li><p>查看所有的环境</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">conda <span class="token function">env</span> list
</code></pre></li><li><p>删除某环境</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">conda remove --name my_app --all
</code></pre></li></ul><h2 id="兼容性提示">兼容性提示</h2><ul><li>假如当前chcp是utf-8，那么在python2.7下会报错 <code>LookupError: unknown encoding: cp65001</code></li><li>解决方法是在cmder的环境变量加入一条<code>set PYTHONIOENCODING=utf-8</code></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[win10 移除通知中心列表中已卸载的app图标]]></title>
            <link>/posts/2016-12-01-win10-remove-uninstalled-app-from-notification-list</link>
            <guid>/posts/2016-12-01-win10-remove-uninstalled-app-from-notification-list</guid>
            <content:encoded><![CDATA[<h2 id="环境">环境</h2><ul><li>windows 10 1607</li><li>具有sqlite数据库编辑功能的软件，如navicat</li></ul><h2 id="原理">原理</h2><p>微软把这些推送通知相关的数据存储在了一个SQLite数据库中，由于程序卸载后没有调用hook，导致项目残留。</p><h2 id="数据库位置">数据库位置</h2><ul><li><code>%localappdata%\Microsoft\Windows\Notifications\wpndatabase.db</code></li></ul><h2 id="执行sql语句批量处理废弃应用">执行SQL语句批量处理废弃应用</h2><ul><li><p>主要处理的是非UWP应用，根据特征（PrimaryId中带有explorer.notification）可以识别。批量删除，无需重启，立即生效。</p><pre><code>```sql
delete from NotificationHandler where HandlerType = &#x27;app:desktop&#x27; and  PrimaryId like &#x27;%explorer.notification%&#x27;
```
</code></pre><p>问题到此已经完美解决了。</p></li></ul><h2 id="后记">后记</h2><p>由于一开始以为微软是写在注册表里面的，所以找来找去只找到了一串<code>explorer.notification{xxx}</code>形式的键名，所在键位为<code>HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Notifications\Settings\</code>
，以及发现了图标缓存的位置为<code>C:\Users\mzvast\AppData\Local\Microsoft\Windows\Explorer\NotifyIcon</code>。</p><p>之前也Google过中文和英文的资料，都没有人提到重点，后来无意间看到一篇德文的帖子，然后顺藤摸瓜找到了一个很详尽的讨论帖。但是中文方面，始终没有一个明晰的教程。我就记录一下，希望可以帮助到强迫症们！</p><h2 id="参考链接">参考链接</h2><ul><li><a href="https://www.deskmodder.de/wiki/index.php?title=Benachrichtigungen_und_Aktionen_Alte_Eintr%C3%A4ge_entfernen_l%C3%B6schen_Windows_10">德文原帖</a></li><li><a href="https://answers.microsoft.com/en-us/windows/forum/windows_10-other_settings/remove-an-uninstalled-app-from-the-notification/6cb57f86-23fd-4261-8922-e49f344095e5?page=9">英文院帖</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[重新审视bash on ubuntu on windows]]></title>
            <link>/posts/2016-12-07-about-wsl</link>
            <guid>/posts/2016-12-07-about-wsl</guid>
            <content:encoded><![CDATA[<p>本文旧版本已发表在<a href="https://www.zhihu.com/question/41967910/answer/134773244">知乎</a></p><h2 id="bash-on-windows-存在的问题">bash on windows 存在的问题</h2><h3 id="1windows下的ide无法整合wsl">1.windows下的IDE无法整合WSL</h3><p>我觉得作为开发环境很重要的一点就是win下的IDE们不能“方便”地直接调用WSL下的程序，比如在vscode下面不能调用WSL里的git，而非得装个git-bash。更别说IDE里直接调用WSL里面的python，node，go了。
根据微软<a href="https://blogs.msdn.microsoft.com/commandline/">最新build中</a>提出的互操作，重点似乎在WSL侧调用windows程序，他们已经把win下的path都append到WSL的path了，但在windows侧则不可见WSL的path，只能通过蹩脚的bash -c 去调用。</p><p>在微软自己都没有搞清楚两者互操作关系的前提下，就会有各种类似于这样的问题：用xxx-for-win还是用xxx-on-WSL？
若只在WSL侧装工具链，windows侧的IDE就是残废成只能做编辑器了，你用的win下的工具链怎么测linux下的bug，怎么加断点调试？</p><h3 id="2wsl阉割gui硬伤导致不具备高效的开发环境">2.WSL阉割GUI硬伤导致不具备高效的开发环境</h3><p>不仅互操作不行，在WSL里面开发体验也是很糟糕的。
之前盛传的在windows下用xserver运行Ubuntu桌面程序的视频也是反映了开发者对缺乏GUI支持的诉求。</p><h3 id="3wsl定位究竟是开发环境or生产环境？">3.WSL定位究竟是开发环境or生产环境？</h3><p>甚至我觉得微软的表述是自相矛盾的，他说WSL是面向开发，但无论怎么看没有GUI的Ubuntu更像是一个部署环境，而不是开发环境，没有IDE的支持怎么调试怎么开发呢？而且按照现在的完成度，只是个玩具。</p><h3 id="4关于wsl未来的几点想法">4.关于WSL未来的几点想法</h3><ul><li>微软绝对不会放弃windows下工具链的支持</li><li>WSL短期内不能取代windows下工具链，至少从IDE支持度上差距很大</li><li>微软的目前的所有动作看起来都似乎表明WSL的真实目的是让linux开发者用dotnet和SQLserver，也就是把linux的开发者拉过去，而不是把windows的开发者推出去。</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[iOS写作测试]]></title>
            <link>/posts/2017-03-15-ios-writing-test</link>
            <guid>/posts/2017-03-15-ios-writing-test</guid>
            <content:encoded><![CDATA[<h2 id="意义">意义</h2><p>之所以需要实现在iOS的写作。说来有好多原因，首先，相对于PC这种重的客户端来说，手机和平板似乎才是随时随地可以获得的，所谓的真正的移动互联网。</p><h2 id="问题描述">问题描述</h2><p>markdown本身十分轻量，语法简练，最大的问题是多媒体的嵌入，这也是老大难了，关键问题是插入图片。我们需要托管图片，同时获取访问的链接。七牛云作为图床的首选，也正是因为其免费的10G存储，对于普通的博客绰绰有余。</p><h2 id="使用的软件介绍">使用的软件介绍</h2><ul><li>Working copy(管理代码)</li><li>Editorial(编辑working copy中的文件)</li><li>Draft(运行javascript生成七牛云token)</li><li>Workflow(上传图片到七牛云并获取链接)</li><li>以及在背后默默工作的Travis CI</li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[markdown图床工具Picorz]]></title>
            <link>/posts/2017-03-19-markdown-image-tool-picorz</link>
            <guid>/posts/2017-03-19-markdown-image-tool-picorz</guid>
            <content:encoded><![CDATA[<h2 id="起因">起因</h2><p>之所以要搞这个小工具呢，主要就是markdown传图实在是不方便。现在有的相关产品，要么是不够精致，要么是太大而全，要么是Mac平台，总之就是没有我想要的那种。我的标准是什么呢？</p><ul><li>功能简单，只能传图</li><li>不依赖于编辑器</li></ul><h2 id="看东西">看东西</h2><p>凡是先bulabula的一堆再看东西的都是耍流氓。先来几张图，拿出来溜溜。或者直接去<a href="https://github.com/mzvast/Picorz">项目地址</a></p><h3 id="主界面">主界面</h3><p><img src="http://mzvast.github.io/picorz-img/Picorz-clipboard-"/>
传图片主要有三种方式，橘黄色的三处均是与上传有关的：</p><ul><li>Drag&amp;Drop区域：整个浅黄色区域都可以拖拽进去</li><li>Paste按钮：将剪贴板的截图图片</li><li>OpenFile按钮：直接打开文件选择器选择文件</li></ul><h3 id="设置界面">设置界面</h3><p><img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-03-19T174551+0800"/>
使用之前，先要去Tools-&gt;Settings配置一下七牛的账户</p><h2 id="关于设计">关于设计</h2><p>这个Logo你懂的，无可奉告！</p><p>这个软件名称么，大部分传图的工具都叫自己是xxxPic，然后我觉得好看的名字都被取完了。就表示跪了，Pic+Orz，这个就这么来了。</p><p>这个配色么，源自于这个：09热情-原色•间色•复色-烂漫
<img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-03-19T192915+0800"/></p><h2 id="关于程序">关于程序</h2><p>本软件是基于<a href="https://electron.atom.io">Electron</a>框架构建的。没有用任何前端JavaScript框架。应用的编译和打包成安装包是基于appveyor的，可以参见项目的appveyor.yml文件。</p><p>友友可以去试用一下，有什么问题可以反馈到github上面，&lt;3。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[spring-boot开启livereload]]></title>
            <link>/posts/2017-03-22-spring-boot-livereload</link>
            <guid>/posts/2017-03-22-spring-boot-livereload</guid>
            <content:encoded><![CDATA[<h2 id="目的">目的</h2><p>之所以要livereload是因为之前习惯了JavaScript开发的过程中各种livereload，所以不能自动刷新简直不能忍吖！这样一来就可以集中注意力在代码上，提高效率。</p><h2 id="实现步骤">实现步骤</h2><p>这边以idea为例，主要有三个地方要注意。</p><ol><li><p>首先以maven为例，在maven的配置文件里面加入插件</p><p><img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-03-22T202000+0800"/></p><pre><code class="language-xml" data-language="xml" data-highlighted-line-numbers=""><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>
</code></pre></li><li><p>在idea的设置中开启自动编译(Compiler-&gt;Build project automatically)</p><p><img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-03-22T201155+0800"/></p></li><li><p>在idea的registry里面开启允许运行时自动编译</p><p>用快捷键<code>Shift+Ctrl+P</code>调出搜索框，键入<code>registry</code>并回车
<img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-03-22T201320+0800"/></p><p>然后滚动到这个<code>compiler.automake.allow.when.app.running</code>，打勾保存。
<img src="http://mzvast.github.io/picorz-img/Picorz-pasteshot--2017-03-22T201449+0800"/></p></li></ol><h2 id="参考">参考</h2><ul><li><a href="https://patrickgrimard.io/2016/01/18/spring-boot-devtools-first-look/">https://patrickgrimard.io/2016/01/18/spring-boot-devtools-first-look/</a></li><li><a href="https://spring.io/guides/gs/serving-web-content/">https://spring.io/guides/gs/serving-web-content/</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[探寻迷失的心]]></title>
            <link>/posts/2017-09-14-find-my-lost-heart</link>
            <guid>/posts/2017-09-14-find-my-lost-heart</guid>
            <content:encoded><![CDATA[<p>思忖一番后，后知后觉自己已与这个世界脱轨了一阵子，具体算来是2个月甚至更久，可以追溯直到那一天我遇到农药开始。</p><p>我的潜意识明明白白我在那些推塔的世界里，没有烦恼，没有复杂的纷扰，有的是一个目标，各种习以为常的套路，时而怒其不争的愤慨，时而一举翻盘的狂傲。</p><p>然而，此时的忘情投入也仅仅是满足对现实的脱离的幻想，是时光流逝。世界那么大，未探索的那么多，为何止步于一个狭隘扭曲丑陋的世界观。你打死的敌人，你推的塔，你爆的水晶，一切都只是不存在的副本而已。仇恨在你心中，杀人变成目的，可我们真正需要的是爱不是么？</p><p>所以在这个午后，希望回归自然，回归生活，不再被那扭曲的世界观绑架。你说直接卸载不就行了？但是总会在某个不能理解的时刻又装回来。因此，与其强行摧毁一个世界观，使得世界观真空，不如用新的世界观去覆盖去融化那个扭曲的世界。时间和新欢都是忘记过去的好办法罢。</p><p>当我翻了翻时下流行的书，似乎并无新意，倒不如电影，当看到一大片未曾观看过的片子在面前，我才恍然意识到我从这个世界消失有多久。那就全都下下来一个个看，首先是《异形》，很血腥，很恶心，我竟然看完了这种以往秒删的片子，佩服自己。然后是一个烂片，不说了。最后我翻到一部《明天，我要和昨天的你约会》，刚看到开头好像什么时候已经看过的感觉，准备关掉，然而因为颜值实在太高，默默看了下去，才发现之前可能看过了个预告片也不一定。这个片子核心思想就是有两个人，分别来自两个世界，一个世界的人时间是正常流动的，另一个世界的人时间是倒流的。然后这两个世界的人由于某种不可抗力会每隔多少年见到多少天。因为是爱情主题，男主第一次遇到女主求交往，女主便落泪，然后在一起也会在很多第一次的时候落泪。男主在知道女主来自另一个时光倒流的世界时便很痛苦，一度要离开女主。然而当他突然发现他的第一次牵手，就是女主的最后一次，便飞奔而去，甜蜜温暖度过这彗星绕地球般的日子……</p><p>我顿时被这种世界观的设定给懵逼了。一点都不科学吖，然而什么世界观是科学？是的，世界观都是不科学的。而因为无知并不能否定这种世界观的存在可能性。也知道小说的这种世界观的目的就在于唤起人们对眼前事物的珍惜，有时候你的第一次就是另一个人的最后一次。深深佩服于岛国人民的忧国忧民意识。</p><p>在过往的自我心理救赎的过程中，日剧总是最能点醒我沉睡意识的一种存在。无论是极其注重生活感的镜头，还是令人窒息的画面美感，都令人重新审视这周遭的一切，给人一种幸福感。在现实压力面前，这样的救赎或许是极好的。</p><p>生活是自己的，再多人观看又如何。不忘初心， to create, to share,to love.</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[关于文本缩略]]></title>
            <link>/posts/2018-04-09-js-css-text-overflow</link>
            <guid>/posts/2018-04-09-js-css-text-overflow</guid>
            <content:encoded><![CDATA[<h2 id="需求描述">需求描述</h2><ul><li>一个不定宽度的 div，其中的文本当超出 div 宽度时候自动缩略成…</li><li>中英文混排</li></ul><h2 id="纯-css-的方案（推荐）">纯 CSS 的方案（推荐）</h2><pre><code class="language-css" data-language="css" data-highlighted-line-numbers=""><span class="token selector">div</span><span class="token punctuation">{</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> <span class="token string">'hidden'</span><span class="token punctuation">,</span>
    <span class="token property">whiteSpace</span><span class="token punctuation">:</span> <span class="token string">'nowrap'</span><span class="token punctuation">,</span>
    <span class="token property">textOverflow</span><span class="token punctuation">:</span> <span class="token string">'ellipsis'</span>
<span class="token punctuation">}</span>
</code></pre><p>textOverflow 这个属性，有“clip|ellipsis|string”三种属性，作用分别如下</p><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">clip</td><td align="left">修剪文本。</td></tr><tr><td align="left">ellipsis</td><td align="left">显示省略符号来代表被修剪的文本。</td></tr><tr><td align="left">string</td><td align="left">使用给定的字符串来代表被修剪的文本。</td></tr></tbody></table><h2 id="纯-js-的方案（不推荐）">纯 JS 的方案（不推荐）</h2><p>JS 在实现这块就显得比较不便，首先，仅仅根据字符数量进行截取，不能很好适应动态的 div 宽度。这里仅给出固定宽度（rem 定义 div 宽度）下可能的办法（但是没法保证不同浏览器和不同默认字体下的一致性）。下面这个 sub 函数就是截取固定长度（先把中文统一转成英文字符计算宽度）。</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">len</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/[^\x00-\xff]/g</span><span class="token punctuation">,</span> <span class="token string">'rr'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token regex">/[^\x00-\xff]/g</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">'mm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// n = n - 3;</span>
    <span class="token keyword">let</span> m <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">'mm'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'...'</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[聊聊字体加载]]></title>
            <link>/posts/2018-07-10-font-load</link>
            <guid>/posts/2018-07-10-font-load</guid>
            <content:encoded><![CDATA[<h2 id="自定义字体">自定义字体</h2><p>通常自定义字体在 css 中用@font-face 定义
加载方式是懒加载。（即用到的时候才会开始下载）</p><pre><code class="language-markup" data-language="markup" data-highlighted-line-numbers=""><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Web Font Sample<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>screen, print<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
      <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Bitstream Vera Serif Bold"</span><span class="token punctuation">;</span>
      <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>"https://mdn.mozillademos.org/files/2468/VeraSeBd.ttf"<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">body</span> <span class="token punctuation">{</span> <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Bitstream Vera Serif Bold"</span><span class="token punctuation">,</span> serif <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
  This is Bitstream Vera Serif Bold.
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre><h2 id="javascript-控制字体的载入">Javascript 控制字体的载入</h2><h3 id="font-face-observer">Font Face Observer</h3><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token keyword">var</span> font <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FontFaceObserver</span><span class="token punctuation">(</span><span class="token string">'Source Han Sans'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

font<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'中国'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Source Han Sans has available'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h4 id="加载模式举例">加载模式举例</h4><p><a href="https://www.bramstein.com/writing/web-font-loading-patterns.html">web-font-loading-patterns</a></p><ul><li>Ba­sic font load­ing</li><li>Load­ing groups of fonts</li><li>Load­ing fonts with a time­out</li><li>Pri­ori­tised load­ing</li><li>Cus­tom font dis­play</li><li>Op­ti­mise for caching</li></ul><h2 id="css-控制字体的载入">CSS 控制字体的载入</h2><h3 id="font-display">font-display</h3><h4 id="时间线">时间线</h4><table><thead><tr><th>阶段</th><th>作用</th></tr></thead><tbody><tr><td>block</td><td>字体未加载，用到该字体的元素必须实现 invisible 回落，在此期间如果下载完成，则正常显示</td></tr><tr><td>swap</td><td>字体未加载，用到该字体的元素必须有一种回落字体，在此期间如果下载完成，则正常显示</td></tr><tr><td>failure</td><td>字体加载失败，调用回落字体</td></tr></tbody></table><h4 id="属性值和意义">属性值和意义</h4><pre><code class="language-css" data-language="css" data-highlighted-line-numbers=""><span class="token comment">/* Keyword values */</span>
<span class="token property">font-display</span><span class="token punctuation">:</span> auto|block|swap|fallback|optional<span class="token punctuation">;</span>
</code></pre><table><thead><tr><th>值</th><th>解释</th></tr></thead><tbody><tr><td>auto</td><td>The font display strategy is defined by the user agent</td></tr><tr><td>block</td><td>Gives the font face a short block period and an infinite swap period.</td></tr><tr><td>swap</td><td>Gives the font face an extremely small block period and an infinite swap period.</td></tr><tr><td>fallback</td><td>Gives the font face an extremely small block period and a short swap period.</td></tr><tr><td>optional</td><td>Gives the font face an extremely small block period and no swap period.</td></tr></tbody></table><h4 id="兼容性">兼容性</h4><p>safari，chrome&gt;60</p><h3 id="最佳选择">最佳选择</h3><p>font-display: swap;</p><h2 id="refs">Refs</h2><p><a href="https://fontfaceobserver.com/">fontfaceobserver</a>
<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display">font-display</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[当create-react-app遇上typescript]]></title>
            <link>/posts/2019-02-01-cra-ts</link>
            <guid>/posts/2019-02-01-cra-ts</guid>
            <content:encoded><![CDATA[<h2 id="背景">背景</h2><p>2018 年以来的跑了许久的 react 项目，一直是基于 cra（create-react-app）官方脚手架并且不 eject，通过 react-app-rewired 进行自定义配置的。当时虽然有不少第三方的 ts（typescript）化方案，但不少官方支持且需要 eject 且需要第三方 ts loader，所以都在可升级性上有硬伤。而快到年底的时候，Babel7 出来，并且 babel 官方支持 typescript，与此同时 Facebook 将 cra2.0 加入了 ts 的支持，支持生成 ts 项目(<a href="https://facebook.github.io/create-react-app/docs/adding-typescript">cra-doc</a>)。</p><p>本文尝试将我们工程的升级过程和采坑进行总结和分享。</p><p>原工程主要配置是</p><ul><li>create-react-app (1.x )</li><li>flow</li><li>react-app-rewired (1.x)</li></ul><p>目标升级后的配置是</p><ul><li>create-react-app (2.x )</li><li>typescript</li><li>react-app-rewired (2.x)</li></ul><h2 id="步骤拆解">步骤拆解</h2><h3 id="1、升级-cra-版本">1、升级 cra 版本</h3><p>首先升级<code>react-scripts react-app-rewired</code>到 2.x 版本</p><h3 id="2、重命名文件名">2、重命名文件名</h3><p>将 src 下的 js 和 jsx 文件改成 tsx 文件。可以利用<code>find ./src -name &quot;*.jsx&quot; -exec sh -c &#x27;mv &quot;$0&quot; &quot;${0%.jsx}.tsx&quot;&#x27; {} \;</code>和<code>find ./src -name &quot;*.js&quot; -exec sh -c &#x27;mv &quot;$0&quot; &quot;${0%.jsx}.tsx&quot;&#x27; {} \;</code>两条指令。</p><h3 id="3、启动项目">3、启动项目</h3><p>运行<code>npm start</code>，cra 会检测到项目是 typescript 工程然后为你产生一个 tsconfig.json 文件。建议将 compilerOptions 的 strict 值改成 false，以避免过分严格的 any 检查导致项目编不过。这个文件大致长这样:</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token punctuation">{</span>
    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>
        <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"dom"</span><span class="token punctuation">,</span> <span class="token string">"dom.iterable"</span><span class="token punctuation">,</span> <span class="token string">"esnext"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"skipLibCheck"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"allowSyntheticDefaultImports"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// default is true</span>
        <span class="token property">"forceConsistentCasingInFileNames"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>
        <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>
        <span class="token property">"resolveJsonModule"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"isolatedModules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="4、快捷安装-typings">4、快捷安装 typings</h3><p>可以全局安装<a href="https://github.com/nfour/types-installer">types-installer</a>来进行自动化的依赖解析和安装。</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers="">$ npm i <span class="token operator">-</span>g types<span class="token operator">-</span>installer
$ types<span class="token operator">-</span>installer
</code></pre><h3 id="5、修复所有编译错误">5、修复所有编译错误</h3><p>这是工作量最大也是最复杂的步骤。根据工程文件多少可能会花费 1 天到若干天的工作量。但既然选择了开始，就请坚信结果是美好的。</p><h3 id="一个-比较复杂的带有-redux-的-react-组件的通常-ts-写法">一个 比较复杂的带有 redux 的 react 组件的通常 ts 写法</h3><ul><li>这里 redux 的 state 和 dispatch 的 any 声明是可以通过引入 store 文件来实现的，偷懒了。</li><li>RouteComponentProps 是为了 withRouter 可以正确识别 this.props.history 等 react-router 属性。</li><li>CSSProperties 是为了让 style 对象可以正确被识别。当然工程中用的是 styled-components 就不需要这条了。</li></ul><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> CSSProperties<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Route<span class="token punctuation">,</span> withRouter<span class="token punctuation">,</span> RouteComponentProps<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>connect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">OwnProps</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">StateProps</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">DispatchProps</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">type</span> Props <span class="token operator">=</span> OwnProps <span class="token operator">&amp;</span> StateProps <span class="token operator">&amp;</span> DispatchProps <span class="token operator">&amp;</span> RouteComponentProps<span class="token punctuation">;</span>
<span class="token keyword">type</span> State <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span><span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> State<span class="token operator">></span> <span class="token punctuation">{</span>
    state<span class="token punctuation">:</span> State <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> myStyle <span class="token operator">=</span> <span class="token punctuation">{</span>
            background<span class="token punctuation">:</span> <span class="token string">'red'</span>
        <span class="token punctuation">}</span> <span class="token keyword">as</span> CSSProperties<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span>myStyle<span class="token punctuation">}</span><span class="token operator">></span>hellow<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapStateToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    state
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">mapDispatchToProps</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">dispatch<span class="token punctuation">:</span> <span class="token builtin">any</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>dispatch<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>
    mapStateToProps<span class="token punctuation">,</span>
    mapDispatchToProps
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">withRouter</span><span class="token punctuation">(</span>Hellow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="absolute-引用的解决方案">absolute 引用的解决方案</h3><p>在通常的工程中，我们会设定 alias 来方便绝对地址的引用，比如用@记号来指向 src 路径。</p><p>通常在 config-overrides 里面这么配置</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers="">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">webpack</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> env</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        config<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token operator">...</span>config<span class="token punctuation">.</span>resolve<span class="token punctuation">,</span>
            alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">'@'</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>这个在 cra 的 typescript 工程中编译是可以的，但 typescript 解析器默认是不支持的（会出现红色波浪线告诉你@无法识别），通过改 tsconfig 的方法并没有得到官方的支持。经过探索和试验，目前最完美的方案就是软链接src路径到node_modules/@。而且以后官方支持配置之后，也可以方便的切过去。</p><p>对 package.json 部分配置如下。</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token punctuation">{</span>
    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"postinstall"</span><span class="token operator">:</span> <span class="token string">"yarn link-modules"</span><span class="token punctuation">,</span>
        <span class="token property">"unlink-modules"</span><span class="token operator">:</span> <span class="token string">"rimraf node_modules/@"</span><span class="token punctuation">,</span>
        <span class="token property">"link-modules"</span><span class="token operator">:</span> <span class="token string">"globstar --node -- lnk \"./src/*\" \"./node_modules/@/\""</span><span class="token punctuation">,</span>
        <span class="token property">"relink-modules"</span><span class="token operator">:</span> <span class="token string">"yarn unlink-modules &amp;&amp; yarn link-modules"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>需要的依赖则可以用指令安装:</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers=""><span class="token function">yarn</span> <span class="token function">add</span> -D rimraf lnk-cli globstar
</code></pre><p>现在只要运行<code>yarn</code>或者<code>npm i</code> 就会自动链接src到node_modules/@了。</p><h2 id="总结">总结</h2><p>typescript 在复杂大型企业项目中越来越体现出其优势，我们将会坚定不移的转到 typescript 上来。</p><h2 id="refs">Refs</h2><p><a href="https://medium.com/knerd/typescript-tips-series-proper-typing-of-react-redux-connected-components-eda058b6727d">Typescript Tips Series: Proper Typing of react-redux Connected Components</a>
<a href="https://facebook.github.io/create-react-app/docs/adding-typescript">cra adding-typescript</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[如何更好的定义React组件API]]></title>
            <link>/posts/2019-02-03-defining-component-apis-in-react</link>
            <guid>/posts/2019-02-03-defining-component-apis-in-react</guid>
            <content:encoded><![CDATA[<h2 id="背景">背景</h2><p>经过一段时间的 React 项目开发，写了不少的组件，也踩过不少的坑。本文学习整理了一些觉得比较实用的组件 API 编写的建议。</p><h2 id="组件-api-建议">组件 API 建议</h2><h3 id="尽可能最小化-api-暴露数量">尽可能最小化 API 暴露数量</h3><p>这意味着更少的学习成本，让其他人更容易理解和使用。</p><h3 id="易于检索的目录结构">易于检索的目录结构</h3><p>不要过早的组织层次复杂的目录结构，在组件数量并不多的时候这么做是吃力不讨好。扁平的目录结构天生拥有字母顺序检索优势，便于其他人检索。</p><h3 id="避免写-renderxxx-类似的方法">避免写 renderXXX 类似的方法</h3><p>大部分的 render 开头的函数大概率可能应该自身是一个组件。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token comment">// Instead of this</span>
<span class="token keyword">class</span> <span class="token class-name">Items</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">renderItems</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token punctuation">{</span><span class="token function">renderItem</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">renderItem</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>ul<span class="token operator">></span>
        <span class="token punctuation">{</span><span class="token function">renderItems</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// Do this</span>
<span class="token keyword">const</span> <span class="token function-variable function">ItemList</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> items <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token operator">&lt;</span>ul<span class="token operator">></span>
    <span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>Item <span class="token punctuation">{</span><span class="token operator">...</span>item<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">}</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>

<span class="token keyword">const</span> <span class="token function-variable function">Item</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token keyword">class</span> <span class="token class-name">Items</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> items <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>ItemList items<span class="token operator">=</span><span class="token punctuation">{</span>items<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="在数据边界拆分组件">在数据边界拆分组件</h3><p>一些普通展示类组件的 API，通常应当由其数据模型来定义，而不是分开来传 props。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token comment">// Instead of this</span>
<span class="token operator">&lt;</span>Card
  image<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>thumbnail<span class="token punctuation">}</span>
  title<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
  text<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>description<span class="token punctuation">}</span>
  link<span class="token operator">=</span><span class="token punctuation">{</span>product<span class="token punctuation">.</span>permalink<span class="token punctuation">}</span>
<span class="token operator">/</span><span class="token operator">></span>

<span class="token comment">// Do this</span>
<span class="token operator">&lt;</span>ProductCard <span class="token punctuation">{</span><span class="token operator">...</span>product<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
</code></pre><p>很可能 ProductCard 并不能复用，那么只留这么一份定义就可以了。你可以遵循“<a href="https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)">Rule of three</a>”，也就是假如同样的逻辑在代码中出现了 3 次，就重构这个东西吧。</p><h3 id="避免为了重用组件而写笨重的组件-reusable-！-flexible">避免为了重用组件而写笨重的组件 reusable ！== flexible</h3><p>别为了避免写一个新的组件，而给一个组件增加抽象属性和额外逻辑。例如，一个 Button 可能可以接受不同的 color，size，shape，但没必要每次都传一堆 props 组合进去，所谓<a href="https://speakerdeck.com/jenncreighton/the-how-and-why-of-flexible-react-components-289aa486-464a-4dea-b89a-6f92d0af6606">Apropcalypse</a>。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token comment">// Instead of this</span>
<span class="token operator">&lt;</span>Button
  variant<span class="token operator">=</span><span class="token string">'secondary'</span>
  size<span class="token operator">=</span><span class="token string">'large'</span>
  outline
  label<span class="token operator">=</span><span class="token string">'Buy Now'</span>
  icon<span class="token operator">=</span><span class="token string">'shoppingBag'</span>
  onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span>
<span class="token operator">/</span><span class="token operator">></span>

<span class="token comment">// Do this</span>
<span class="token operator">&lt;</span>SecondaryButton
  size<span class="token operator">=</span><span class="token string">'large'</span>
  onClick<span class="token operator">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span><span class="token operator">></span>
  <span class="token operator">&lt;</span>Icon name<span class="token operator">=</span><span class="token string">'shoppingBag'</span> <span class="token operator">/</span><span class="token operator">></span>
  Buy Now
<span class="token operator">&lt;</span><span class="token operator">/</span>SecondaryButton<span class="token operator">></span>
</code></pre><h3 id="用-composition">用 composition</h3><p>要尽量用 composition 的方式而不是 inherit 的方式，保证组件的灵活性。不要重复发明 props.children。如果定义的 props 接受的文字而不是基于数据结构，可能用 composition 是更好的方式。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token comment">// Instead of this</span>
<span class="token operator">&lt;</span>Header
  title<span class="token operator">=</span><span class="token string">'Hello'</span>
  subhead<span class="token operator">=</span><span class="token string">'This is a header'</span>
  text<span class="token operator">=</span><span class="token string">'And it has arbitrary props'</span>
<span class="token operator">/</span><span class="token operator">></span>

<span class="token comment">// Do this</span>
<span class="token operator">&lt;</span>Header<span class="token operator">></span>
  <span class="token operator">&lt;</span>Heading<span class="token operator">></span>Hello<span class="token operator">&lt;</span><span class="token operator">/</span>Heading<span class="token operator">></span>
  <span class="token operator">&lt;</span>Subhead<span class="token operator">></span>This <span class="token keyword">is</span> a header<span class="token operator">&lt;</span><span class="token operator">/</span>Subhead<span class="token operator">></span>
  <span class="token operator">&lt;</span>Text<span class="token operator">></span>And it uses composition<span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Header<span class="token operator">></span>
</code></pre><p>采用 composition 的方式，就不需要那么多的 documentation 了。你也可以将 composition 版本的组件绑定到某种数据模型，就像这样。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token function-variable function">PageHeader</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>
  title<span class="token punctuation">,</span>
  description
<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
  <span class="token operator">&lt;</span>Header<span class="token operator">></span>
    <span class="token operator">&lt;</span>Heading<span class="token operator">></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Heading<span class="token operator">></span>
    <span class="token operator">&lt;</span>Text<span class="token operator">></span><span class="token punctuation">{</span>description<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>Header<span class="token operator">></span>

<span class="token comment">// And ideally can be used like this</span>
<span class="token operator">&lt;</span>PageHeader <span class="token punctuation">{</span><span class="token operator">...</span>page<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
</code></pre><h3 id="避免用枚举值做布尔值-props">避免用枚举值做布尔值 props</h3><p>布尔值作为 props 有时候会令人困惑，例如</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Button primary <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>Button secondary <span class="token operator">/</span><span class="token operator">></span>
</code></pre><p>那么这样会怎样?</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Button primary secondary <span class="token operator">/</span><span class="token operator">></span>
</code></pre><p>这样一来不看文档就真看不懂了。因此可以尝试下面的方式</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token operator">&lt;</span>Button variant<span class="token operator">=</span><span class="token string">"primary"</span> <span class="token operator">/</span><span class="token operator">></span>
</code></pre><p>虽然多打了几个字，但更具可读性。</p><h3 id="保持-props-api-平行">保持 props API 平行</h3><p>尽量保持不同组件间取同样名字的 props，这样更容易猜测用法和记住名称。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token comment">// Instead of this</span>
<span class="token operator">&lt;</span>DatePicker
  date<span class="token operator">=</span><span class="token punctuation">{</span>date<span class="token punctuation">}</span>
  onSelect<span class="token operator">=</span><span class="token punctuation">{</span>handleDateChange<span class="token punctuation">}</span>
<span class="token operator">/</span><span class="token operator">></span>

<span class="token comment">// Do this</span>
<span class="token operator">&lt;</span>DatePicker
  value<span class="token operator">=</span><span class="token punctuation">{</span>date<span class="token punctuation">}</span>
  onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleDateChange<span class="token punctuation">}</span>
<span class="token operator">/</span><span class="token operator">></span>
</code></pre><p>Styled System 库鼓励多个组件采用平行的 props API。例如 color 在 rebass 库的所有组件中都有同样的效果。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token comment">// example from Rebass</span>
<span class="token operator">&lt;</span>Box color<span class="token operator">=</span><span class="token string">'tomato'</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token operator">&lt;</span>Heading color<span class="token operator">=</span><span class="token string">'tomato'</span> <span class="token operator">/</span><span class="token operator">></span>
</code></pre><h3 id="寻求团队建议">寻求团队建议</h3><p>以上的建议并不适用于所有需求，需要针对业务做灵活的变化。最好的建议是跟团队讨论，创建 RFCs 和 PRs，并尝试<a href="https://ponyfoo.com/articles/readme-driven-development">Readme Driven Development</a>。写 React 组件很容易，但为团队创建一个好用的组件库值得花时间和努力去把事情做对。</p><h2 id="refs">Refs</h2><p><a href="https://jxnblk.com/blog/defining-component-apis-in-react/">Defining Component APIs in React</a></p><p><a href="https://reactjs.org/docs/thinking-in-react.html">thinking-in-react</a></p><p><a href="https://en.wikipedia.org/wiki/Rule_of_three_(computer_programming)">Rule of three</a></p><p><a href="https://speakerdeck.com/jenncreighton/the-how-and-why-of-flexible-react-components-289aa486-464a-4dea-b89a-6f92d0af6606">Apropcalypse(强烈推荐)</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[一种基于styled-components生态的react组件库设计构想]]></title>
            <link>/posts/2019-02-12-react-play-with-styled-theming</link>
            <guid>/posts/2019-02-12-react-play-with-styled-theming</guid>
            <content:encoded><![CDATA[<h2 id="主要技术路线及其限制">主要技术路线及其限制</h2><h3 id="基于的库及其作用">基于的库及其作用</h3><ul><li><p><a href="https://www.styled-components.com/">styled-components</a>：JSS（CSS in JS）基础</p></li><li><p><a href="https://github.com/jxnblk/styled-system">styled-system</a>：增加styled-components的扩展性和API统一性</p></li><li><p><a href="https://jamie.build/styled-theming.html">styled-theming</a>：提供模块化和多维度的主题定义模式，避免形成全局巨大主题对象，提高主题可维护性</p></li></ul><h3 id="1风格约束">1.风格约束</h3><ul><li><p>避免直接导入css文件。全局css可转制到全局wrapper组件中。</p></li><li><p>在组件内样式以css模板字符串定义为主，避免css对象。</p></li><li><p>避免在组件内定义classname。但是全局wrapper组件中依然可定义classname例如<code>.button .navbar</code>等，但全局wrapper中以最通用的reset功能的样式定义为主（例如display属性）。</p></li></ul><h3 id="2基于主题的组件样式定制">2.基于主题的组件样式定制</h3><ul><li><p>组件样式分为预置全局reset样式、全局主题样式，以及各个组件的主题样式。</p></li><li><p>组件自带样式可以由多个维度定义，例如mode是light/dark，size是normal/compact。组件可以选择性的继承全局主题样式。</p></li><li><p>组件自带样式支持覆盖（基于styled-system）。</p></li></ul><h3 id="3由css框架转制react组件库的启发">3.由css框架转制react组件库的启发</h3><p><a href="https://github.com/whoisryosuke/pure-components/tree/master">pure-components</a>是一个由pure-css框架转制成的react组件库，他的<a href="https://dev.to/whoisryosuke/styled-components-using-pure-css-framework-3npf?newly-registered-user=true">实践思路</a>与上述的思路类似。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fira Code 连写字体优化代码显示效果]]></title>
            <link>/posts/2019-02-13-fira-code-font-setup</link>
            <guid>/posts/2019-02-13-fira-code-font-setup</guid>
            <content:encoded><![CDATA[<h3 id="why-fira">Why Fira</h3><p>提高视觉渲染效果，提高可读性
<img src="https://res.cloudinary.com/practicaldev/image/fetch/s--uzH3ViYK--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://raw.githubusercontent.com/tonsky/FiraCode/master/showcases/all_ligatures.png" alt="all_ligatures"/></p><h3 id="install-on-macos">Install on macOS</h3><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers="">$ brew tap caskroom/fonts 
$ brew cask <span class="token function">install</span> font-fira-code
</code></pre><h3 id="enable-on-vscode">enable on VSCode</h3><p>settings.json</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token punctuation">{</span> 
<span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Fira Code"</span><span class="token punctuation">,</span> 
<span class="token property">"editor.fontLigatures"</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="credits">Credits</h3><p><a href="https://dev.to/thegeoffstevens/vs-code-settings-you-should-customize-5e75?utm_source=Newsletter+Subscribers&amp;utm_campaign=4a43dfb659-EMAIL_CAMPAIGN_2019_02_11_02_11&amp;utm_medium=email&amp;utm_term=0_d8f11d5d1e-4a43dfb659-154875657">vs-code-settings-you-should-customize</a>
<a href="https://github.com/tonsky/FiraCode">FiraCode Github</a>
<a href="https://medium.com/@chemidy/enabling-font-ligatures-on-visual-studio-code-19b71150d600">enabling-font-ligatures-on-visual-studio-code</a>
<a href="https://support.apple.com/zh-cn/guide/font-book/fntbk1000/9.0/mac/10.14">在 Mac 上的“字体册”中安装和验证字体</a>
<a href="https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions">VS-Code-Instructions</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[git-subtree]]></title>
            <link>/posts/2019-02-15-git-subtree</link>
            <guid>/posts/2019-02-15-git-subtree</guid>
            <content:encoded><![CDATA[<h2 id="背景">背景</h2><p>简单说就是subtree比submodule更好用。</p><h2 id="使用举例">使用举例</h2><p>参数说明</p><ul><li>LOCAL_DIR: 本地文件夹名字</li><li>GIT_URL: 远端GIT仓库地址</li><li>BRANCH_NAME: 分支名字</li><li><code>--squash</code>参数表示不拉取历史信息，而只生成一条commit信息</li><li>REMOTE_ALIAS: 远端仓库别名</li></ul><h3 id="add">Add</h3><p>添加subtree到目录中</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers=""><span class="token function">git</span> subtree <span class="token function">add</span> --prefix<span class="token operator">=</span>LOCAL_DIR GIT_URL BRANCH_NAME --squash
</code></pre><h3 id="pull">Pull</h3><p>拉取subtree更新</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers=""><span class="token function">git</span> subtree pull --prefix<span class="token operator">=</span>LOCAL_DIR GIT_URL BRANCH_NAME --squash
</code></pre><h3 id="push">Push</h3><p>推送subtree改动</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers=""><span class="token function">git</span> subtree push --prefix<span class="token operator">=</span>LOCAL_DIR GIT_URL BRANCH_NAME
</code></pre><h3 id="简化git-subtree命令中的git_url">简化git subtree命令中的GIT_URL</h3><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers=""><span class="token function">git</span> remote <span class="token function">add</span> -f REMOTE_ALIAS GIT_URL
<span class="token comment"># 使用</span>
<span class="token function">git</span> subtree <span class="token function">add</span> --prefix<span class="token operator">=</span>LOCAL_DIR REMOTE_ALIAS BRANCH_NAME --squash
<span class="token function">git</span> subtree pull --prefix<span class="token operator">=</span>LOCAL_DIR REMOTE_ALIAS BRANCH_NAME --squash
<span class="token function">git</span> subtree push --prefix<span class="token operator">=</span>LOCAL_DIR REMOTE_ALIAS BRANCH_NAME
</code></pre><h3 id="credits">Credits</h3><p><a href="http://wiki.baidu.com/pages/viewpage.action?pageId=49971581">git submodule vs git subtree</a></p><p><a href="https://segmentfault.com/a/1190000012002151">git subtree</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Start Loving Change]]></title>
            <link>/posts/2019-07-29-start-loving-change</link>
            <guid>/posts/2019-07-29-start-loving-change</guid>
            <content:encoded><![CDATA[<p>这次分享三个话题</p><h2 id="新的部落格">新的部落格</h2><p>一直想把blog换成基于react和mdx，做却一直没有动力去做，一直拖延，这次终于强迫自己，花了大半个周天调研和迁移。</p><p>blog系统变更在我手中经历过三次，第一次wp，以后是hexo，然后hugo，现在新的react+mdx，三次重建，个中滋味谁能懂。</p><ul><li><p>wp足够沙雕，当年第一台VPS的时候就迫不及待的安上了lamp全家桶和wp，那段时光似乎像阳光洒满了大地。
但好景不长，wp但漏洞频出，还有一次被黑了，（显示出我对root权限对管理如此不在意，自此对VPS安全格外重视）</p></li><li><p>hexo, 选择的原因可能是当时看到hexo有直接倒入wp的插件，于是就信了hexo的邪。好景不长，这东西可玩性并不强。</p></li><li><p>hugo，由于一次尝试发现build速度极快，而且主题也比较好看，就选择了，并进行了迁移。hex和hugo的md都差不多，大同小异。但是当你要改主题的时候发现这特么是Go语言的模版，难用的一批，艰难的修改了一些个样式，后来更新文章的频率也越来越低，我最喜欢的capser主题的作者好像那一波之后也没有在更新了。在搞hugo的期间，我尝试搭建了travisCI的自动化部署，使得代码和发布分离了，初次尝试赶紧非常良好。但是当时hugo的代码高亮着色器太烂了，要用python装个依赖才能用，又是go又是python，着实麻烦。一直心心念念想要换成基于react和mdx（这两个都是超爱）。hexo和hugo都在md的头部加了一串metaData，甚是令人眼烦，而且他们又不能使用react组件，真的是非常的不自在呢。</p></li><li><p>乌云密布的调研。gatsby，nextjs这些都试过了，感觉非常糟糕，有种过度抽象的感觉，可能他们在某些专项领域有其独到之处，但对于一个普通写作者的角度来看是太重了。思忖着最理想的就是cra+mdx，但是自己写太费时间，一方面是主题视觉不好操作，另一方面静态代码生成我没有到位的了解，上次公司官网的上线前夕想用SSG做SEO，却发现headless的方案效果不稳定，就对此持观望态度。一切发生了变化，知道我遇见一个基于<a href="https://github.com/frontarm/navi">navi</a>的cra+mdx的SSG的脚手架<a href="https://github.com/frontarm/create-react-blog">create-react-blog</a>，当我看到的star数我有点慌，但是运行以后，简直是强无敌。可以遇见的是navi将会对我们项目的性能优化带来启发，而且create-react-blog这个项目的<a href="https://github.com/frontarm/create-react-blog/blob/master/create-react-blog.js">脚手架CLI代码</a>也是非常精简和实用, 先立个flag我要给这个脚手架写个代码分析。</p></li><li><p>react + navi + mdx，大致可以描述这个blog的组成。基本上已经走在了最前沿了，除了没有用styled-component，然而似乎没有用的必要，作为内容生产者的模版来说，样式用简单的css就可以描述了。至少是熟悉的技术栈，这样发现bug也可以自己修，还可以提PR来改进项目，想想就很美好呢。</p></li></ul><h3 id="缺点和需要改进的地方">缺点和需要改进的地方</h3><ul><li><p>已知bug(fixed at 2019–12–29)</p><ul><li>在第二页点击底部的About、Tags、Source会爆炸404.</li></ul></li><li><p>评论系统(feat added at 2019–12–29)</p><ul><li>默认没有加入discuss，👿，这个暂时忍两天，总得想办法让人评论的。</li></ul></li></ul><h2 id="本周待定主题">本周待定主题</h2><h3 id="deliberate-practice">Deliberate Practice</h3><ul><li>以写促学</li></ul><h3 id="sleep-is-your-superpower">Sleep is your superpower</h3><ul><li><p>health damage</p></li><li><p>relating to asmr</p></li></ul><h3 id="conventional-commits--lerna">Conventional Commits &amp; lerna</h3><h3 id="create-react-blog脚手架代码分析">create-react-blog脚手架代码分析</h3><h3 id="我的omnifocus-system设定分享">我的omnifocus system设定分享</h3><h3 id="前端架构分层描述">前端架构分层描述</h3><h3 id="travis-ci与github项目的结合使用">Travis CI与Github项目的结合使用</h3>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[CRA polyfill（未完工）]]></title>
            <link>/posts/2019-12-11-cra-polyfill</link>
            <guid>/posts/2019-12-11-cra-polyfill</guid>
            <content:encoded><![CDATA[<p>浏览器兼容性是老生常谈了，以往都是直接引入babel-polyfill完事。这样造成包体积变大了很多，因为照顾少数浏览器的体验而使得优秀的浏览器体验也跟着变差了。
以create-react-app为例，本文探讨目前polyfill的几种姿势。</p><h2 id="1、生成一个精确支持浏览器的包（cra官方姿势）">1、生成一个精确支持浏览器的包（CRA官方姿势）</h2><p> 纵观<a href="https://create-react-app.dev/docs/supported-browsers-features/">CRA文档</a>浏览器支持部分。看完可能不清楚“Supported Language Features”和“Configuring Supported Browsers“为什么会分两节来叙述。</p><p>其实这两节的内在逻辑是““Supported Language Features”是提供了polyfill，“Configuring Supported Browsers“是按需（目标浏览器的支持度）裁剪了polyfill的内容。也就是前者是全集（直接引入全部补丁），后者是子集（干掉浏览器已经支持的补丁）。</p><p>需要做两件事：
1、在entrypint（即在index.tsx中）导入core-js（第一节的内容）
2、配置好正确的browserlist（第二节的内容）</p><h3 id="babel-preset-env">babel-preset-env</h3><p>会做类似以下的事情</p><p>In:</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token string">"core-js"</span><span class="token punctuation">;</span>
</code></pre><p>Out (different based on environment):</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token string">"core-js/modules/es.string.pad-start"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">"core-js/modules/es.string.pad-end"</span><span class="token punctuation">;</span>
</code></pre><h3 id="browserslist">browserslist</h3><p>帮助筛选polyfill的去留。</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">">0.2%"</span><span class="token punctuation">,</span>
            <span class="token string">"not dead"</span><span class="token punctuation">,</span>
            <span class="token string">"not op_mini all"</span><span class="token punctuation">,</span>
            <span class="token string">"ios_saf 10"</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
            <span class="token string">"last 1 chrome version"</span><span class="token punctuation">,</span>
            <span class="token string">"last 1 firefox version"</span><span class="token punctuation">,</span>
            <span class="token string">"last 1 safari version"</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
</code></pre><p><a href="https://browsersl.ist/?q=%3E0.2%25%2C+not+dead%2C+not+op_mini+all%2C+ios_saf+10">这个站点</a>,可以直观的帮助我们看到适配的浏览器。</p><p>两者的互动关系，具体的实现有待研究（todo）</p><h2 id="2、按需加载polyfill（todo）">2、按需加载polyfill（todo）</h2>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[React遇到disqus]]></title>
            <link>/posts/2019-12-29-disqus-addon</link>
            <guid>/posts/2019-12-29-disqus-addon</guid>
            <content:encoded><![CDATA[<p>本文是<a href="../2019-07-29-start-loving-change">填坑之作</a></p><h2 id="步骤概述">步骤概述</h2><ol><li>注册<a href="https://disqus.com/">Disqus 账号</a>，新建一个 site。</li><li>React 工程安装<a href="https://github.com/disqus/disqus-react">disqus-react</a>组件，配置组件。</li></ol><h2 id="注册账号">注册账号</h2><p>注册的过程就不详细说了，就是注册完了之后要去对应 site 设定<code>Website URL</code>字段</p><p>设置菜单的路径位于</p><p><code>https://[你的siteShortname].disqus.com/admin/settings/general/</code></p><img src="/static/media/screen.ae14f2ff.png" style="width:100%"/><h2 id="安装和配置-disqus-react">安装和配置 disqus-react</h2><p>用 yarn 安装依赖</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token function">yarn</span> <span class="token function">add</span> disqus-react
</code></pre><p>然后配置页面组件，本工程为例，页面组件在<code>src/components/BlogPostLayout.tsx</code>
重点是<code>NEW_CODE</code>标记的</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Link<span class="token punctuation">,</span> useCurrentRoute<span class="token punctuation">,</span> useView<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-navi'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>MDXProvider<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@mdx-js/react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> siteMetadata <span class="token keyword">from</span> <span class="token string">'../siteMetadata'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> ArticleMeta <span class="token keyword">from</span> <span class="token string">'./ArticleMeta'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Bio <span class="token keyword">from</span> <span class="token string">'./Bio'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> styles <span class="token keyword">from</span> <span class="token string">'./BlogPostLayout.module.css'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Disqus <span class="token keyword">from</span> <span class="token string">'disqus-react'</span><span class="token punctuation">;</span> <span class="token comment">// NEW_CODE</span>

<span class="token keyword">interface</span> <span class="token class-name">BlogPostLayoutProps</span> <span class="token punctuation">{</span>
    blogRoot<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">BlogPostLayout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>blogRoot<span class="token punctuation">}</span><span class="token punctuation">:</span> BlogPostLayoutProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>title<span class="token punctuation">,</span> data<span class="token punctuation">,</span> url<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCurrentRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>connect<span class="token punctuation">,</span> content<span class="token punctuation">,</span> head<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>MDXComponent<span class="token punctuation">,</span> readingTime<span class="token punctuation">}</span> <span class="token operator">=</span> content<span class="token punctuation">;</span>
    <span class="token comment">/* NEW_CODE start */</span>
    <span class="token keyword">const</span> disqusShortname <span class="token operator">=</span> <span class="token string">'miaocode'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> disqusConfig<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        url<span class="token punctuation">:</span> <span class="token string">'https://mzvast.github.io'</span> <span class="token operator">+</span> url<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>
        identifier<span class="token punctuation">:</span> data<span class="token punctuation">.</span>slug<span class="token punctuation">,</span>
        title<span class="token punctuation">:</span> title
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">/* NEW_CODE end */</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'useCurrentRoute::title, data, url'</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> data<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// The content for posts is an MDX component, so we'll need</span>
    <span class="token comment">// to use &lt;MDXProvider> to ensure that links are rendered</span>
    <span class="token comment">// with &lt;Link>, and thus use pushState.</span>
    <span class="token keyword">return</span> <span class="token function">connect</span><span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token operator">></span>
            <span class="token punctuation">{</span>head<span class="token punctuation">}</span>
            <span class="token operator">&lt;</span>article className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>header className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>header<span class="token punctuation">}</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>h1 className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">></span>
                        <span class="token operator">&lt;</span>Link href<span class="token operator">=</span><span class="token punctuation">{</span>url<span class="token punctuation">.</span>pathname<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
                    <span class="token operator">&lt;</span>ArticleMeta
                        blogRoot<span class="token operator">=</span><span class="token punctuation">{</span>blogRoot<span class="token punctuation">}</span>
                        data<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">}</span>
                        readingTime<span class="token operator">=</span><span class="token punctuation">{</span>readingTime<span class="token punctuation">}</span>
                    <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span>
                <span class="token operator">&lt;</span>MDXProvider
                    components<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
                        a<span class="token punctuation">:</span> Link<span class="token punctuation">,</span>
                        <span class="token function-variable function">wrapper</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>children<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
                            <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>content<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                        <span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">}</span>
                <span class="token operator">></span>
                    <span class="token operator">&lt;</span>MDXComponent <span class="token operator">/</span><span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>MDXProvider<span class="token operator">></span>
                <span class="token punctuation">{</span><span class="token comment">/* NEW_CODE start
                 */</span><span class="token punctuation">}</span>
                <span class="token operator">&lt;</span>Disqus<span class="token punctuation">.</span>DiscussionEmbed
                    shortname<span class="token operator">=</span><span class="token punctuation">{</span>disqusShortname<span class="token punctuation">}</span>
                    config<span class="token operator">=</span><span class="token punctuation">{</span>disqusConfig<span class="token punctuation">}</span>
                <span class="token operator">/</span><span class="token operator">></span>
                <span class="token punctuation">{</span><span class="token comment">/* NEW_CODE end
                 */</span><span class="token punctuation">}</span>
                <span class="token operator">&lt;</span>footer className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>footer<span class="token punctuation">}</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>h3 className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">></span>
                        <span class="token operator">&lt;</span>Link href<span class="token operator">=</span><span class="token punctuation">{</span>blogRoot<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">{</span>siteMetadata<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>
                    <span class="token operator">&lt;</span>Bio className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>bio<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>section className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>links<span class="token punctuation">}</span><span class="token operator">></span>
                        <span class="token punctuation">{</span>data<span class="token punctuation">.</span>previousDetails <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
                            <span class="token operator">&lt;</span>Link
                                className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>previous<span class="token punctuation">}</span>
                                href<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>previousDetails<span class="token punctuation">.</span>href<span class="token punctuation">}</span>
                            <span class="token operator">></span>
                                ← <span class="token punctuation">{</span>data<span class="token punctuation">.</span>previousDetails<span class="token punctuation">.</span>title<span class="token punctuation">}</span>
                            <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
                        <span class="token punctuation">)</span><span class="token punctuation">}</span>
                        <span class="token punctuation">{</span>data<span class="token punctuation">.</span>nextDetails <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>
                            <span class="token operator">&lt;</span>Link
                                className<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>next<span class="token punctuation">}</span>
                                href<span class="token operator">=</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>nextDetails<span class="token punctuation">.</span>href<span class="token punctuation">}</span>
                            <span class="token operator">></span>
                                <span class="token punctuation">{</span>data<span class="token punctuation">.</span>nextDetails<span class="token punctuation">.</span>title<span class="token punctuation">}</span> →
                            <span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>
                        <span class="token punctuation">)</span><span class="token punctuation">}</span>
                    <span class="token operator">&lt;</span><span class="token operator">/</span>section<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>article<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> BlogPostLayout<span class="token punctuation">;</span>
</code></pre><p>值得注意的是，disqusConfig 的设置，其中 url 必须跟步骤 1 中配置的相匹配，而 identifier 只要保证文章之间唯一即可。</p><h2 id="总结">总结</h2><p>mdx和React天生一对，相信在disqus等生态的加持下，会绽放出更强的生命力。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[当velop有线回程遇到了智能家居的那点事]]></title>
            <link>/posts/2019-12-29-velop-rewired</link>
            <guid>/posts/2019-12-29-velop-rewired</guid>
            <content:encoded><![CDATA[<h2 id="设备与概述">设备与概述</h2><p>两台 velop AC2200，可以参考<a href="https://www.acwifi.net/7493.html">此文</a>。</p><h2 id="问题描述">问题描述</h2><p>由于我家有两个交换机（运营商+智能家居）。当初打开弱电箱，看到的一脸懵逼。</p><img src="/static/media/IMG_5572.64ce979d.JPG" style="height:50vh"/><p>左边插满橘色线的就是【智能家居】，右边联调logo的是【运营商】。</p><p>现在存在的问题呢就是红色箭头接出去的线到了我的两个房间（A、B），我把velop部署成有线回程，ok没问题，但就不能访问智能家居控制网关了。(AB的ip均在【运营商】LAN下)</p><p>C房间的网口接了【智能家居】交换机，但如果我把velop部署在AC或者BC(ip在【智能家居】LAN下)，回程就会失败，而无线扩展的化对性能又损失很大且不稳定。</p><h2 id="解决办法">解决办法</h2><p>咨询了相关人员，了解到【智能家居】交换机1–6口随意插的，只有7和8连接智能家居设备因而不能动。</p><p>那问题就很简单了，拔光1–6，把红色箭头的橘色线插入【智能家居】交换机1–6任选2个，搞定。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[用WebRTC构建投屏应用]]></title>
            <link>/posts/2020-06-30-how-to-build-screen-projection-app-with-WebRTC</link>
            <guid>/posts/2020-06-30-how-to-build-screen-projection-app-with-WebRTC</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ol><li>本文背景</li><li>用WebRTC构建屏幕分享应用 </li></ol><p>本文对应的代码<a href="https://github.com/mzvast/how2webrtc">在此</a>。</p><h2 id="本文背景">本文背景</h2><p>首先，本文不是WebRTC零基础教程。记录和分享在编写屏幕分享demo时候遇到的问题。</p><p>代码的master分支是修改自<a href="https://dev.to/michaelneu/i-webrtc-you-building-a-video-chat-in-javascript-2j38">building-a-video-chat-in-javascript</a>，develop分支对协议进行了重构和模块化改进，并增加各种清理能力。</p><h2 id="用webrtc构建屏幕分享应用">用WebRTC构建屏幕分享应用</h2><p>我们的场景是1个教师(A)，1个学生端(B)。老师可以发起投屏，看到学生屏幕内容。</p><p>值得注意的是，webrtc属于点对点双向通信，谁是主叫方本身并不重要。</p><p>【基于交互考量】由于学生端在业务场景下有可能存在抢占的情况，即B在跟A1投屏，此时A2要抢占，为了得知B是否被占用，所以A先试探性的问一下B是不是忙，从而避免无意中抢占正在投屏的设备。因此，我们选择三步走：A试探B（或者抢占通知），B主动（或者断开前一个连接），A确认。</p><p>完整的offer/answer机制如下：</p><ul><li>A 告知 B 要开始投屏了(<code>A --&gt; B</code>)</li><li>B 创建一个RTCPeerConnection对象，使用.createOffer()方法产生一个offer（一个SDP会话描述）</li><li>B 用他的offer调用setLocalDescription()</li><li>B 将offer字符串化，并使用信令机制将其发送给A(<code>A &lt;-- B</code>)</li><li>A用B的offer调用setRemoteDescription()，以便她的RTCPeerConnection知道B的设置。</li><li>A调用createAnswer()，成功的回调是传入一个本地的会话描述：A的answer。</li><li>通过调用setLocalDescription()将其answer设置为本地描述。</li><li>A然后使用信令机制将她的字符串化的answer发回给B(<code>A --&gt; B</code>)。</li><li>B使用setRemoteDescription()将A的应答设置为远程会话描述</li></ul><p>AB还需要交换网路信息，“查找候选人（find candidate）”这个表达是指使用ICE框架查找网络接口和端口的过程。</p><ul><li>A 创建一个RTCPeerConnection对象，绑定handler监听icecandidate事件。</li><li>当A从B那里获得候选消息时，她调用addIceCandidate()，将候选项添加列表中。(<code>A &lt;-- B</code>)</li><li>在handler中，A通过他们的信令通道将字符串化的候选数据发送给B。(<code>A --&gt; B</code>)</li><li>B做类似的处理，调用addIceCandidate()，将候选项添加列表中</li></ul><p>JSEP支持ICE Candidate Trickling，它允许主叫方(caller)在最初的offer之后递增地向被叫方提供候选项（candidates），并使被叫方开始在通话中进行操作并建立连接而不用等所有候选项到达。</p><p>⚠️下图中，左边认为是B，右边是A。（忽略括号中的AB）</p><p><img src="https://miro.medium.com/max/1302/1*HmMdrpVBTP2vYMhrVOdNOw.jpeg" alt="Image for post"/></p><h3 id="对端发现与信令服务器">对端发现与信令服务器</h3><p>可以用任何消息服务实现，比如websocket，mqtt等。</p><h3 id="在信令之后：使用-ice来对付nat和防火墙">在信令之后：使用 ICE来对付NAT和防火墙</h3><p>对于元数据信令，WebRTC应用程序使用中介服务器，但对于实际的媒体和数据流，一旦建立对话的话，RTCPeerConnection就会尝试点对点地直接连接客户端。</p><p>在简单的情况中，每个WebRTC端点都有一个唯一的地址，可以与其他端进行交换以便直接通信。
<img src="https://michaelyou.github.io/img/without_nat.png"/></p><p>实际上大多数设备都是处在一层或者多层NAT之后的，其中有一些包含可以阻挡某些端口和协议的防病毒软件，还有很多设备是在代理和公司防火墙之后的。防火墙和NAT实际上可以由相同的设备实现，比如说家庭WiFi路由器。
<img src="https://michaelyou.github.io/img/nat_real_world.png"/></p><p>WebRTC应用程序可以使用ICE框架来消除实际网络的复杂性。为了实现这一点，你的应用程序必须将 ICE服务器的URL传递给RTCPeerConnection，就像下面所描述的那样。</p><p>ICE试图找到连接对方的最佳途径。它会并行地尝试所有可能性，并选择最有效的选项。 ICE首先尝试使用从设备操作系统和网卡获取的主机地址进行连接；如果不成功的话（对于NAT后面的设备就会失败）， ICE会使用 STUN服务器获取外部地址，如果还是失败的话，则通过 TURN中继服务器路由数据。</p><p>换句话说：</p><ul><li><p>STUN服务器是用来获取外部地址的。</p></li><li><p>TURN服务器是用来在直接连接（点到点）失败的情况下进行中继数据流量的</p></li></ul><p>每个 TURN服务器都支持 STUN： TURN服务器也是一个增加了内置中继功能的 STUN服务器。 ICE还可以应付NAT设置的复杂性：实际上，NAT“打孔”可能不仅仅需要一个公共IP:端口地址。</p><p>STUN 和/或 TURN服务器的URL（可选择地）由iceServers配置对象中的WebRTC应用程序指定，该配置对象是RTCPeerConnection构造函数的第一个参数。对于本项目来说，值看起来是这样的</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">const</span> webrtc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      iceServers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          urls<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"stun:stun.stunprotocol.org"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          url<span class="token punctuation">:</span> <span class="token string">"turn:relay.backups.cz"</span><span class="token punctuation">,</span>
          credential<span class="token punctuation">:</span> <span class="token string">"webrtc"</span><span class="token punctuation">,</span>
          username<span class="token punctuation">:</span> <span class="token string">"webrtc"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          url<span class="token punctuation">:</span> <span class="token string">"turn:relay.backups.cz?transport=tcp"</span><span class="token punctuation">,</span>
          credential<span class="token punctuation">:</span> <span class="token string">"webrtc"</span><span class="token punctuation">,</span>
          username<span class="token punctuation">:</span> <span class="token string">"webrtc"</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>一旦RTCPeerConnection具有该信息， ICE的作用就会自动发生：RTCPeerConnection使用 ICE框架 来计算到对端之间的最佳路径，并根据需要使用 STUN和 TURN服务器。</p><h3 id="stun">STUN</h3><p>NAT给设备提供了一个IP地址以使用专用局域网，但是这个地址不能在外部使用。由于没有公用地址，WebRTC端对端就无法进行通信。而WebRTC使用STUN来解决这个问题。</p><p>STUN服务器位于公共网络上，并且有一个简单的任务：检查传入请求的IP地址（来自运行在NAT后面的应用程序），并将该地址作为响应发送回去。换句话说，应用程序使用 STUN服务器从公共角度发现其IP:端口。这个过程使得WebRTC一端为自己获得一个可公开访问的地址，然后通过信令机制将其传递给另一端以建立直接连接。（实际上不同NAT工作方式都有所不同，可能有多个NAT层，但是原理是一样的）。</p><p>因为 STUN服务器不需要做太多的工作或者记特别多的东西，所以相对低规格的 STUN服务器就可以处理大量的请求。</p><p>根据webrtcstats.com的统计（2013年），大多数WebRTC通话都成功地使用 STUN进行连接，有86%。尽管对于防火墙之后的两端之间的呼叫以及复杂的NAT配置，成功通话量会更少一些。
<img src="https://michaelyou.github.io/img/stun.png"/></p><h3 id="turn">TURN</h3><p>RTCPeerConnection尝试通过UDP建立对等端之间的直接通信。如果失败的话，RTCPeerConnection就会使用TCP进行连接。如果使用TCP还失败的话，可以用 TURN服务器作为后备，在终端之间转发数据。</p><p>重申： TURN用于中继对等端之间的音频/视频/数据流，而不是信令数据。</p><p>TURN服务器具有公共地址，因此即使对等端位于防火墙或代理之后也可以与其他人联系。 TURN服务器有一个概念上来讲简单的任务—中继数据流—但是与 STUN服务器不同的是，他们会消耗大量的带宽。换句话说， TURN服务器需要更加的强大。
<img src="https://michaelyou.github.io/img/turn.png"/></p><p>上图显示了 TURN的作用：单纯的 STUN没有成功建立连接，所以每个对等端还需要使用 TURN服务器。</p><p>关于如何搭建STUN和TURN服务器参见<a href="https://michaelyou.github.io/2018/08/01/%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84WebRTC/">真实世界中的WebRTC：STUN, TURN and signaling</a></p><h2 id="refs">Refs</h2><ul><li><a href="https://dev.to/michaelneu/i-webrtc-you-building-a-video-chat-in-javascript-2j38">building-a-video-chat-in-javascript</a></li><li><a href="https://medium.com/av-transcode/what-is-webrtc-and-how-to-setup-stun-turn-server-for-webrtc-communication-63314728b9d0">what-is-webrtc-and-how-to-setup-stun-turn-server-for-webrtc-communication</a></li><li><a href="https://zhuanlan.zhihu.com/p/75387873">WebRTC：连接建立过程的网络穿透</a></li><li><a href="https://michaelyou.github.io/2018/08/01/%E7%9C%9F%E5%AE%9E%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84WebRTC/">真实世界中的WebRTC：STUN, TURN and signaling</a></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[用hygen代码生成器优化效率]]></title>
            <link>/posts/2020-06-30-hygen</link>
            <guid>/posts/2020-06-30-hygen</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ul><li>为什么要用代码生成器</li><li>hygen如何使用来提高工作效率</li></ul><h2 id="背景">背景</h2><p>最初是因为换了基于create-react-blog的框架，这是一个比较素的框架（相比其他带cli的框架而言），每次写新post需要创建1个文件夹和两个文件，并填充一堆信息，非常繁琐，即使可以复制粘贴。但是，这种创作体验并不理想，让写作的人决定自己的新post是基于旧post改改而来的，体验不纯粹。</p><p>因为创作门槛比原来高，所以创作的热情相对而言更低了。当我站在2020年6月30日回看这半年一篇都没有发表，我着实决定这个事情到了不得不做的地步。不是难，只是懒。我要用一小段的调研和开发，降低创作启动门槛。</p><h2 id="为什么要用代码生成器">为什么要用代码生成器</h2><p>这是一个js工程，有着丰富的node工具链生态，我们可以基于开源的代码生成器，打造属于这个项目的定制代码生成器。<a href="https://github.com/jondot/hygen">hygen</a>就是本文选择的(谷歌query：node cli code generator)。【todo：hygen源码分析】</p><h2 id="我所做的工作">我所做的工作</h2><ol><li>将hygen安装和初始化</li><li>调试编写模板，数据处理</li><li>增加cli交互提示</li><li>整合到npm script</li></ol><p>下面分步介绍</p><h3 id="hygen安装和初始化">hygen安装和初始化</h3><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token function">yarn</span> <span class="token function">add</span> hygen //依赖安装到项目维度
./node_modules/.bin/hygen init self // 在项目中初始化hygen
./node_modules/.bin/hygen generator new post // 创建叫post的generator
</code></pre><h3 id="调试编写模板，数据处理">调试编写模板，数据处理</h3><p>以本工程为例，在_templates/post下新增文件</p><pre><code>_templates
├── generator
│   ├── help
│   │   └── index.ejs.t
│   ├── new
│   │   └── hello.ejs.t
│   └── with-prompt
│       ├── hello.ejs.t
│       └── prompt.ejs.t
└── post
    └── new
        ├── document.ejs.t   /* ADDED */
        ├── post.ejs.t       /* ADDED */
        └── prompt.js        /* ADDED */
</code></pre><p>以<code>post.ejs.t</code>为例，这个文件包含了一个post的元数据，编写如下</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token operator">--</span><span class="token operator">-</span>
to<span class="token punctuation">:</span> src<span class="token operator">/</span>routes<span class="token operator">/</span>posts<span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">%=</span> h<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>inflection<span class="token punctuation">.</span><span class="token function">dasherize</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">/</span>post<span class="token punctuation">.</span>ts
<span class="token operator">--</span><span class="token operator">-</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    title<span class="token punctuation">:</span> <span class="token string">'&lt;%= title%>'</span><span class="token punctuation">,</span>
    tags<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">-</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tags<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token comment">// 进行了序列化和unescape</span>
    spoiler<span class="token punctuation">:</span> <span class="token string">'&lt;%= spoiler%>'</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getContent</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./document.mdx'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><p>这里<code>h.inflection.dasherize</code>用到了内置helper函数来处理文件名，而<code>h.getDate()</code>则是我们扩展的helper函数（定义在项目根目录的.hygen.js文件中），用户获取日期字符串，示例如下：</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token comment">// .hygen.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    helpers<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">getDate</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">let</span> year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> month <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> day <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token comment">// 斜线代表文件夹层级</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>此时我就可以使用如下命令创建post了</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">./node_modules/.bin/hygen post new --title title --spoiler spoiler --tags tag1,tag2
</code></pre><h3 id="增加cli交互提示">增加cli交互提示</h3><p>为了减少用户的记忆点，我们可以采用交互式输入框，这就是prompt.js文件起到的作用了，其中定义了我们需要用户输入的元数据。</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token comment">// _templates/post/new/prompt.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'title'</span><span class="token punctuation">,</span>
        message<span class="token punctuation">:</span> <span class="token string">"What's your post's title?"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'spoiler'</span><span class="token punctuation">,</span>
        message<span class="token punctuation">:</span> <span class="token string">"What's your post's spoiler?"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token string">'input'</span><span class="token punctuation">,</span>
        name<span class="token punctuation">:</span> <span class="token string">'tags'</span><span class="token punctuation">,</span>
        message<span class="token punctuation">:</span> <span class="token string">"What's your post's tags?"</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><h3 id="整合到npm-script">整合到npm script</h3><p>最后，再精简用户的记忆点，将生成器的脚本整合到package.json文件中。</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token punctuation">{</span>
    <span class="token comment">//...</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">//...</span>
    <span class="token property">"create"</span><span class="token operator">:</span> <span class="token string">"hygen post new"</span> <span class="token comment">// ADDED</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="总结">总结</h2><p>整个代码生成器的定制工作的核心出发点就是减少一切记忆点，对用户的干扰和分心减少到最低，使创作者专注于内容创作而不是编写代码。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[theme switch]]></title>
            <link>/posts/2020-07-08-theme-switch</link>
            <guid>/posts/2020-07-08-theme-switch</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ul><li>夜间模式/主题切换</li></ul><h2 id="缘起">缘起</h2><p>之所以想起“夜间模式”这个主题，是因为看到了<a href="https://dev.to/mohammadfarmaan/the-best-way-to-dark-mode-your-website-1g7f?utm_source=digest_mailer&amp;utm_medium=email&amp;utm_campaign=digest_email">这篇文章</a>，而且这个主题已经躺在我的todoList里面很久了。</p><h2 id="n种方式">N种方式</h2><p>我梳理了一下主要有以下几种主题切换方式</p><h3 id="linkhref切换">link.href切换</h3><p>适用场景：没有采用预编译，样式可以通过文件级别隔离。</p><p>例如上面文章中的示例：</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">switchSheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> theme <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"theme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"light-mode.css"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    theme<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"dark-mode.css"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    theme<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">"light-mode.css"</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="styled-components-themeprovider切换">styled-components ThemeProvider切换</h3><p>适用场景：工程基于styled-components，样式采用全局theme值。</p><h3 id="css-var切换">CSS var切换</h3><p>适用场景：基于css module或者SCSS之类，样式可以采用全局定义的css variable，通过切换body的class进行切换。</p><p>以本blog工程的改造为例，示例如下：</p><pre><code class="language-css" data-language="css" data-highlighted-line-numbers=""><span class="token comment">/* index.module.css */</span>
<span class="token selector">:global body.light</span><span class="token punctuation">{</span>
  <span class="token property">--bg</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--textNormal</span><span class="token punctuation">:</span> #222<span class="token punctuation">;</span>
  <span class="token property">--textTitle</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">:global body.dark</span><span class="token punctuation">{</span>
  <span class="token property">--bg</span><span class="token punctuation">:</span> #282c35<span class="token punctuation">;</span>
  <span class="token property">--textNormal</span><span class="token punctuation">:</span> <span class="token function">hsla</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0%<span class="token punctuation">,</span>100%<span class="token punctuation">,</span>0.88<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--textTitle</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">--primary-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 167<span class="token punctuation">,</span> 196<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">:global body</span> <span class="token punctuation">{</span>
<span class="token comment">/* ... */</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--bg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--textNormal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">ThemeService</span> <span class="token punctuation">{</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// app挂载时读取并应用上次的theme</span>
    <span class="token function">syncTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> theme<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 设定theme并持久化</span>
    <span class="token function">setTheme</span><span class="token punctuation">(</span><span class="token parameter">theme</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">,</span> theme<span class="token punctuation">)</span><span class="token punctuation">;</span>
        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">,</span> theme<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 读取定制的theme，给默认值light</span>
    <span class="token function">getTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'theme'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">'light'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">ThemeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[在HTTP headers中传递认证信息的方法分析]]></title>
            <link>/posts/2020-08-28-HTTP-headers</link>
            <guid>/posts/2020-08-28-HTTP-headers</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ol><li>为什么要在 headers 中传递认证信息</li><li>有哪些方案，各自优缺点如何</li></ol><h2 id="为什么要在-headers-中传递认证信息">为什么要在 headers 中传递认证信息</h2><p>可视为独立的一层身份控制机制，后台可以加在某个域的根 controller 下面，根据用户身份“分发”给为不同身份的人设计的不同的子 controller 处理。</p><p>那么 HTTP 报文的 header 中可以加认证信息的地方主要有 cookie 和自定义字段这两种位置了。（不考虑在 query 中带身份信息）</p><p>以下只讨论由客户端写入认证信息的场景。</p><h2 id="cookie-中写入认证信息">Cookie 中写入认证信息</h2><p>众所周知，Cookie 在 Chrome80 后，对三方 Cookie 策略进行了调整。</p><h3 id="名词解释">名词解释</h3><ul><li>First-party cookie<ul><li>匹配用户当前访问站点（浏览器地址栏 URI）的域名 cookie</li><li>如：用户访问 vredu.baidu.com，页面中*.baidu.com 的请求会携带.baidu.com 域下的 cookie，为 first-party cookie</li></ul></li><li>Third-party cookie（第三方 cookie）<ul><li>非 first-party cookie</li><li>如：百度统计（hm.baidu.com）收到的请求，来自于用户访问第三方站点 kuaishou.com 的页面中嵌入的百度统计的链接，此时.baidu.com 域下的 cookie 就是 third-party cookie</li></ul></li></ul><p>本地起 devServer 所代理的域名是 A<code>c.baidu.com</code>
假如开发环境的后台服务器域名是 B<code>a.b.baidu.com</code></p><p>在这种情况下，由请求 B 得到的 token 写入 A 的 cookie。这导致再次请求 B，在非 https 环境下，这次第三方 cookie 传递将会被浏览器阻断。</p><h2 id="在-headers-中携带">在 headers 中携带</h2><p>思路很清晰，把 token 放到 headers 单独成一个字段。但在 umi-request/axios 等网络库中，无论是通过 request.interceptors 或者 extendOptions 都无法请求成功，cookie 会弄丢。</p><p>经过对 XMLHttpRequest 相关请求发起过程的研究，<a href="https://github.com/axios/axios/blob/0d8765562401910c1c509f6739a3bc558721e123/lib/adapters/xhr.js#L125">Axios 源码</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/setRequestHeader">MDN</a>告诉我们，需要服务器指定 Access-Control-Allow-Headers 才可以，否则会在 preflight 阶段被拒绝。</p><pre><code class="language-javascript" data-language="javascript" data-highlighted-line-numbers=""><span class="token comment">// Add headers to the request</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'setRequestHeader'</span> <span class="token keyword">in</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    utils<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>requestHeaders<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
            <span class="token keyword">typeof</span> requestData <span class="token operator">===</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span>
            key<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'content-type'</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Remove Content-Type if data is undefined</span>
            <span class="token keyword">delete</span> requestHeaders<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Otherwise add header to the request</span>
            request<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>后台同学进行了配置之后，请求成功了。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[performance optimize rethink]]></title>
            <link>/posts/2020-08-28-performance-optimize-rethink</link>
            <guid>/posts/2020-08-28-performance-optimize-rethink</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到以下方面的优化思路">你可以从本文了解到以下方面的优化思路</h2><ol><li>图片</li><li>字体</li><li>长列表</li><li>优先加载</li></ol><h2 id="背景">背景</h2><p>在混合 H5 项目 A 中，有一个大量图片的信息流页面，并且需要在多个 Tab 切换。如下图所示（已脱敏）。</p><img src="/static/media/bg.b5fc6c50.png"/><p>存在的问题主要有：</p><ol><li>图片尺寸大，下载慢。非常占用 Android 壳的缓存，约 70–80M。 </li><li>切换 Tab 卡（尤其在长列表间切换的时候） </li><li>自定义字体占据 30M，字体 swap 时间长 </li><li>长列表越往下滑动越卡。</li></ol><h2 id="优化策略">优化策略</h2><h3 id="图片">图片</h3><p>核心：体积控制</p><ol><li>尺寸在看得清的情况下尽可能小(size 够用就行)</li><li>高压缩比格式（quality 能接受就行）</li><li>尽可能少的研发</li></ol><ul><li><p>方案 1 （❌）</p><p>自己压缩全部图片
优点：自主可控
缺点：灵活性差和研发部署成本高</p></li><li><p>方案 2（✅）</p><p>使用第三方图片存储的实时处理能力（<a href="https://cloud.baidu.com/doc/BOS/s/Zk2l2mq0v">百度云 BOS</a>）</p><p>优点：灵活性好和研发部署成本低
缺点：相对低的可控性</p></li><li><p>效果</p><p>加载速度提升 26 倍，体积缩小 95%</p></li><li><p>代码片段</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">import</span> canUseWebP <span class="token keyword">from</span> <span class="token string">'./canUseWebP'</span><span class="token punctuation">;</span>
<span class="token comment">//BOS 图片优化 https://cloud.baidu.com/doc/BOS/s/Zk2l2mq0v</span>

<span class="token comment">// small 350</span>
<span class="token comment">// mid 640</span>
<span class="token comment">// large 1280</span>
<span class="token comment">// size向上靠拢，尽可能应用缓存</span>
<span class="token keyword">const</span> <span class="token function-variable function">getLevelUpSize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">size<span class="token punctuation">:</span> <span class="token builtin">number</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">350</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">350</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;=</span> <span class="token number">640</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">640</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1280</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">getBosPicUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">src<span class="token punctuation">,</span> sizeInPx <span class="token operator">=</span> <span class="token number">Infinity</span><span class="token punctuation">,</span> ImgQuality <span class="token operator">=</span> <span class="token number">50</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isBosPic <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'bcebos'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBosPic<span class="token punctuation">)</span> <span class="token keyword">return</span> src<span class="token punctuation">;</span> <span class="token comment">// 不是bos图，不处理</span>
    <span class="token keyword">const</span> format <span class="token operator">=</span> canUseWebP <span class="token operator">?</span> <span class="token string">'f_webp'</span> <span class="token punctuation">:</span> <span class="token string">'f_jpg'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> dpr <span class="token operator">=</span> window<span class="token punctuation">.</span>devicePixelRatio<span class="token punctuation">;</span>
    <span class="token keyword">const</span> size <span class="token operator">=</span> <span class="token string">'w_'</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">getLevelUpSize</span><span class="token punctuation">(</span>sizeInPx<span class="token punctuation">)</span> <span class="token operator">*</span> dpr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> quality <span class="token operator">=</span> <span class="token string">'q_'</span> <span class="token operator">+</span> ImgQuality<span class="token punctuation">;</span>
    <span class="token comment">// const display = 'd_progressive';</span>
    <span class="token keyword">const</span> command <span class="token operator">=</span> <span class="token punctuation">[</span>size<span class="token punctuation">,</span> format<span class="token punctuation">,</span> quality<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>src<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">@</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>command<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> getBosPicUrl<span class="token punctuation">;</span>
</code></pre></li></ul><h3 id="字体">字体</h3><ul><li><p>痛点</p><p>体积非常大，动辄 30M，卡慢，体验差</p></li><li><p>策略</p><p>Android 壳 cacheWebview 内置字体文件，通过自定义拦截器路径拦截</p></li><li><p>效果</p><p>字体渲染提速 5 倍</p></li><li><p>前端CSS代码片段</p><pre><code class="language-css" data-language="css" data-highlighted-line-numbers=""><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'NotoSansCJKsc-Medium'</span><span class="token punctuation">;</span>
    <span class="token comment">/* src: url('./assets/fonts/NotoSansCJKsc-Medium.otf') format('opentype'); */</span>
    <span class="token property">src</span><span class="token punctuation">:</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token string">'NotoSansCJKsc-Medium'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token string">'Droid Sans Fallback'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>'YOUR_DOMAIN/FILE_NAME'<span class="token punctuation">)</span></span><span class="token punctuation">,</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>'FALLBACK_URL'<span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
    <span class="token property">font-display</span><span class="token punctuation">:</span> swap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></li></ul><h2 id="长列表">长列表</h2><h3 id="虚拟渲染-原理">虚拟渲染-原理</h3><p>只渲染用户视口区域的元素，其他区域仅撑开高度保持滚动条位置准确。</p><img src="/static/media/longlist.c61a41b9.png"/><p>在 React 下面可以采用<a href="https://github.com/bvaughn/react-window">react-window</a>.</p><h4 id="简单看一下react-window核心数据结构">简单看一下react-window核心数据结构</h4><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">type</span> ItemMetadata <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">|</span>
  offset<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token comment">// 当前item距离屏幕顶部的距离</span>
  size<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token comment">// 当前item的高度</span>
<span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 一个window实例的数据结构</span>
<span class="token keyword">type</span> InstanceProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">|</span>
  itemMetadataMap<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> ItemMetadata <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 缓存已计算过的item</span>
  estimatedItemSize<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token comment">// item默认高度</span>
  lastMeasuredIndex<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token comment">// 最后计算的item</span>
<span class="token operator">|</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>render 函数</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Wrap</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AutoSizer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>height<span class="token punctuation">,</span> width<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">VariableSizeList</span></span>
                <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>height<span class="token punctuation">}</span></span>
                <span class="token attr-name">itemCount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rowData<span class="token punctuation">.</span>length<span class="token punctuation">}</span></span>
                <span class="token attr-name">itemSize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getItemSize<span class="token punctuation">}</span></span>
                <span class="token attr-name">itemData</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>rowData<span class="token punctuation">}</span></span>
                <span class="token attr-name">itemKey</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getItemKey<span class="token punctuation">}</span></span>
                <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>width<span class="token punctuation">}</span></span>
                <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>listEl <span class="token operator">=</span> node<span class="token punctuation">)</span><span class="token punctuation">}</span></span>
                <span class="token attr-name">onScroll</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>onScroll<span class="token punctuation">}</span></span>
            <span class="token punctuation">></span></span><span class="token plain-text">
                </span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>renderRow<span class="token punctuation">}</span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">VariableSizeList</span></span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">AutoSizer</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollToTop</span></span>
        <span class="token attr-name">onoff</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>isRrocketShow<span class="token punctuation">}</span></span>
        <span class="token attr-name">scrollCB</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>hideRocket<span class="token punctuation">}</span></span>
        <span class="token attr-name">target</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>listEl<span class="token punctuation">}</span></span>
    <span class="token punctuation">/></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Wrap</span></span><span class="token punctuation">></span></span>
</code></pre><h4 id="我们需要提供的数据">我们需要提供的数据</h4><ol><li>itemData（列表全数据）</li><li>滚动事件（一方面组件内部使用），控制回到顶部小火箭的显隐。</li><li>itemKey 方法，确定每个元素在 list 中唯一的标识符号（react 渲染用）</li><li>itemSize 方法，获取每个元素的 height
基于这些，虚拟渲染组件会合成一个 itemMetadataMap.</li></ol><h4 id="从-list-到-gird">从 List 到 Gird</h4><p>业务需要对内容定制。一个是横高度不固定，底部会有菊花。所以对内容的类型进行了分类。</p><pre><code>Array：一行卡片。其中每个卡片的类型是FEED_ITEM，4个一行，计算生成。
FEED_SUBJECT：XX标题
TOP_MARGIN：顶部占位块（纯布局用）
FEED_LOADER：底部更多菊花
</code></pre><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// list数据模型的生成</span>
<span class="token function-variable function">getRowData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>activeKey<span class="token punctuation">,</span> tabsData<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> tabsData<span class="token punctuation">[</span>activeKey<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rowData <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    rowData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        type<span class="token punctuation">:</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">TOP_MARGIN</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> item <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>
            i <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>
            list<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>teachingMetadata<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'subject'</span><span class="token punctuation">]</span> <span class="token operator">!==</span>
                item<span class="token punctuation">.</span>teachingMetadata<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'subject'</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            rowData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                type<span class="token punctuation">:</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_SUBJECT</span><span class="token punctuation">,</span>
                text<span class="token punctuation">:</span> item<span class="token punctuation">.</span>teachingMetadata<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                isFirstSubject<span class="token punctuation">:</span> i <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> last <span class="token operator">=</span> rowData<span class="token punctuation">[</span>rowData<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>last <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">&amp;&amp;</span> last<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            last<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                type<span class="token punctuation">:</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_ITEM</span><span class="token punctuation">,</span>
                <span class="token operator">...</span>item<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            rowData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
                <span class="token punctuation">{</span>
                    type<span class="token punctuation">:</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_ITEM</span><span class="token punctuation">,</span>
                    <span class="token operator">...</span>item<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFeedLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rowData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            type<span class="token punctuation">:</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_LOADER</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> rowData<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 渲染某一行</span>
renderRow <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>data<span class="token punctuation">,</span> index<span class="token punctuation">,</span> style<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// const rowData = this.rowData; //this.getRowData();</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'renderRow::item'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_SUBJECT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token comment">//    ...</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">TOP_MARGIN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token comment">//    ...</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_LOADER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token comment">// 菊花</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>style<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">
                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FeedLoader</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FeedLoader</span></span><span class="token punctuation">></span></span><span class="token plain-text"> 
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 计算行高</span>
<span class="token function-variable function">getItemSize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> row <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rowData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">16.44</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">[</span><span class="token string">'remBase'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_SUBJECT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2.75</span> <span class="token operator">+</span> <span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> window<span class="token punctuation">[</span><span class="token string">'remBase'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">TOP_MARGIN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1.5</span> <span class="token operator">*</span> window<span class="token punctuation">[</span><span class="token string">'remBase'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token constant">ELEMENT_TYPES</span><span class="token punctuation">.</span><span class="token constant">FEED_LOADER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">4.4</span> <span class="token operator">*</span> window<span class="token punctuation">[</span><span class="token string">'remBase'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h4 id="菊花组件">菊花组件</h4><p>由于虚拟渲染天生基于观察者模式，因此菊花可以在 didMount 时候发起网络请求。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">class</span> <span class="token class-name">FeedLoader</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span><span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> State<span class="token operator">></span> <span class="token punctuation">{</span>
    state<span class="token punctuation">:</span> State<span class="token punctuation">;</span>

    <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BottomLoading</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'FeedLoader fetching data::'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">loadMore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        HomeControl<span class="token punctuation">.</span><span class="token function">loadMore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发起网络请求</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> FeedLoader<span class="token punctuation">;</span>
</code></pre><p>但这样做存在一个问题，在顺序加载过一次list项目之后，菊花的行高会被缓存在itemMetadataMap（offset，size）中。这使得我们后来数据到达之后将菊花替换成feeditem之后所占用的行高没有改变，造成样式重叠。 </p><p>具体可以通过研究源码得知整个渲染的顺序如下：</p><ol><li>GetRowData：获取list数据</li><li>GetItemSize：预分配行高（立即缓存）</li><li>RenderRow：渲染行元素</li></ol><p>因此，我们可以在新数据插入之后，重置菊花位置的高度</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">this</span><span class="token punctuation">.</span>listEl<span class="token punctuation">.</span><span class="token function">resetAfterIndex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>rowData<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="优先加载">优先加载</h2><h3 id="问题描述">问题描述</h3><p>浏览器并发连接数限制，在正常顺序加载的模式下，用户可能滑动了一屏，会等很久才刷出图，造成用户体验较差。</p><h3 id="方案原理">方案原理</h3><p>1.用户看到图片占位图，开始加载。 </p><p>2.图片还没加载完，就超出可见区域，抛弃。</p><h3 id="如何正确抛弃">如何正确抛弃</h3><p>1.一个图片在 set 了 src 之后，一旦开始，则无法结束（即使是将图片从 DOM 中移除，网络连接也并不会立刻断开）。
需要更为激进的策略，即将图片的 src 置空，从而抛弃未完成加载的图片。 </p><p>2.可见性管理+图片加载的生命周期管理</p><p>由于懒加载组件用了 react-lazy-load-image-component，然后在 Github 上有同学提了功能需求的<a href="https://github.com/Aljullu/react-lazy-load-image-component/issues/76">issue</a>，然后我<a href="https://github.com/mzvast/react-lazy-load-image-component/commit/870fa9abd9219b670d7e70fe60a1d86c02115107">魔改了一下</a></p><h3 id="还可以改进的地方">还可以改进的地方</h3><p>可以知道，react-window中渲染过的元素进行过一次高度计算后，就会缓存，所以在window进行resize的时候，需要重新计算高度。因为产品场景没有这方面需求，所以没做，但从理论上是有考虑的。</p><h2 id="总结">总结</h2><h3 id="对于问题">对于问题</h3><ul><li>搞清楚问题是什么</li><li>分清楚主要问题和次要问题</li><li>问题的主要方面和次要方面</li></ul><h3 id="对于某个具体技术">对于某个具体技术</h3><ul><li>掌握原理（文档/源码）</li><li>搞清数据结构关系</li><li>优先使用第三方/开源产品</li><li><strong><em>自己的贡献</em></strong></li></ul>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[多个标签页之间通信方案-以统一登出为例]]></title>
            <link>/posts/2020-09-04-tab-communication-topic</link>
            <guid>/posts/2020-09-04-tab-communication-topic</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ol><li>工作中实际需求的举例</li><li>浏览器多标签通信的几种方法及其适用场景</li></ol><h2 id="工作中实际需求的举例">工作中实际需求的举例</h2><p>前置条件：有一个管理系统，tab1、tab2 都登录了账户 user1。
功能：登出其中 tab1 的账户，tab2 需要自动登出。
思路：tab 之间建立 eventBus 之类的消息总线，进行广播。</p><h2 id="浏览器多标签通信的几种方法及其适用场景">浏览器多标签通信的几种方法及其适用场景</h2><p><a href="https://juejin.im/post/6844903589924569101">这篇文章</a>提到，分为三种：</p><ol><li>websocket</li><li>SharedWorker</li><li>localstorage</li></ol><h3 id="websocket">websocket</h3><p><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">websocket</a>是全双工通信，客户端和服务端处于平等地位，任意一方都可以主动发起连接。</p><p>用这种方式实现 tab 间通信是用订阅广播机制，但需要一个 websocket 服务器（❌）。
大致示意如下：</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">var</span> ws <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'wss://echo.websocket.org'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connection open ...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'everyone-logout'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received Message: '</span> <span class="token operator">+</span> evt<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>evt<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">'everyone-logout'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do something</span>
    <span class="token punctuation">}</span>
    ws<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

ws<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Connection closed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h3 id="sharedworker">SharedWorker</h3><p>它是 webWorker 的一种，特殊之处是具有全局作用域, SharedWorkerGlobalScope。要使 SharedWorker 连接到多个不同的页面，这些页面必须是同源的（相同的协议、host 以及端口）。此方案不需要服务器，但不支持IE。</p><p>我对 MDN 这个<a href="https://github.com/mdn/simple-shared-worker">例子</a>进行了魔改，实现了广播通知的功能。</p><p>Tips: 要调试 worker，可以在 chrome 的 inspect 面板中进行，在 source 中可以对代码进行断点调试。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// worker.js</span>
<span class="token keyword">let</span> ports <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 连接池</span>
<span class="token function-variable function">onconnect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> port <span class="token operator">=</span> e<span class="token punctuation">.</span>ports<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ports<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 入池</span>
    port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> workerResult <span class="token operator">=</span> <span class="token string">'everyone-logout'</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> p <span class="token keyword">of</span> ports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">===</span> port<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 当前tab要不要收到</span>
            p<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span>workerResult<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 通知其他tab</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// 前台js</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>window<span class="token punctuation">.</span>SharedWorker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> myWorker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SharedWorker</span><span class="token punctuation">(</span><span class="token string">"worker.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  myWorker<span class="token punctuation">.</span>port<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Message received from worker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token operator">===</span><span class="token string">'everyone-logout'</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// do something</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>实验效果如下图：</p><img src="/static/media/snapshot-1.c63d8197.png"/><h3 id="storage">storage</h3><p>window上有一个onstorage事件可以监听storage变化，当前页面可以监听到localStorage和sessionStorage的onstorage事件，但是跨tab间只能传播localStorage的onstorage事件（这一点可以通过实验验证）。</p><p>但是问题来了，这个事件如何传播消息呢？</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// 实现一个一次性消息广播工具</span>
<span class="token comment">// messageBroadcast.ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">messageBroadcast</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> messageBroadcast <span class="token keyword">from</span> <span class="token string">'@/utils/messageBroadcast'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>logout<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/utils/logout'</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">LogoutGuard</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">subscribeLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">subscribeLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        window<span class="token punctuation">.</span><span class="token function-variable function">onstorage</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">:</span> StorageEvent</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token string">'message'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 指定消息频道</span>
                <span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>message<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 不关注message删除，只关注新增</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>cmd <span class="token operator">&amp;&amp;</span> message<span class="token punctuation">.</span>cmd <span class="token operator">===</span> <span class="token string">'logout'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">notifyLogout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">messageBroadcast</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            cmd<span class="token punctuation">:</span> <span class="token string">'logout'</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">LogoutGuard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>可以发现这种方式只能说是比较粗糙，如果考虑并发，健壮性是不如上面两种方法的（在工具部分要考虑实现队列依次发送消息）。但对于实现统一登出这种场景是足够的。毕竟只要发出一个，就不再需要这个订阅了，任务完成！</p><h2 id="总结">总结</h2><p>在实际业务中，我选用了第三种方法。简单粗暴，直接有效。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[从Omni Automation Plugin开发谈时间管理]]></title>
            <link>/posts/2020-09-05-omni-automation</link>
            <guid>/posts/2020-09-05-omni-automation</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ul><li>什么是Omni Automation</li><li>我的GTD策略</li><li>如何编写plugin帮我改进工作流</li></ul><h2 id="什么是omni-automation">什么是Omni Automation</h2><p>之前OmniFocus更新notes里面就有提到automation，一直没有尝试，对AppleScript编写的脚本不感兴趣。</p><p>直到 <a href="https://sspai.com/post/61126">sspai的这篇文章</a>的出现，我意识到这次不一样！</p><p>简单点说，就是现在可以用<code>JavaScript</code>编写插件，去操作omnifocus里面的数据啦。</p><p>那具体怎么写插件呢？有没有别人写好分享出来的呢？<a href="https://omni-automation.com/omnifocus/actions.html">有！在这</a>你可以尝试下载别的开发者编写的plugin安装到本地使用。</p><h2 id="我的gtd策略">我的GTD策略</h2><p><code>收集=&gt;贴标签分类归集=&gt;定期review=&gt;complete</code></p><ol><li>把task收集记录</li><li>贴上各种维度的标签</li><li>定期review，安排today task</li><li>complete</li></ol><p>收集、贴标签、做任务这3块没什么好说的，最复杂的是review，我有几个review机制，下面介绍2个常用的Review：</p><ol><li><p>Morning Review</p><pre><code>清空 Spark Inbox 
清空 OmniFocus Inbox
查看ThisWeek标签，标注Today // 重要
查看Recently标签，标注Today // 重要
查看Today 透视，标注完成时间节点 // 重要
</code></pre></li><li><p>Weekly Review</p><pre><code>写周报
查看ThisMonth标签，标注下周任务
</code></pre></li></ol><p>这是一种<code>从远到近，逐步明确</code>的时间管理策略。</p><p>在这两个Review的过程中，关于时间的标签会发生流转。</p><img src="/static/media/s1.68dfc845.png" style="width:200px"/><p>如图所示，我设计了一套跟时间有关的标签。</p><p>大致与时间的对应关系如下：</p><pre><code>TagName     def
Today:      // &lt;today
ThisWeek:   // 1~7day
Recently:   // 7day~15day 试运行
ThisMonth:  // 15～30day
Someday:    // &gt;30day
</code></pre><p>在weekly review的时候把它们从ThisMonth调整到ThisWeek。</p><p>在morning review的时候把部分ThisWeek调整到Today，并写上一个当日截止时间。</p><h3 id="自动化可行性分析">自动化可行性分析</h3><ol><li><p>没有截止日期的task。这种task的tag转变靠的是人的主观判断力，并不能自动化。</p></li><li><p>有截止日期的task。可以通过自动化脚本从截止日期来同步更新tag。</p></li></ol><h2 id="开发过程">开发过程</h2><img src="/static/media/s3.8c07d60c.png" style="height:200px"/><p>首先创建一个插件，选择保存在icloud，这样就可以在Mac和iOS设备间无缝同步了。</p><p>开发过程中我们可以打开控制台看log。</p><img src="/static/media/s4.f35be613.png" style="height:400px"/><p>还有API文档可以参考（基本上开发就靠consolelog+API文档+参考别人的demo）</p><img src="/static/media/s5.a10ec4a6.png"/><p>最后我写了这么一个插件。支持选择task，也支持选择tag。</p><p>代码在此<a href="https://github.com/mzvast/omnijs/blob/master/dueDate2Tag.omnijs">omnijs</a></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">/*{
    "author": "Author Name",
    "targets": ["omnifocus"],
    "type": "action",
    "identifier": "com.mycompany.dueDate2Tag",
    "version": "0.1",
    "description": "A plug-in that...",
    "label": "截止日期更新标签",
    "mediumLabel": "dueDate2Tag",
    "paletteLabel": "dueDate2Tag",
}*/</span>
<span class="token comment">// 根据截止日期更新标签</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PlugIn<span class="token punctuation">.</span>Action</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">selection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'selection'</span><span class="token punctuation">,</span> selection<span class="token punctuation">.</span>tasks<span class="token punctuation">,</span> selection<span class="token punctuation">.</span>tags<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>selection<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> selection<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Add code to run when the action is invoked</span>
        <span class="token comment">// console.log("Invoked with selection", selection);</span>
        <span class="token comment">// 获取tag对象</span>
        <span class="token keyword">function</span> <span class="token function">getTagByName</span><span class="token punctuation">(</span><span class="token parameter">tagName<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// console.log('source', source, source.name === tagName)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>source<span class="token punctuation">.</span>name <span class="token operator">===</span> tagName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> source<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">let</span> children <span class="token operator">=</span> source <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> source <span class="token punctuation">:</span> source<span class="token punctuation">.</span>children <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> source<span class="token punctuation">.</span>children <span class="token punctuation">:</span> <span class="token keyword">null</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> len <span class="token operator">=</span> children<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
                <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">let</span> cur <span class="token operator">=</span> <span class="token function">getTagByName</span><span class="token punctuation">(</span>tagName<span class="token punctuation">,</span> children<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        result <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> result
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">isInDays</span><span class="token punctuation">(</span><span class="token parameter">date<span class="token punctuation">,</span> daysFromNow</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            now<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> daysFromNow<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">isInToday</span><span class="token punctuation">(</span><span class="token parameter">date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            now<span class="token punctuation">.</span><span class="token function">setHours</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">function</span> <span class="token function">hasTag</span><span class="token punctuation">(</span><span class="token parameter">task<span class="token punctuation">,</span> tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> task<span class="token punctuation">.</span>tags<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 更新tag</span>
        <span class="token keyword">function</span> <span class="token function">ToggleOnSchedueTag</span><span class="token punctuation">(</span><span class="token parameter">task<span class="token punctuation">,</span> tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            task<span class="token punctuation">.</span><span class="token function">removeTags</span><span class="token punctuation">(</span>schedueTags<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">t</span> <span class="token operator">=></span> t <span class="token operator">!==</span> tag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            task<span class="token punctuation">.</span><span class="token function">addTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">let</span> Tags <span class="token operator">=</span> <span class="token punctuation">{</span>
            Today<span class="token punctuation">:</span> <span class="token function">getTagByName</span><span class="token punctuation">(</span><span class="token string">'Today'</span><span class="token punctuation">,</span> tags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// &lt;today</span>
            ThisWeek<span class="token punctuation">:</span> <span class="token function">getTagByName</span><span class="token punctuation">(</span><span class="token string">'ThisWeek'</span><span class="token punctuation">,</span> tags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 1~7day</span>
            Recently<span class="token punctuation">:</span> <span class="token function">getTagByName</span><span class="token punctuation">(</span><span class="token string">'Recently'</span><span class="token punctuation">,</span> tags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//7day~15day 试运行</span>
            ThisMonth<span class="token punctuation">:</span> <span class="token function">getTagByName</span><span class="token punctuation">(</span><span class="token string">'ThisMonth'</span><span class="token punctuation">,</span> tags<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//15～30day</span>
            Someday<span class="token punctuation">:</span> <span class="token function">getTagByName</span><span class="token punctuation">(</span><span class="token string">'Someday'</span><span class="token punctuation">,</span> tags<span class="token punctuation">)</span><span class="token comment">//>30day</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> schedueTags <span class="token operator">=</span> <span class="token punctuation">[</span>Tags<span class="token punctuation">.</span>Today<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>ThisWeek<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>Recently<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>ThisMonth<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>Someday<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> tasks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>selection<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 选中tasks</span>
                tasks <span class="token operator">=</span> selection<span class="token punctuation">.</span>tasks
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selection<span class="token punctuation">.</span>tags<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 选中tags</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> tag <span class="token keyword">of</span> selection<span class="token punctuation">.</span>tags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    
                    tasks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>tag<span class="token punctuation">.</span>tasks<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'tasks'</span><span class="token punctuation">,</span> tasks<span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> task <span class="token keyword">of</span> tasks<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> dueDate <span class="token operator">=</span> task<span class="token punctuation">.</span>dueDate<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>dueDate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInToday</span><span class="token punctuation">(</span>dueDate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">ToggleOnSchedueTag</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>Today<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInDays</span><span class="token punctuation">(</span>dueDate<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">ToggleOnSchedueTag</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>ThisWeek<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInDays</span><span class="token punctuation">(</span>dueDate<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">ToggleOnSchedueTag</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>Recently<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInDays</span><span class="token punctuation">(</span>dueDate<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">ToggleOnSchedueTag</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>ThisMonth<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token function">ToggleOnSchedueTag</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> Tags<span class="token punctuation">.</span>Someday<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// If needed, uncomment, and add a function that returns true if the current selection is appropriate for the action.</span>
    <span class="token comment">/*
    action.validate = function(selection){

    };
    */</span>

    <span class="token keyword">return</span> action<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="功能验证">功能验证</h3><p>before</p><img src="/static/media/s2.80bd9835.png" style="height:200px"/><p>After</p><img src="/static/media/s6.dfcd1966.png" style="height:200px"/><h2 id="总结">总结</h2><p>Omini automation选择JavaScript是一个重大的选择，这将极大的赋能开发者，期待developers创造新的奇迹～</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[多巴胺vs内啡肽]]></title>
            <link>/posts/2020-09-22-2200-vs</link>
            <guid>/posts/2020-09-22-2200-vs</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ul><li><p>1.多巴胺和内啡肽的区别</p></li><li><p>2.如何提高多巴胺水平</p></li><li><p>3.如何提高内啡肽水平</p></li><li><p>4.总结</p></li></ul><h2 id="目的">目的</h2><p>本篇是在研究抖音、游戏等 App 为什么会给人带来快感进行研究时搜集到的一些信息。试图从神经递质层面探索这些 App 对人脑的改变。</p><h2 id="1多巴胺和内啡肽的区别">1.多巴胺和内啡肽的区别</h2><p>这两种都是化学物质。</p><h3 id="11-多巴胺与快感">1.1 多巴胺与快感</h3><ul><li><p>多巴胺是大脑自然分泌的神经递质，会让人感到欣快，因为它是大脑的奖励系统。在做令人愉快的活动时，比如做爱或享受美食，大脑就会分泌大量的多巴胺。你可以调整饮食和生活方式，确保大脑分泌充足的多巴胺。药物也会影响多巴胺水平。</p></li><li><p>有研究表明多巴胺奖赏通路的本质是奖赏，而不是快乐。</p><blockquote><p>奖赏是什么？奖赏就是你做了一次后，你会想做第二次。一般来说，我们获得奖赏都是有实质性的反馈的，比如一个苹果，那么这个苹果的味道和触感等等物理性质信息在转换为神经信息后与奖赏系统相勾连，产生了突触可塑性的变化，你就知道苹果是好吃的而去吃苹果。</p></blockquote></li><li><p>多巴胺的副作用：成瘾的痛苦。即使是在使用成瘾源时，它也只给你饥渴感，却不给你满足感。或者说，它让你产生的饥渴感远大于满足感。</p></li></ul><h3 id="12-内啡肽与成就感">1.2 内啡肽与成就感</h3><ul><li><p>内啡肽被誉为人体的天然鸦片，能缓解压力，增强愉悦感。大家都知道运动能刺激大脑释放内啡肽，让人感到快乐，甚至是狂喜。但是，并非只有运动才能刺激内啡肽分泌。笑、吃特定的食物甚至是聊八卦，都能达到同样的目的。我们可以使用许多方法释放内啡肽，让生活中的烦恼消失。</p></li><li><p>内啡肽类似于是成就感，内心宁静。内腓肽可以帮助人保持年轻快乐的状态，所以内腓肽也被称之为“快感荷尔蒙”或者“年轻荷尔蒙”。</p><blockquote><p>诺贝尔奖金获得者罗杰．吉尔曼发现，人体产生内啡肽最多的区域以及内啡肽受体最集中的区域，居然就是学习和记忆的相关区域，因此内啡肽可以提高学习成绩，加深记忆。腓肽能够调整不良情绪，调动神经内分泌系统，提高免疫力，缓解疼痛。内腓肽的激发下，人能顺利入梦，消除失眠症，并使人的身心处于轻松愉悦的状态中，让免疫系统实力得以强化。</p></blockquote></li><li><p>内腓肽可以对抗疼痛、振奋精神、缓解抑郁;还能让我们可以抵抗哀伤，创造力勃发，提高工作效率等等; 充满爱心和光明感，积极向上，愿意和周围的人交流勾通。</p></li></ul><h2 id="2-如何增加多巴胺的分泌">2 如何增加多巴胺的分泌</h2><h3 id="21-通过饮食增加多巴胺">2.1 通过饮食增加多巴胺</h3><ul><li><p>吃富含酪氨酸的食物</p></li><li><p>吃高蛋白食物获取每日所需的苯丙氨酸</p></li><li><p>摄取咖啡因</p></li></ul><h3 id="22-改变生活方式">2.2 改变生活方式</h3><ul><li><p>设定目标，并在实现它们后奖励自己</p></li><li><p>多晒太阳，提高多巴胺敏感性</p></li><li><p>想要大脑分泌多巴胺时，可以试着冥想</p></li><li><p>学会感恩和感激</p></li></ul><h3 id="22-使用药物和补充剂">2.2 使用药物和补充剂</h3><ul><li><p>服用左旋多巴增加脑内的多巴胺</p></li><li><p>和医生讨论使用多巴胺受体激动剂增加多巴胺受体</p></li><li><p>尝试服用藜豆补充剂</p></li><li><p>考虑服用红景天补充剂</p></li></ul><h2 id="3-如何增加内啡肽的分泌">3 如何增加内啡肽的分泌</h2><h3 id="31-通过食物释放内啡肽">3.1 通过食物释放内啡肽</h3><ul><li><p>咬一口巧克力</p></li><li><p>吃辣椒</p></li><li><p>吃一些能给人安慰的食物</p></li><li><p>服用人参</p></li><li><p>闻香草精</p></li></ul><h3 id="32-通过社交活动释放内啡肽">3.2 通过社交活动释放内啡肽</h3><ul><li><p>寻找更多理由让自己大笑</p></li><li><p>微笑，但必须是发自内心的微笑</p></li><li><p>聊八卦</p></li><li><p>敞开心扉去爱</p></li><li><p>多做爱</p></li></ul><h3 id="33-通过运动释放内啡肽">3.3 通过运动释放内啡肽</h3><ul><li><p>做任何类型的运动</p></li><li><p>尝试参加团体运动班</p></li><li><p>进行冒险运动</p></li></ul><h2 id="4-总结">4 总结</h2><p>多巴胺给人的是饥渴，内啡肽给人的是成就感。后者更难获得，但更有意义。我们应当“吃辣”、“吃巧克力”、“参与社交活动”、“爱”、“笑”、“参加各自运动”。</p><p>只要获得了足够的内啡肽，就可以走出自闭！</p><h1 id="references">References</h1><p><a href="https://zh.wikihow.com/%E5%A2%9E%E5%8A%A0%E5%A4%9A%E5%B7%B4%E8%83%BA%E7%9A%84%E5%88%86%E6%B3%8C">增加多巴胺的分泌</a></p><p><a href="https://zh.wikihow.com/%E9%87%8A%E6%94%BE%E5%86%85%E5%95%A1%E8%82%BD">释放内啡肽</a></p><p><a href="https://zhuanlan.zhihu.com/p/24697188">从快感到成就感：多巴胺 vs 内啡肽</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Why does academic qualification depreciate]]></title>
            <link>/posts/2020-09-22-2236-Why-does-academic-qualification-depreciate</link>
            <guid>/posts/2020-09-22-2236-Why-does-academic-qualification-depreciate</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ul><li><p>为什么学历在贬值</p></li><li><p>怎么做保持竞争力</p></li></ul><h2 id="为什么学历在贬值">为什么学历在贬值</h2><p>首先，这个话题起因是听了罗胖的<a href="https://m.igetget.com/share/course/article?id=g258WANERjwQJDzBApKbOMG1rZqkPl">学历为什么会贬值</a>这期节目。</p><p>节目中每一部分有一个观点，大致如下：</p><ul><li><p>学历在“通胀”，高学历的人越来越多，但不能认为知识无用。</p><blockquote><p>哈佛大学前校长德里克·博克曾说过一句名言：&quot;If you think education is expensive, try ignorance!&quot;——如果你认为教育的成本太高，试试看无知的代价。</p></blockquote></li><li><p>不是教育没有用，而是教育在传统学校之外，正在以全新的方式展开。</p></li><li><p>不同行业有不同的“信任”发行机制，与传统教育玩的不是同一套。（厨师、美发、美容等）</p></li><li><p>改革开放给中国带来了最重要的是知识。</p></li><li><p>人的“再生产”：指一个人可以被无数次、无穷尽地重新塑造。这个过程非常重要。</p></li><li><p>我们不能不坦率地承认——被周边的人裹挟在成年之后，自我教育，就是不断主动地把自己放到“被迫”关系中的过程。在学校的时候，不用说了。分数压力、校规校纪、老师、学霸，裹挟着我们。在成年之后，自我教育，就是不断主动地把自己放到“被迫”关系中的过程</p><blockquote><p>正如阿兰·德波顿所说：“生活就是用一种焦虑代替另一种焦虑，用一种欲望代替另一种欲望的过程。”</p></blockquote></li><li><p>国际学校是不错，但是有两个缺陷。</p><ul><li>第一，外国老师不是扎根在中国的教育家，而是职业经理人，经常换。孩子很难和一批老师建立比较长时间的相伴成长的关系。</li><li>第二，校长、老师往往是白人。长大之后，自我身份认同也许会出问题</li></ul></li><li><p>给孩子汇报工作。如果一件事，你觉得自己的观点有点模棱两可，而你又想搞清楚自己的想法，那怎么办呢？好办，你就想想该怎么对自己的孩子说，就很清楚了</p></li></ul><h2 id="怎么做保持竞争力">怎么做保持竞争力</h2><p>以下内容主要是受到辉哥的这两篇文章思想的影响
首先是<a href="https://mp.weixin.qq.com/s/BNlbJjT3dEmRYvoQpeQpyg">驾驭「时光机器」，成为长期主义者</a>。</p><ul><li><p>孙正义的「时间机器」理论。</p><blockquote><p>因为他笃定在先进国家发生的事情会迟早发生在落后国家。这种投资理论让孙正义仿佛坐上了时间机器。</p></blockquote></li><li><p><strong>选择会代替竞争，确定性会战胜不确定性</strong>。</p><blockquote><p>人生要事，尽可能在高维度解决低维度的问题，因为在低维度解决低维度问题，你能用的武器只有「努力」，你还得面对更多竞争，<strong>努力+竞争 = 辛苦</strong>。</p></blockquote></li><li><p>辉哥把架构师定义为<code>用系统思维解决复杂难题的人</code>，如果你希望成为这样的人，那么你就应该把「架构师」作为自己的职业目标。</p></li></ul><p>然后是<a href="https://mp.weixin.qq.com/s/bDFmCu9qGcAwuY8EsmW_xw">怎样突破职场天花板？</a>。</p><ul><li><p>我在招人的时候特别在意「背景」<strong>背景 = 你在哪里 + 你做过什么</strong>。这两件事基本上决定了你能力的天花板.此外还有一个更为隐蔽、但也更为重要的因素<strong>「你和谁一起共事过」</strong>。</p><ul><li><p>任正非曾经提到过一个观点，大意是中国的公司能培养出很好的工程师，也有很多努力的员工，但就是缺少有系统思维的人，也缺少顶级的架构师。所以顶级的架构师，一般都需要从国外知名通讯科技公司招聘。</p></li><li><p>中国绝大部分公司都在做具体的、应用级的事情，而缺少系统级的事情。所以，当时的中国企业土壤无法培养出顶级架构师。</p></li><li><p>当然，最近十来年，随着互联网和智能手机的飞速发展，中国本土的科技企业业务复杂度急剧提升，逐步具备了产生「架构师」的土壤。所以一个人若想成为架构师，必须想办法进入相关科技企业。除此之外，没有别的路径。</p></li></ul></li><li><p>其实职业生涯就是做选择，选择在什么时间，进入哪家企业，即<strong>「在适当的时候，跳上合适的船」</strong>。</p></li></ul><h2 id="最后，自己的思考和计划">最后，自己的思考和计划</h2><p>无论如何，学习都是提升自己认知和竞争力的必经之路。努力让自己到更高的角度去看世界，看更多的好书。</p><p>为了更好的消化和理解，必须进行写作和梳理总结。以输出带动输入。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[从React.FC作为切入，谈谈学习在React中用TypeScript]]></title>
            <link>/posts/2020-09-22-2332-react-fc</link>
            <guid>/posts/2020-09-22-2332-react-fc</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ul><li>React.FC 是什么？和normal functions type 的区别是什么？</li><li>如何学习在React中使用TypeScript？</li></ul><h2 id="reactfc-vs-normal-functions-type">React.FC vs normal functions type</h2><h3 id="1-reactfc-始终隐含可以传入-children">1 React.FC 始终隐含可以传入 children</h3><p>React.FC等价于React.FunctionComponent。</p><p>从这一点日常便利性上看，React.FC优于normal functions type。</p><p>以下FC代码，一切正常，允许传入children</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="highlighted-line"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span></span><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> GreetingProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="highlighted-line"><span class="token keyword">export</span> <span class="token keyword">const</span> Greeting<span class="token punctuation">:</span><span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">GreetingProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = ({ name }) => </span><span class="token punctuation">{</span></span><span class="highlighted-line">  <span class="token comment">// name is string!</span></span><span class="highlighted-line">  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="highlighted-line"><span class="token punctuation">}</span><span class="token plain-text">;</span></span><span class="token plain-text">// use it in the app</span>
<span class="token plain-text">const App = () => </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Stefan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token string">"I can set this element but it doesn't do anything"</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Greeting</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">render(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">, document.getElementById("root"));</span>
<span class="token plain-text"></span></code></pre><p>但下面这样写就要出现错误提示了。</p><p><code>Type &#x27;{ children: Element; name: string; }&#x27; is not assignable to type &#x27;IntrinsicAttributes &amp; GreetingProps&#x27;.
  Property &#x27;children&#x27; does not exist on type &#x27;IntrinsicAttributes &amp; GreetingProps&#x27;.(2322)</code></p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> GreetingProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">:</span> GreetingProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token punctuation">}</span>

<span class="token comment">// use it in the app</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Stefan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span><span class="token comment">/* throws errors at me! 💥*/</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token string">"I can set this element but it doesn't do anything"</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Greeting</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>我们得做一些扩展，如下WithChildren部分，通过运算，并上了children属性。</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> WithChildren<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">></span> <span class="token operator">=</span> 
  <span class="token constant">T</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> children<span class="token operator">?</span><span class="token punctuation">:</span> React<span class="token punctuation">.</span>ReactNode <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> GreetingProps <span class="token operator">=</span> WithChildren<span class="token operator">&lt;</span><span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token operator">></span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Greeting</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">:</span> GreetingProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token punctuation">}</span>

<span class="token comment">// use it in the app</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Stefan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token string">"I can set this element but it doesn't do anything"</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Greeting</span></span><span class="token punctuation">></span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span>
<span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h3 id="2-reactfc-不支持-defaultprops">2 React.FC 不支持 defaultProps</h3><p>但是<a href="https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/default_props">这边</a>提到<strong>defaultProps不建议使用，即将废弃</strong>。
从这一点长期来看，React.FC还是优于normal functions type。</p><p>看下面这段代码，ts 会提示</p><p><code>Property &#x27;name&#x27; is missing in type &#x27;{}&#x27; but required in type &#x27;GreetingProps&#x27;.(2741)</code></p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token punctuation">,</span> <span class="token constant">FC</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>render<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> GreetingProps <span class="token operator">=</span> <span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> Greeting<span class="token punctuation">:</span> <span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">GreetingProps</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = ({name}) => </span><span class="token punctuation">{</span>
    <span class="token comment">// name is string!</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

Greeting.defaultProps = </span><span class="token punctuation">{</span>
    name<span class="token punctuation">:</span> <span class="token string">'World'</span>
<span class="token punctuation">}</span><span class="token plain-text">;

const App = () => (
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span><span class="token comment">/* boom 💥*/</span><span class="token punctuation">}</span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text">
);

render(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">, document.getElementById('root'));
</span></code></pre><p>而改成正常的type声明，如下所示，就pass了</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> GreetingProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">Greeting</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">:</span>GreetingProps</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token comment">// name is string!</span>
  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello </span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Greeting<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>
  name<span class="token punctuation">:</span> <span class="token string">"World"</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span><span class="token comment">/*✅*/</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Greeting</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><h2 id="如何学习在react中使用typescript？">如何学习在React中使用TypeScript？</h2><p><a href="https://github.com/typescript-cheatsheets/react">typescript-cheatsheets/react</a>是一个很好的起点和手册查询地方。</p><p>本文只是抛砖引玉，之后有什么有意思的点，还会case by case的讨论学习。</p><h2 id="references">References</h2><p><a href="https://fettblog.eu/typescript-react-why-i-dont-use-react-fc/">TypeScript + React: Why I don’t use React.FC</a></p><p><a href="https://github.com/typescript-cheatsheets/react">typescript-cheatsheets/react</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[the most successful developers share more than they take]]></title>
            <link>/posts/2020-09-23-0034-the-most-successful-developers-share-more-than-they-take</link>
            <guid>/posts/2020-09-23-0034-the-most-successful-developers-share-more-than-they-take</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><ul><li>这是
<a href="https://stackoverflow.blog/2020/05/14/the-most-successful-developers-share-more-than-they-take/">StackOverflow</a>对我启发很大的一篇 blog。</li></ul><h2 id="引子">引子</h2><blockquote><p>After interviewing several developers, a pattern started to become clear: great developers share a lot. This takes different forms for different people, but is very often a blog. But for many top developers, their sharing mindset came before their success, and was the direct cause of it, not the result of it.</p></blockquote><h3 id="the-common-factor">the common factor</h3><p>很多顶尖开发者的分享的意识早于他们获得成功，并且这是是导致成功的因素，而非成功后的结果。</p><p>很多都源自于一个blog。</p><h3 id="for-yourself-not-the-audience">For yourself, not the audience</h3><p>问题：以什么样的动机创作呢？
答案：为自己。</p><ul><li><p>Flask Mega Tutorial的作者Miguel Grinberg，自己创作就是为了自己的兴趣。</p></li><li><p>top contributor to Python on Stackoverflow的Martijn Pieters，他认为快速成为专家的方法就是找到一堆问题或者有人问问题的地方，尝试把每一个问题都回答。不是说这样回答问题就没有奖励或者动力，而是这个过程中对个人的好处常常被低估了。</p></li><li><p>尽管从外部视角看起来，分享的主要好处来自于你吸引的人和由知名度提高所带来的机会，例如新工作，咨询，项目报价和演讲机会。尽管这是事实，但顶级软件工程师告诉我，长期利益从来都不是他们的目标-共享行为会产生<strong>重大的短期个人利益</strong>。</p></li></ul><h3 id="public-by-default">Public by default</h3><ul><li><p>分享就像肌肉，多用就会更高效。<strong>持续的产出</strong>是收获分享好处的关键之一。</p></li><li><p>在技术层面，公开回答问题、贡献开源代码，你会获得立即反馈，这种反馈是的你一定有进步。</p></li></ul><h2 id="references">References</h2><p><a href="https://stackoverflow.blog/2020/05/14/the-most-successful-developers-share-more-than-they-take/">The most successful developers share more than they take</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Design principles of software development]]></title>
            <link>/posts/2020-09-23-1825-design-principles-of-software-development</link>
            <guid>/posts/2020-09-23-1825-design-principles-of-software-development</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>本文是对《软件设计的 201 个原则》的第4章——软件开发的设计原则的学习。</p><h2 id="软件设计是什么">软件设计是什么</h2><p>设计包括以下活动：</p><ul><li>(1) 定义满足需求的软件架构（architecture）；</li><li>(2) 为架构中的各个软件组件指定算法。</li></ul><p>架构包括：</p><ul><li>软件中所有模块的定义；</li><li>它们之间如何提供接口；</li><li>它们之间如何组装；</li><li>组件的生命周期。</li></ul><p>设计的最终产出是设计规格说明（Design Specification）。</p><h2 id="061-从需求到设计的转换并不容易">061 从需求到设计的转换并不容易</h2><p>设计的目的是实现从需求规格到设计规格、从外部视角到内部最优的转换。</p><p>设计的第一步，是综合形成一个理想的软件架构。</p><p><strong>不能直接将需求规格说明中的&quot;架构&quot;作为软件架构</strong>，原因：</p><ol><li><p>在需求分析阶段，完全没有考虑选择最优设计。在这种情况下，不能接受将需求阶段的设计作为最终设计。</p></li><li><p>在需求分析阶段，列出各种可选设计，并进行分析及选优。</p><p>在确定需求基线、做出自己开发或购买的决策和进行开发成本估算之前，组织无法负担的起去做彻底的设计（通常占开发总成本的 30% 到 40%）。</p></li><li><p>该方法假设某种软件架构对所有软件都是最理想的。这显然是不可能的。</p></li></ol><h2 id="062-将设计追溯至需求">062 将设计追溯至需求</h2><p>设计软件时，设计者必须知道，哪些需求能被每个组件满足。</p><p>在不同阶段都需要能对组件和需求进行<strong>追溯</strong>定位。</p><ul><li>当[选择软件架构]时，重要的是所有需求都能被覆盖。</li><li>软件[部署]后，当检测到故障时，维护人员需要快速分离出那些最有可能包含故障原因的软件组件。</li><li>在[维护]期间，当一个软件组件被修复时，维护人员需要知道哪些需求可能会受到不利的影响。</li></ul><p>可以通过创建一个大的二维表格来满足，它的行对应所有的软件组件，它的列对应需求规格说明中的每个需求。任何位置的 1 表示此设计组件有助于满足此需求。</p><h2 id="063-评估备选方案">063 评估备选方案</h2><p>在所有工程学科中，一个重要思想是：详细列出多种方法，在这些方法之间<strong>权衡</strong>分析，并最终采用一种。</p><h2 id="064-没有文档的设计不是设计">064 没有文档的设计不是设计</h2><p>设计，是在纸或其他媒介上，对恰当的<strong>体系结构和算法的选择、抽象和记录</strong>。</p><h2 id="065-封装">065 封装</h2><p>信息隐藏,有助于隔离错误。</p><h2 id="066-不要重复造轮子">066 不要重复造轮子</h2><p>软件工程师经常一次又一次地重新发明组件。他们很少修补已有的软件组件。</p><p>有趣的是，软件业称这种罕见的实践为“重用”，而不是“工程”。</p><h2 id="067-保持简单">067 保持简单</h2><p>托尼·霍尔（Tony Hoare） 说过：构建软件设计有两种方法。一种方法是使它简单到明显没有缺陷，另一种方法是使它复杂到没有明显的缺陷。</p><p>记住 KISS 原则（Keep it Simple and Stupid）</p><p>当你将软件分解成子组件时，记住一个人很难同时理解超过 7 （+- 2）个事物。</p><h2 id="068-避免大量的特殊案例">068 避免大量的特殊案例</h2><p>每一个特殊案例都会使你更难调试，并使其他人更难修改、维护和增加功能。如果你发现太多的特殊案例，你可能设计了一个不合适的算法。应重新思考并重新设计算法。</p><h2 id="069-缩小智力距离">069 缩小智力距离</h2><p>艾兹格·迪科斯彻（Edsger Dijkstra）将智力距离（Intellectual Distance）定义为，现实问题和对此的计算机解决方案之间的距离。</p><p>理查德·费莱（Richard Fairley） 认为，智力距离越小，维护软件就越容易。</p><p><strong>软件的结构应该尽可能接近的模仿现实世界的结构</strong>。</p><p>面向对象设计和杰克逊系统方法（Jackson System）等设计方法，将最小的智力距离作为主要的设计驱动。</p><h2 id="070-保持设计在智力可控范围内">070 保持设计在智力可控范围内</h2><p>如果设计是以能使其创建者和维护者完全理解的方式创建和记录的，那么这个设计就是在智力可控范围内的。</p><p>这种设计的一个基本属性是，它是<strong>分层构建的和多视图的</strong>。</p><p>层次结构使读者能够抽象的理解整个系统，并在向更深层次移动时，理解越来越多的细节。</p><p>在每个层次上，组件应该仅从外部视角描述（原则 80）。</p><p>（在层次结构中的任何级别）任何单个组件都应该展现出简单和优雅。</p><h2 id="071-保持概念一致">071 保持概念一致</h2><p>概念一致是高质量设计的一个特点。</p><p>它意味着，使用有限数量的设计“形式”，且使用方式要统一。</p><p>设计形式包括：模块如何向调用方通知错误，软件如何向用户通知错误，数据结构如何组织，模块通信机制，文档标准，等等。</p><p>当设计完成后，它应该<strong>看起来都是一个人做的</strong>，尽管它其实是很多参与者的产出。</p><p>在设计过程中，经常会有偏离既定形式的诱惑。</p><p>对这样的诱惑，有些是可以让步的，比如理由是提升系统的一致性、优雅性、简单性或性能。</p><p>有些则不能让步，比如仅仅为了确保某个设计者在设计中留下自己的印记。</p><p>概念一致性比自我满足更重要。</p><h2 id="072-概念错误比语法错误更严重">072 概念错误比语法错误更严重</h2><p>在开发的各个阶段，问自己一些关键的问题。来发现概念错误：</p><p>在需求阶段，问自己，“这是客户想要的吗？”。</p><p>在设计阶段，问自己，“这个架构在压力下可以正常工作吗？”，或者，“这个算法真的适用于各种场景吗？”。</p><p>在编码阶段，问自己，“这段代码的执行和我想的一样吗？”，或者，“这段代码是否正确实现了这个算法？”。</p><p>在测试阶段，问自己，“执行这段测试能让我确信什么吗？”。</p><h2 id="073-使用耦合和内聚">073 使用耦合和内聚</h2><p>我们要追求的是低耦合和高内聚。</p><h2 id="074-为变化而设计">074 为变化而设计</h2><p>为了适应变化，设计需要做到：</p><ul><li><p>模块化，即应该由独立的部分组成，每一部分可以很容易地升级或替换，而对其他部分造成最小的影响（查看相关原则 65，70，73，80）。</p></li><li><p>可移植性，即应该很容易修改以适应新的硬件和操作系统。</p></li><li><p>可塑性，即可以灵活地适应预期外的新需求。</p></li><li><p>最小智力距离（原则 69）。</p></li><li><p>在智力可控范围内（原则 70）。</p></li><li><p>这样它就表现出 概念一致性（原则 71）。</p></li></ul><h2 id="075-为维护而设计">075 为维护而设计</h2><p>对于软件产品，设计后的最大成本风险是维护。</p><p>从对可维护性的影响来说，架构选择比算法或代码更加重要。</p><h2 id="076-为防备错误而设计">076 为防备错误而设计</h2><p>你的设计决策应该尽可能做到以下优化：</p><p>1.不引入错误。</p><p>2.引入的错误容易被检测。</p><p>3.部署后软件中遗留的错误要么是不危险的，要么在执行时有补偿措施，这样错误不会造成灾难。</p><h2 id="077-在软件中植入通用性">077 在软件中植入通用性</h2><p>当把一个系统拆分成子组件时，要注意其潜在的通用性。</p><p>当多个地方都需要一个相似的功能时，只需构建一个通用功能组件，而非多个相似功能组件。</p><p>在开发只在一个地方需要的功能时，要尽可能植入通用性，以便日后扩展。</p><h2 id="078-在软件中植入灵活性">078 在软件中植入灵活性</h2><p>一个软件组件的灵活性体现在，它很容易被修改，以在不同的场景下执行其功能（或者相似功能）。</p><h2 id="079-使用高效的算法">079 使用高效的算法</h2><p>了解<strong>算法复杂度理论</strong>是成为一名优秀设计者的绝对前提。</p><p>“算法分析”理论让我们知道，如何区分本来速度就慢的算法（不管编码如何优秀）和速度快几个数量级的算法。</p><h2 id="080-模块规格说明只提供用户需要的所有信息">080 模块规格说明只提供用户需要的所有信息</h2><p>设计过程中一个关键部分，是系统中每个软件组件的精确定义。</p><p>它必须包含用户（这里的“用户”是指，另一个软件组件，或另一个组件的开发者）需要的全部内容，如：用途，名字，调用方法，如何同所在环境通信的细节。</p><p>任何用户不需要的内容，都要明确排除在外。</p><p>在大部分情况下，应该排除使用的算法和内部数据结构。</p><h2 id="081-设计是多维的">081 设计是多维的</h2><p>一份完整的软件设计至少需要包括：</p><p>1.<strong>打包方案</strong>（Packaging）。通常用层次图的形式给出，用于说明“什么是什么的一部分？”。它通常隐含说明了数据可见性。它还能体现封装性，如对象内包含的数据和方法。</p><p>2.<strong>依赖层次</strong>（Needs Hierarchy）。用于说明“谁需要谁”。以组件网状图的形式表达，其中箭头的指向表明组件间的依赖关系。依赖可能是数据、逻辑或者其它信息。</p><p>3.<strong>调用关系</strong>（Invocation）。用于说明“谁调用谁”。以组件网状图的形式表达，其中箭头的指向表明组件间的调用、中断、消息传递关系。</p><p>4.<strong>进程组织</strong>（Processes）。一批组件被组织在一起，成为异步处理的进程。这是与其它进程同时运行的组件副本。零个、一个或多个副本可能同时存在。另外，还需要说明进程创建、执行、停止或销毁的条件。</p><h2 id="082-优秀的设计出自优秀的设计师">082 优秀的设计出自优秀的设计师</h2><p>无论如何，真正优秀的设计，是真正优秀设计者的智慧结晶。</p><p><strong>优秀设计的特征是：简洁（Clean）、简单（Simple）、优雅（Elegant）、快速（Fast）、可维护（Maintainable）、易于实现（Easy to Implement）</strong>。</p><p><strong>优秀的设计源于灵感和洞察力</strong>，而不仅是努力工作或按部就班的设计方法。</p><p>对于最好的设计者要重点支持。他们才是未来。</p><h2 id="083-了解应用场景">083 了解应用场景</h2><p>无论需求文档写得多好，架构和算法的最优选择，主要应基于对应用场景特质的理解。</p><h2 id="084-你可以做到低成本的重用">084 你可以做到低成本的重用</h2><p>问身边的人你是否开发过做这个功能的组件？如果有，拿来用。</p><h2 id="085-错进，错出是不对的">085 “错进，错出”是不对的</h2><p>要考虑异常的输入，并且保持系统正常运行。不要造成“多米诺效应”。</p><h2 id="086-可靠性可以通过冗余来实现">086 可靠性可以通过冗余来实现</h2><p>在硬件设计中可以通过：1. 并行方式。2. 冷备方式。</p><p>这样的设计成本会少量增长。可靠性是指数级提升。</p><p>在软件系统中，相同的软件做两份拷贝，并不会增加软件的可靠性。其中一个失败，另一个也会失败。</p><p>可行的方案是：根据相同的需求规格说明，设计出两套软件系统，然后并行部署。</p><p>这样在软件系统中，设计成本会翻倍。</p><p><strong>软件的超高可靠性是非常昂贵的</strong>。（原则 4）</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Preparing for a Tech Talk]]></title>
            <link>/posts/2020-09-26-0126-Preparing-for-a-Tech-Talk</link>
            <guid>/posts/2020-09-26-0126-Preparing-for-a-Tech-Talk</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>Dan 是如何准备技术分享的</p><ul><li><p>如何选择 Topic</p></li><li><p>What，why，How</p></li><li><p>内容</p></li></ul><h2 id="如何选择-topic">如何选择 Topic</h2><h3 id="分享的动机（motivation）有哪些？">分享的动机（motivation）有哪些？</h3><ul><li><p>外部动机</p><ul><li>获得同行的认可从而获得更好的工作机会</li><li>想让别人注意到自己的兴趣爱好或者工作项目</li></ul></li><li><p>内部动机</p><ul><li><p>觉得 teach 很有意义 - 享受学习，分享让你挖得更深入 - 带头或者转变某个主题的“风向”</p></li><li><p>放大或者批评某个想法</p></li></ul></li></ul><p>内部动机通常不代表专业认可，但它有特定的价值。对 Dan 来说：</p><ul><li><p>享受分享点亮自己的想法。互相点亮，收获更多有意思的知识。</p></li><li><p>享受用更简单的方式重新解释事物。享受 aha 时刻（顿悟）。</p></li></ul><p>选择跟随动机，会在以下方面带来帮助：</p><ol><li><p>更容易选出 Topic。Dan 的公式是“解释一个鼓舞人心的想法以及为什么你应该关注它”</p></li><li><p>更不容易怯场。</p></li><li><p>更令人信服。</p></li><li><p>当年对一个 Topic 感到激动，你会觉得自己在一个大事情中，从而会更自信。我的分享不是为了让别人评判我，我只是个信使，我把听众从一个思想带到另一个思想。通过这样思考，可以使得不必过于紧张。</p></li></ol><h2 id="what，why，how">What，why，How</h2><p>要让听众记住一件什么事情？</p><p>Dan 举例自己的分享：</p><ul><li><p>Hot Reloading： 函数式原则改进了工作流</p></li><li><p>Beyond React16: 等待 CPU 和 IO 有了一个统一的解决方案。</p></li><li><p>Introducing Hooks： Hooks 使得状态逻辑可重用。</p></li></ul><p>What，why，How 分别指什么？</p><ul><li><p>What：中心思想</p></li><li><p>How：传递思想的手段</p></li><li><p>Why：motivation。这分享的情感核心。</p></li></ul><p>Dan 举例子：</p><p><img src="https://overreacted.io/static/a65c15cd4ca2277599972b89da3cbf0b/ae92f/how-what-why-hot-reloading.png"/></p><p><img src="https://overreacted.io/static/0d4310b34364a1ba80b55650f5e4c11c/ae92f/how-what-why-beyond-react-16.png"/></p><p><img src="https://overreacted.io/static/cd27cea1fdca520d929385de0cc1581b/ae92f/how-what-why-introducing-hooks.png"/></p><h2 id="内容">内容</h2><p>两种写作方式</p><h3 id="自顶向下（top-down）">自顶向下（Top-down）</h3><p>从提纲逐渐完善， Dan 的例子</p><pre><code>- intro
  - hi, I&#x27;m Dan
  - I work on React
- problems
  - wrapper hell
  - long components
  - fixing one makes the other worse
  - should we give up
    - lol mixins?
- crossroads
  - maybe we can&#x27;t fix this
  - but what if we can?
  - we have a proposal
    - no breaking changes
- demo
  - state Hook
  - more than one state Hook
    - mention rules
  - effect Hook
  - effect cleanup
  - custom Hooks &lt;----- &quot;aha&quot; moment
- recap
  - no breaking changes
  - you can try now
  - link to the rfc
- outro
  - make it personal
  - hook : component :: electron : atom
  - logo + &quot;hooks have been here all along&quot;
</code></pre><p>提纲帮助保持内容结构化可理解。</p><p>心理模版：</p><ol><li><p>提出一些矛盾或者问题来引起听众兴趣</p></li><li><p>带着他们经历主要的 aha 时刻</p></li><li><p>回顾刚才如何解决提出的问题</p></li><li><p>用吸引人的情感来结束分享。（点题 why）</p></li></ol><h3 id="自下而上（bottom-up）">自下而上（Bottom-Up）</h3><p>Dan 尝试尽快建立演讲中“高能量”部分的概念证明。</p><p>完成之后 check 之前的提纲是否要调整和精简。</p><h3 id="多加练习">多加练习</h3><p>把自己关在房间，第一遍会比预期长很多，然后进行必要的删减。接下来的几天重复练习，3–20 遍，脱口而出，不写下完整的句子以免因 miss 造成心理影响。</p><h1 id="references">References</h1><p><a href="https://overreacted.io/preparing-for-tech-talk-part-1-motivation/">1</a>
<a href="https://overreacted.io/preparing-for-tech-talk-part-2-what-why-and-how/">2</a>
<a href="https://overreacted.io/preparing-for-tech-talk-part-3-content/">3</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[MDX写作体验改进]]></title>
            <link>/posts/2020-09-26-1736-better-creating</link>
            <guid>/posts/2020-09-26-1736-better-creating</guid>
            <content:encoded><![CDATA[<h2 id="背景">背景</h2><p>本博客在日常写作中遇到一些可读性和视觉传达方面的问题，比如</p><ul><li><p>没有目录 Toc</p></li><li><p>缺乏代码行高亮 LineNumbersHighlight。代码缺乏表现力、重点不突出。</p></li></ul><p>本文就对此进行学习，有功能就用，没有就造轮子。</p><h2 id="toc">Toc</h2><p>此前，我在每次落笔前会先写一个所谓的“你将从本文了解到”的一节来作为提纲，避免离题。（事实证明确实有帮助）
但是这个手工的目录和具备跳转能力的目录还是差很多。</p><p>本博客工程中并没有组件实现这个功能。但好在 mdx 相关插件(mdxTableOfContents)提供了 toc 的数据。我们可以自己渲染一个 toc，问题就变成了写一个目录组件。</p><h3 id="toc-数据来源及其数据结构">Toc 数据来源及其数据结构</h3><p>可以从<code>src/components/BlogPostLayout.tsx</code>中发现 react-navi 路由提供了视图数据，其中 tableOfContents 就是 mdx 插件提供的获取 Toc 数据体的 function。</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">BlogPostLayout</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>blogRoot<span class="token punctuation">}</span><span class="token punctuation">:</span> BlogPostLayoutProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>title<span class="token punctuation">,</span> data<span class="token punctuation">,</span> url<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useCurrentRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">{</span>connect<span class="token punctuation">,</span> content<span class="token punctuation">,</span> head<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">;</span>
    <span class="token comment">// let {MDXComponent, readingTime} = content;</span>
<span class="highlighted-line">    <span class="token keyword">let</span> <span class="token punctuation">{</span>MDXComponent<span class="token punctuation">,</span> readingTime<span class="token punctuation">,</span> tableOfContents<span class="token punctuation">}</span> <span class="token operator">=</span> content<span class="token punctuation">;</span></span>    <span class="token keyword">const</span> disqusShortname <span class="token operator">=</span> <span class="token string">'miaocode'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> disqusConfig<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
        url<span class="token punctuation">:</span> <span class="token string">'https://mzvast.github.io'</span> <span class="token operator">+</span> url<span class="token punctuation">.</span>pathname<span class="token punctuation">,</span>
        identifier<span class="token punctuation">:</span> data<span class="token punctuation">.</span>slug<span class="token punctuation">,</span>
        title<span class="token punctuation">:</span> title
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>其返还的数据结构<code>TableOfContentsData</code>如下。</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">type</span> TocItem <span class="token operator">=</span> <span class="token punctuation">{</span>
    id<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    level<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    title<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    children<span class="token punctuation">:</span> TocItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> TableOfContentsData<span class="token punctuation">:</span>TocItem<span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><p>插件的部分代码我们可以看一下,值得到这个插件只用到 level2 和 3，再深的层次就不解析了。如果有需要可以通过传参的方式修改层级（本博客并不需要）。</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="highlighted-line"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span></span><span class="highlighted-line">    <span class="token parameter">root<span class="token punctuation">,</span></span><span class="highlighted-line">    <span class="token punctuation">{</span>minTableOfContentsLevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> maxTableOfContentsLevel <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span></span><span class="highlighted-line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>    <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
        hasFrontMatterExport<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        hasTableOfContentsExport<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        tableOfContents<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>

    <span class="token keyword">return</span> info<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>最后有了数据之后的组件编写问题就简单了。样式上复用 blockquote 的样式，并稍作调整，完成之后就是现在文章头部的 Toc 惹。</p><h2 id="代码块高亮">代码块高亮</h2><p>工程中@mdx-js/react 是默认支持该功能的。具体看下面分析。</p><h3 id="code-block-highlight-语法">code block highlight 语法</h3><ul><li><p>代码块头部声明</p><p><em>```js{1,2,3–6}</em></p></li><li><p>文中声明</p><pre><code>highlight-line：高亮当前行

highlight-next-line：高亮下一行

highlight-start：连续高亮开始，和 hightlight-end 成对使用。

highlight-range{1, 4-6}：指定行号高亮。
</code></pre></li></ul><h3 id="mdx-中的具体实现">mdx 中的具体实现</h3><p>本 blog 工程基于<code>react-scripts-mdx</code>，它依赖了<code>mdx-loader</code>，这个 loader 的入口代码如下</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> <span class="token punctuation">{</span>getOptions<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'loader-utils'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> readingTime <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'reading-time'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> emoji <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'remark-emoji'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> images <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'remark-images'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> textr <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'remark-textr'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> slug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'remark-slug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mdx <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@mdx-js/mdx'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mdxTableOfContents <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mdx-table-of-contents'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> mdxExportJSONByDefault <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mdx-constant'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> grayMatter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gray-matter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> typography <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./typography'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="highlighted-line"><span class="token keyword">const</span> rehypePrism <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prism'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> result<span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span> content<span class="token punctuation">:</span> mdxContent<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">grayMatter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> callback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
            remarkPlugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
                slug<span class="token punctuation">,</span>
                images<span class="token punctuation">,</span>
                emoji<span class="token punctuation">,</span>
                <span class="token punctuation">[</span>textr<span class="token punctuation">,</span> <span class="token punctuation">{</span>plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>typography<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="highlighted-line">            rehypePlugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>rehypePrism<span class="token punctuation">]</span><span class="token punctuation">,</span></span>            compilers<span class="token punctuation">:</span> <span class="token punctuation">[</span>
                mdxTableOfContents<span class="token punctuation">,</span>
                <span class="token function">mdxExportJSONByDefault</span><span class="token punctuation">(</span><span class="token string">'frontMatter'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>filepath<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePath<span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">mdx</span><span class="token punctuation">(</span>mdxContent<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> estimatedReadingTime <span class="token operator">=</span> <span class="token function">readingTime</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
import React from 'react'
import { mdx } from '@mdx-js/react'
export const readingTime = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>estimatedReadingTime<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>其中有个 rehypePrism，我们对此比较感兴趣，</p><p>其目录结构如下</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token punctuation">.</span>
├── getCodeBlockOptions<span class="token punctuation">.</span>js
├── highlightCode<span class="token punctuation">.</span>js
├── highlightLines<span class="token punctuation">.</span>js
├── index<span class="token punctuation">.</span>js
└── loadPrismLanguage<span class="token punctuation">.</span>js
</code></pre><p>让我们看看代码</p><h4 id="indexjs">index.js</h4><p>顶部有一段注释，表明这段代码跟<a href="https://www.gatsbyjs.com/plugins/gatsby-remark-prismjs/">gatsby-remark-prismjs</a>有某种关联。</p><p>这段代码做的事情是<code>结算代码块头部的高亮信息</code>。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token punctuation">.</span>
├── getCodeBlockOptions<span class="token punctuation">.</span>js
├── highlightCode<span class="token punctuation">.</span>js
├── highlightLines<span class="token punctuation">.</span>js
<span class="highlighted-line">├── index<span class="token punctuation">.</span>js</span>└── loadPrismLanguage<span class="token punctuation">.</span>js
<span class="token comment">/*
Code used under license from mapbox and Gatsby
https://github.com/mapbox/rehype-prism
<span class="highlighted-line">https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/src/</span>*/</span>

<span class="token keyword">const</span> visit <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'unist-util-visit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nodeToString <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'hast-util-to-string'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> getCodeBlockOptions <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./getCodeBlockOptions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> highlightCode <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./highlightCode</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> defaultAliases <span class="token operator">=</span> <span class="token punctuation">{</span>
    js<span class="token punctuation">:</span> <span class="token string">'jsx'</span><span class="token punctuation">,</span>
    html<span class="token punctuation">:</span> <span class="token string">'markup'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">tree</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
<span class="highlighted-line">        <span class="token function">visit</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token string">'element'</span><span class="token punctuation">,</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span></span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">visitor</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> index<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>parent <span class="token operator">||</span> parent<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">'pre'</span> <span class="token operator">||</span> node<span class="token punctuation">.</span>tagName <span class="token operator">!==</span> <span class="token string">'code'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 只处理pre/code标签的直接孩子</span>
        <span class="token keyword">let</span> fenceString<span class="token punctuation">;</span>
        <span class="token keyword">const</span> className <span class="token operator">=</span> node<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>className <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> classListItem <span class="token keyword">of</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>classListItem<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'language-'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                fenceString <span class="token operator">=</span> classListItem<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="highlighted-line">        <span class="token keyword">const</span> <span class="token punctuation">{</span></span><span class="highlighted-line">            language<span class="token punctuation">,</span></span><span class="highlighted-line">            normalizedLanguage<span class="token punctuation">,</span></span><span class="highlighted-line">            highlightedLineNumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="highlighted-line">        <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getCodeBlockOptions</span><span class="token punctuation">(</span>fenceString<span class="token punctuation">,</span> options<span class="token punctuation">.</span>aliases <span class="token operator">||</span> defaultAliases<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">        <span class="token comment">// 解析代码块头部的{1-10,5,6}，变成行号数组</span></span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token function">nodeToString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token punctuation">(</span>
                parent<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>className <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'language-'</span> <span class="token operator">+</span> normalizedLanguage<span class="token punctuation">)</span><span class="token punctuation">;</span>

            node<span class="token punctuation">.</span>properties<span class="token punctuation">[</span><span class="token string">'data-language'</span><span class="token punctuation">]</span> <span class="token operator">=</span> normalizedLanguage<span class="token punctuation">;</span>
            node<span class="token punctuation">.</span>properties<span class="token punctuation">[</span>
                <span class="token string">'data-highlighted-line-numbers'</span>
            <span class="token punctuation">]</span> <span class="token operator">=</span> highlightedLineNumbers<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            node<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="highlighted-line">            node<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>dangerouslySetInnerHTML <span class="token operator">=</span> <span class="token punctuation">{</span></span><span class="highlighted-line">                __html<span class="token punctuation">:</span> <span class="token function">highlightCode</span><span class="token punctuation">(</span>language<span class="token punctuation">,</span> code<span class="token punctuation">,</span> highlightedLineNumbers<span class="token punctuation">)</span></span><span class="highlighted-line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="highlighted-line">            <span class="token comment">// 将代码块头部的行号传入高亮处理函数，生产出需要的html（它还会处理code中的注释形式的高亮）</span></span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/Unknown language/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h4 id="highlightcodejs">highlightCode.js</h4><p>这个文件的作用主要就是<code>针对语言进行grammer高亮</code>然后将处理过的 code 用<code>highlightLines</code>函数标记 lineNumber 高亮</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token punctuation">.</span>
├── getCodeBlockOptions<span class="token punctuation">.</span>js
<span class="highlighted-line">├── highlightCode<span class="token punctuation">.</span>js</span>├── highlightLines<span class="token punctuation">.</span>js
├── index<span class="token punctuation">.</span>js
└── loadPrismLanguage<span class="token punctuation">.</span>js
<span class="token comment">/*
Code used under license from Gatsby
https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/src/
*/</span>

<span class="token keyword">const</span> Prism <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">prismjs</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> _ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">lodash</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> loadPrismLanguage <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./loadPrismLanguage</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> highlightLines <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./highlightLines</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">language<span class="token punctuation">,</span> code<span class="token punctuation">,</span> lineNumbersHighlight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token comment">// (Try to) load languages on demand.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Prism<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>language<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">loadPrismLanguage</span><span class="token punctuation">(</span>language<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Language wasn't loaded so let's bail.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>language <span class="token operator">===</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">none</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> code<span class="token punctuation">;</span> <span class="token comment">// Don't escape if set to none.</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> _<span class="token punctuation">.</span><span class="token function">escape</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> grammar <span class="token operator">=</span> Prism<span class="token punctuation">.</span>languages<span class="token punctuation">[</span>language<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> highlightedCode <span class="token operator">=</span> Prism<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> grammar<span class="token punctuation">,</span> language<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="highlighted-line">    <span class="token keyword">const</span> codeSplits <span class="token operator">=</span> <span class="token function">highlightLines</span><span class="token punctuation">(</span>highlightedCode<span class="token punctuation">,</span> lineNumbersHighlight<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
    <span class="token keyword">let</span> finalCode <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> lastIdx <span class="token operator">=</span> codeSplits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// Don't add back the new line character after highlighted lines</span>
    <span class="token comment">// as they need to be display: block and full-width.</span>
    codeSplits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">split<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        split<span class="token punctuation">.</span>highlight
            <span class="token operator">?</span> <span class="token punctuation">(</span>finalCode <span class="token operator">+=</span> split<span class="token punctuation">.</span>code<span class="token punctuation">)</span>
            <span class="token punctuation">:</span> <span class="token punctuation">(</span>finalCode <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>split<span class="token punctuation">.</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>idx <span class="token operator">==</span> lastIdx <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> finalCode<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><h4 id="highlightlinesjs">highlightLines.js</h4><p>这段代码只做一件事就是<code>高亮行</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token punctuation">.</span>
├── getCodeBlockOptions<span class="token punctuation">.</span>js
├── highlightCode<span class="token punctuation">.</span>js
<span class="highlighted-line">├── highlightLines<span class="token punctuation">.</span>js</span>├── index<span class="token punctuation">.</span>js
└── loadPrismLanguage<span class="token punctuation">.</span>js
<span class="token comment">/*
Code used under license from Gatsby
https://github.com/gatsbyjs/gatsby/blob/master/packages/gatsby-remark-prismjs/src/
*/</span>

<span class="token keyword">const</span> rangeParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">parse-numeric-range</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * As code has already been prism-highlighted at this point,
 * a JSX opening comment:
 *     {/*
 * would look like this:
 *     &lt;span class="token punctuation">{&lt;/span>&lt;span class="token comment">/*
 * And a HTML opening comment:
 *     &lt;!--
 * would look like this:
 *     &amp;lt;!--
 */</span>
<span class="token keyword">const</span> <span class="token constant">HIGHLIGHTED_JSX_COMMENT_START</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span class="token punctuation">\\{&lt;\\/span>&lt;span class="token comment">\\/\\*</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">HIGHLIGHTED_JSX_COMMENT_END</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\*\\/&lt;\\/span>&lt;span class="token punctuation">\\}&lt;/span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">HIGHLIGHTED_HTML_COMMENT_START</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&amp;lt;!--</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PRISMJS_COMMENT_OPENING_SPAN_TAG</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(&lt;span\\sclass="token\\scomment">)?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">PRISMJS_COMMENT_CLOSING_SPAN_TAG</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(&lt;\\/span>)?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">COMMENT_START</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(#|\\/\\/|\\{\\/\\*|\\/\\*+|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">HIGHLIGHTED_HTML_COMMENT_START</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">createDirectiveRegExp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">featureSelector</span><span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>featureSelector<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-(next-line|line|start|end|range)({([^}]+)})?</span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">COMMENT_END</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(-->|\\*\\/\\}|\\*\\/)?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">DIRECTIVE</span> <span class="token operator">=</span> <span class="token function">createDirectiveRegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">(highlight|hide)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">HIGHLIGHT_DIRECTIVE</span> <span class="token operator">=</span> <span class="token function">createDirectiveRegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">highlight</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">END_DIRECTIVE</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    highlight<span class="token punctuation">:</span> <span class="token regex">/highlight-end/</span><span class="token punctuation">,</span>
    hide<span class="token punctuation">:</span> <span class="token regex">/hide-end/</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PLAIN_TEXT_WITH_LF_TEST</span> <span class="token operator">=</span> <span class="token regex">/&lt;span class="token plain-text">[^&lt;]*\n[^&lt;]*&lt;\/span>/g</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">stripComment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token comment">/**
     * This regexp does the following:
     * 1. Match a comment start, along with the accompanying PrismJS opening comment span tag;
     * 2. Match one of the directives;
     * 3. Match a comment end, along with the accompanying PrismJS closing span tag.
     */</span>
    line<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
        <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>
            <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\s*(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">HIGHLIGHTED_JSX_COMMENT_START</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PRISMJS_COMMENT_OPENING_SPAN_TAG</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">COMMENT_START</span><span class="token punctuation">.</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)\\s*</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">.</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\s*(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">HIGHLIGHTED_JSX_COMMENT_END</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">COMMENT_END</span><span class="token punctuation">.</span>source<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">PRISMJS_COMMENT_CLOSING_SPAN_TAG</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">highlightWrap</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span>
    <span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;span class="highlighted-line"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> line<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">const</span> <span class="token function-variable function">parseLine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">line<span class="token punctuation">,</span> code<span class="token punctuation">,</span> index<span class="token punctuation">,</span> actions</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> feature<span class="token punctuation">,</span> directive<span class="token punctuation">,</span> directiveRange<span class="token punctuation">]</span> <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> flagSource <span class="token operator">=</span> <span class="token punctuation">{</span>
        feature<span class="token punctuation">,</span>
        index<span class="token punctuation">,</span>
        directive<span class="token punctuation">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>feature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>directive<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>directiveRange<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>directive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">next-line</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span>
            actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="highlighted-line">            <span class="token comment">// 跨行高亮的逻辑</span></span><span class="highlighted-line">        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">start</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span><span class="highlighted-line">            <span class="token comment">// find the next `${feature}-end` directive, starting from next line</span></span><span class="highlighted-line">            <span class="token keyword">const</span> endIndex <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span></span><span class="highlighted-line">                <span class="token punctuation">(</span><span class="token parameter">line<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> idx <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> <span class="token constant">END_DIRECTIVE</span><span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span><span class="highlighted-line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">            <span class="token keyword">const</span> end <span class="token operator">=</span> endIndex <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> code<span class="token punctuation">.</span>length <span class="token punctuation">:</span> endIndex<span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line">            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">                actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> i<span class="token punctuation">,</span> flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">            <span class="token punctuation">}</span></span><span class="highlighted-line">            <span class="token keyword">break</span><span class="token punctuation">;</span></span><span class="highlighted-line">        <span class="token punctuation">}</span></span>        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">line</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span>
            actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span> index<span class="token punctuation">,</span> flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            actions<span class="token punctuation">.</span><span class="token function">stripComment</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">range</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">:</span>
            actions<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>directiveRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> strippedDirectiveRange <span class="token operator">=</span> directiveRange<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> range <span class="token operator">=</span> rangeParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strippedDirectiveRange<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>range<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    range<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">relativeIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                        actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span>
                            feature<span class="token punctuation">,</span>
                            index <span class="token operator">+</span> relativeIndex<span class="token punctuation">,</span>
                            flagSource
                        <span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Invalid match specified: "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>line<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">"</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">highlightLineRange</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> highlights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>highlights<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">HIGHLIGHT_DIRECTIVE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>        <span class="token comment">// HACK split plain-text spans with line separators inside into multiple plain-text spans</span>
        <span class="token comment">// separatered by line separator - this fixes line highlighting behaviour for jsx</span>
        code <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token constant">PLAIN_TEXT_WITH_LF_TEST</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">match</span><span class="token punctuation">)</span> <span class="token operator">=></span>
            match<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\n/g</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;/span>\n&lt;span class="token plain-text"></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> split <span class="token operator">=</span> code<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> lines <span class="token operator">=</span> split<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>code<span class="token punctuation">,</span> highlight<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> hide<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> flagSources<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">flag</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">feature<span class="token punctuation">,</span> line<span class="token punctuation">,</span> flagSource</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>line <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> line <span class="token operator">&lt;</span> lines<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> lineMeta <span class="token operator">=</span> lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">;</span>
                lineMeta<span class="token punctuation">[</span>feature<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                lineMeta<span class="token punctuation">.</span>flagSources<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>flagSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function-variable function">hide</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">hide</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function-variable function">highlight</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> actions<span class="token punctuation">.</span><span class="token function">flag</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">highlight</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function-variable function">stripComment</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token function">stripComment</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token function-variable function">transform</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">lines</span><span class="token punctuation">)</span> <span class="token operator">=></span>
        lines
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>hide<span class="token punctuation">,</span> highlight<span class="token punctuation">,</span> flagSources<span class="token punctuation">}</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>hide <span class="token operator">&amp;&amp;</span> highlight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">const</span> formattedSources <span class="token operator">=</span> flagSources
                        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>
                            <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>feature<span class="token punctuation">,</span> index<span class="token punctuation">,</span> directive<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span>
                                <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">  - Line </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>
                                    index <span class="token operator">+</span> <span class="token number">1</span>
                                <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>feature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ("</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>directive<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">")</span><span class="token template-punctuation string">`</span></span>
                        <span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span>
                        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Line </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>
                            index <span class="token operator">+</span> <span class="token number">1</span>
                        <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> has been marked as both hidden and highlighted.\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>formattedSources<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> <span class="token operator">!</span>hide<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">line</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span>highlight<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    line<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token function">highlightWrap</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> line<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// If a highlight range is passed with the language declaration, e.g.</span>
    <span class="token comment">// ``jsx{1, 3-4}</span>
    <span class="token comment">// we only use that and do not try to parse highlight directives</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>highlights<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        highlights<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">lineNumber</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
<span class="highlighted-line">            actions<span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span>lineNumber <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 高亮块声明</span></span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> split<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> line <span class="token operator">=</span> split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">            <span class="token function">parseLine</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> split<span class="token punctuation">,</span> i<span class="token punctuation">,</span> actions<span class="token punctuation">)</span><span class="token punctuation">;</span>// 高亮指令</span></span>        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[official website project review part1]]></title>
            <link>/posts/2020-10-17-2313-official-project-review</link>
            <guid>/posts/2020-10-17-2313-official-project-review</guid>
            <content:encoded><![CDATA[<h2 id="帧动画闪烁和浏览器兼容性">帧动画闪烁和浏览器兼容性</h2><p>分为规则闪烁和不规则闪烁两种。</p><p>1.规则闪烁</p><p>规则闪烁在不同浏览器表现不一样。chrome、ie、edge 各自有各自的问题。</p><p>1、图片删除、插入式的动画方式，在 ie11 上会闪烁。</p><p>2、替换图片 src 的动画方式，在 edge 上会闪烁。</p><p>3、替换背景图也在 chrome 有不同程度的问题。</p><p>摸索下来，选择了方案 2，然后在 edge 上做试验，寻找引起闪烁的原因尝试修复。
目前没有严格准确的结论，但对图片<code>压缩尺寸</code>后，闪烁就消失了（<code>png压缩后损失alpha通道，丢失透明度</code>）。初步结论 edge 渲染效能有问题。</p><p>2.不规则闪烁</p><p>与浏览器无关，都会发生。在刷新页面或者切页面时容易出现，主要原因是“重入”。</p><h2 id="webpack-与调试-es5">webpack 与调试 es5</h2><p>参考<a href="https://github.com/jaredpalmer/razzle/issues/998#issuecomment-576892323">本文</a>，通过修改 webpack 的 dev server 配置，使得client使用webpack/hot/dev-server，可以实时编译成 es5 给 IE 调试。 提高了调试效率，尤其是IE11。</p><p>问：<code>webpack/hot/dev-server</code>怎么知道该编译成 es5？</p><p>答：基于package.json的<code>browserslist配置</code>。</p><p>源码对应的位置：</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// node_modules/razzle/config/createConfig.js</span>
<span class="token comment">// line 381</span>
config<span class="token punctuation">.</span>entry <span class="token operator">=</span> <span class="token punctuation">{</span>
    client<span class="token punctuation">:</span> <span class="token punctuation">[</span>
<span class="highlighted-line">        require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'razzle-dev-utils/webpackHotDevClient'</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="highlighted-line">        <span class="token comment">// 将上面这行替换成require.resolve('webpack/hot/dev-server')</span></span>        paths<span class="token punctuation">.</span>appClientIndexJs
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>具体步骤：</p><p>1.razzle配置化修改</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// razzle.config.js</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'typescript'</span><span class="token punctuation">,</span>
            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                useBabel<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                tsLoader<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    transpileOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    experimentalWatchApi<span class="token punctuation">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                forkTsChecker<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    tsconfig<span class="token punctuation">:</span> <span class="token string">'./tsconfig.json'</span><span class="token punctuation">,</span>
                    tslint<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    watch<span class="token punctuation">:</span> <span class="token string">'./src'</span><span class="token punctuation">,</span>
                    typeCheck<span class="token punctuation">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="highlighted-line">    <span class="token function-variable function">modify</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> <span class="token punctuation">{</span>target<span class="token punctuation">,</span> dev<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span><span class="highlighted-line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ECMA</span> <span class="token operator">===</span> <span class="token string">'5'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span><span class="highlighted-line">            <span class="token comment">// 这里ECMA是环境变量控制的功能开关</span></span><span class="highlighted-line">            config<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>client<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'webpack/hot/dev-server'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">        <span class="token punctuation">}</span></span><span class="highlighted-line"></span><span class="highlighted-line">        <span class="token keyword">return</span> config<span class="token punctuation">;</span></span><span class="highlighted-line">    <span class="token punctuation">}</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>2.增加带功能开关的脚本，配置正确的browserslist。</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cra-ts-ssr-zero"</span><span class="token punctuation">,</span>
    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>
    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">"new:component"</span><span class="token operator">:</span> <span class="token string">"hygen component new"</span><span class="token punctuation">,</span>
        <span class="token property">"new:page"</span><span class="token operator">:</span> <span class="token string">"hygen page new"</span><span class="token punctuation">,</span>
        <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"PUBLIC_PATH=./ CLIENT_PUBLIC_PATH=/ razzle start --type=spa"</span><span class="token punctuation">,</span>
<span class="highlighted-line">        <span class="token property">"start:es5"</span><span class="token operator">:</span> <span class="token string">"PUBLIC_PATH=./ CLIENT_PUBLIC_PATH=/ ECMA=5 razzle start --type=spa"</span><span class="token punctuation">,</span></span>        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"PUBLIC_PATH=./ razzle build --type=spa"</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">">0.2%"</span><span class="token punctuation">,</span>
        <span class="token string">"not dead"</span><span class="token punctuation">,</span>
        <span class="token string">"not ie &lt;= 11"</span><span class="token punctuation">,</span>
        <span class="token string">"not op_mini all"</span><span class="token punctuation">,</span>
        <span class="token string">"chrome >=51"</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="ie11-css兼容性相关">IE11 CSS兼容性相关</h2><p>在做布局的时候用了Grid，ie11不支持，只能转成Flex布局。</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> GridContainer<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    // grid-template-columns: 300px 300px 300px;
    // grid-template-rows: 200px 200px 200px;
    // grid-column-gap: 20px;
    // grid-row-gap: 20px;
    display: flex;
    flex-wrap: wrap;
    max-width: 940px;
    justify-content: space-between;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> Card<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Box<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>bg<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    width: 300px; // ++
    height: 200px; // ++
    position: relative;
    background: url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>bg<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> bg<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) no-repeat center;
    border-radius: 3px;
    overflow: hidden;
    :not(:nth-child(-n + 3)) { // ++
        margin-top: 20px; // ++
    } // ++
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</code></pre><p>关于IE样式的大部分问题，通常可以尝试显式指定宽高。</p><h2 id="百度云缓存">百度云缓存</h2><p>bos 和 cdn 资源默认配置了 3 天的强缓存。导致资源更新不能及时生效，建议配置更短的强缓存时间，避免同名资源替换生效时间过长。</p><h2 id="png-压缩">PNG 压缩</h2><p>png 在百度云图像处理压缩后会丢失 alpha 通道，导致一些有部分透明的主色为白的图片变成全白。因此尽量避免压缩 png，只有在背景不是透明的情况下才是相对安全的。</p><h2 id="unicode-文本编码">unicode 文本编码</h2><p>在走查视觉的时候会发现一行字中有两种不同的字体。但看源码中文本并没有什么字体差别。其实文案中存在两种不同范围的 unicode 编码。<a href="https://blog.csdn.net/gstianfu/article/details/84643320">参见</a></p><p>其中用于<code>部首</code>的 unicode，编码范围是从 U+2F00 到 U+2FD5。</p><p>另一种用于<code>常用汉字</code>的编码范围是 U+4E00 到 U+9FFF。</p><p>显示字体不同原因：在某些 win10 机器的“雅黑”字库中常用汉字字体有映射，另部首则没有，故采用回落字体（等线）显示。</p><p>问题产生原因猜测：文案编写者采用的输入法有问题，未按照常用汉字的规范化编码。</p><p>目前 unicode 有：NFD（默认）、NFC、NFKD、NFKC 四种规范化形式。英文和一些部首采用 NFD、NFC，而常用汉字采用 NFKD、NFKC 形式。</p><p>解决思路：将部首转换到常用汉字编码范围。比如都转换成 NFKD。</p><p>ES6 中提供了工具函数<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize">String.prototype.normalize()</a>，可以传入参数<code>&quot;NFKD&quot;</code>。</p><h2 id="帧动画实现">帧动画实现</h2><p>可改进的点：减少图片请求数量、采用RAF替代 setTimeout、从可见性方面节能。</p><p>代码如下：</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token comment">/**
 * @file [FrameAnimate]
 * @author [mzvast]
 * @email [mzvast@gmail.com]
 * @create date 2020-10-10 17:40:42
 */</span>
<span class="token comment">/* eslint-disable max-len,babel/new-cap,operator-linebreak,fecs-export-on-declare,space-before-function-paren */</span>
<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>PureComponent<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>styled<span class="token punctuation">,</span> css<span class="token punctuation">,</span> keyframes<span class="token punctuation">,</span> Box<span class="token punctuation">,</span> palette<span class="token punctuation">,</span> Flex<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'galaco'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> getBosPicUrl <span class="token keyword">from</span> <span class="token string">'common/getBosPicUrl'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>flexCenter<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'components/sharedStyle'</span><span class="token punctuation">;</span>

<span class="token comment">// borrowed from by https://www.zhangxinxu.com/study/201805/image-sequence-frame-play.html</span>

<span class="token comment">// 24 fps=> 42ms per img</span>
<span class="token keyword">const</span> Container<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Box<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    cursor: default;
    img {
        min-width: 100%;
        min-height: 100%;
    }
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> PuppyContainer<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> styled<span class="token punctuation">.</span>img<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    flex-shrink: 0;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> TextWrap<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>flexCenter<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    flex-direction: column;
    position: absolute;
    top: 240px;
    width: 100%;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> BigText<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Box<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    font-family: PingFangSC-Medium;
    font-size: 62px;
    color: #ffffff;
    line-height: 60px;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> SmallText<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Box<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">
    font-family: PingFangSC-Regular;
    font-size: 18px;
    color: #ffffff;
    letter-spacing: 0;
    line-height: 24px;
    margin-top: 30px;
</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
<span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token punctuation">{</span>
    big<span class="token punctuation">:</span> <span class="token string">'BIG_TEXT'</span><span class="token punctuation">,</span>
    small<span class="token punctuation">:</span> <span class="token string">'SMALL_TEXT'</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> Props <span class="token operator">=</span> <span class="token punctuation">{</span>
    urlRoot<span class="token punctuation">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    indexRange<span class="token punctuation">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 动画帧范围eg,[1,143]</span>
    visible<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span> <span class="token comment">// 当前状态是否用户可见，用于控制起停</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">type</span> State <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">FrameAnimate</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span><span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> State<span class="token operator">></span> <span class="token punctuation">{</span>
    state<span class="token punctuation">:</span> State<span class="token punctuation">;</span>

    <span class="token keyword">static</span> defaultProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    store <span class="token operator">=</span> <span class="token punctuation">{</span>length<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    pendingStore <span class="token operator">=</span> <span class="token punctuation">{</span>length<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    maxLength<span class="token punctuation">;</span>
    eleContainer<span class="token punctuation">;</span>
    elPuppy<span class="token punctuation">;</span>
    timer<span class="token punctuation">;</span>
    isPlaying <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// flag</span>
    lastIndex<span class="token punctuation">;</span> <span class="token comment">// for reset use only</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Container</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Flex</span></span> <span class="token attr-name">use</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>flexCenter<span class="token punctuation">}</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PuppyContainer</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>puppy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Flex</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TextWrap</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">BigText</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>text<span class="token punctuation">.</span>big<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">BigText</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SmallText</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>text<span class="token punctuation">.</span>small<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SmallText</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TextWrap</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Container</span></span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>eleContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elPuppy <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'puppy'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertPlaceholder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prefetchImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clearAllPendingImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">setSrc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">idx<span class="token punctuation">,</span> force <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// idx===0 占位图</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>force <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>elPuppy<span class="token punctuation">.</span>prevIdx <span class="token operator">===</span> idx <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">let</span> src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptUrl</span><span class="token punctuation">(</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>urlRoot <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'000'</span> <span class="token operator">+</span> idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// console.log('ddt::setSrc,idx', idx);</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elPuppy<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>elPuppy<span class="token punctuation">.</span>prevIdx <span class="token operator">=</span> idx<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="highlighted-line">    <span class="token comment">// 不建议使用cwrp接口</span></span><span class="highlighted-line">    <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token parameter">prevProps<span class="token punctuation">,</span> prevState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>        <span class="token comment">// console.log(</span>
        <span class="token comment">//     'ddt::prevProps.visible,this.props.visible',</span>
        <span class="token comment">//     prevProps.visible,</span>
        <span class="token comment">//     this.props.visible</span>
        <span class="token comment">// );</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prevProps<span class="token punctuation">.</span>visible <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function-variable function">getOptUrl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> getBosPicUrl<span class="token punctuation">.</span><span class="token function">frame</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 占位图</span>
    <span class="token function-variable function">insertPlaceholder</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token comment">// may have some latency due to network speed</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span>indexRange<span class="token punctuation">,</span> urlRoot<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     *  图片预加载task manage相关-start
     * */</span>
    <span class="token function-variable function">addPendingImg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">idx<span class="token punctuation">,</span> img</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function-variable function">removePendingImg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">idx</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function-variable function">clearAllPendingImg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> idx <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>src<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>pendingStore<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removePendingImg</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     *  图片预加载task manage相关-end
     * */</span>

    <span class="token comment">// 预加载图片到内存</span>
    <span class="token function-variable function">prefetchImg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span>indexRange<span class="token punctuation">,</span> urlRoot<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength <span class="token operator">=</span> indexRange<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> indexRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token operator">=</span> indexRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> idx <span class="token operator">&lt;=</span> indexRange<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> idx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> src <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOptUrl</span><span class="token punctuation">(</span>
                urlRoot <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token string">'000'</span> <span class="token operator">+</span> idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.png'</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            img<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">// 存储预加载的图片对象</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> img<span class="token punctuation">;</span>
                img<span class="token punctuation">.</span>src <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removePendingImg</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            img<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
                img<span class="token punctuation">.</span>src <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removePendingImg</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            img<span class="token punctuation">.</span>src <span class="token operator">=</span> src<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addPendingImg</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token function-variable function">play</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span>indexRange<span class="token punctuation">,</span> urlRoot<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
        <span class="token keyword">const</span> percent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>store<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 预加载完毕后开始动画，防重入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>percent <span class="token operator">==</span> <span class="token number">100</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isPlaying<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isPlaying <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> index <span class="token operator">=</span> indexRange<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token comment">// 依次append图片对象</span>
            <span class="token keyword">const</span> <span class="token function-variable function">step</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isPlaying <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>visible<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>lastIndex <span class="token operator">=</span> index<span class="token punctuation">;</span> <span class="token comment">// remember last inserted index</span>
                <span class="token comment">// 序列增加</span>
                index<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果超过最大限制</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> indexRange<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>step<span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 本段播放结束回调</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">;</span>
            <span class="token comment">// 等100%动画结束后执行播放</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 重置</span>
    <span class="token function-variable function">reset</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isPlaying<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isPlaying <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token punctuation">{</span>indexRange<span class="token punctuation">,</span> urlRoot<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSrc</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">&amp;&amp;</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> FrameAnimate<span class="token punctuation">;</span>
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[how to debug react without pain]]></title>
            <link>/posts/2020-11-07-2114-how-to-debug-react-without-pain</link>
            <guid>/posts/2020-11-07-2114-how-to-debug-react-without-pain</guid>
            <content:encoded><![CDATA[<h2 id="如何愉快的调试react">如何愉快的调试react</h2><p>React是一个huge code base。研究它，有许多方法。我希望可以一边开着一个app（SPA？），这个app引入一个本地的react，在里面搞事情，并可以实时看到效果。</p><p>思路主要是在于两端（app端和store端）如何链接起来。</p><h3 id="原有方案：store端push，app端pull">原有方案：store端push，app端pull</h3><p>我在之前主要用yalc改包发布到本地store，app引入yalc的store中的react。这样的好处是完全不需要修改app编译的过程，但是build，push package，pull package，pull，restart，restart 的4步走过程并算不上友好。（只适用于简单的调试，频繁的修改会shi的）</p><h3 id="新方案：整合package到app端，live-reload">新方案：整合package到app端，live-reload</h3><p>如果修改webpack打包过程，让app识别这一个package副本（webpack alias），并借助hmr能力，使得修改源码可以实时生效。岂不是很美？当然，这也并不是什么新技术，只是整合一下已有的技术。</p><h2 id="实现">实现</h2><h3 id="step1-base">Step1 Base</h3><p>首先需要一个solid的基础，毫无疑问，选择最新版CRA，并且eject。</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">npx create-react-app debug-react-ts --template typescript
<span class="token builtin class-name">cd</span> debug-react-ts
<span class="token function">yarn</span> run <span class="token function">eject</span>
</code></pre><h3 id="step2-下载源码，魔改config">Step2 下载源码，魔改config</h3><p>首先下载React源码（建议17），放入src目录下。</p><p>然后准备修改<code>config/webpack.config.js</code>文件。</p><p>全文搜索alias，该部分内容替换成如下：</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">      alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>
<span class="highlighted-line">        react<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/react/packages/react"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="highlighted-line">        <span class="token string">"react-dom"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/react/packages/react-dom"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="highlighted-line">        <span class="token string">"legacy-events"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span></span><span class="highlighted-line">          __dirname<span class="token punctuation">,</span></span><span class="highlighted-line">          <span class="token string">"../src/react/packages/legacy-events"</span></span><span class="highlighted-line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="highlighted-line">        shared<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/react/packages/shared"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="highlighted-line">        <span class="token string">"react-reconciler"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span></span><span class="highlighted-line">          __dirname<span class="token punctuation">,</span></span><span class="highlighted-line">          <span class="token string">"../src/react/packages/react-reconciler"</span></span><span class="highlighted-line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="highlighted-line">        <span class="token string">"react-events"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/react/packages/events"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span><span class="highlighted-line">        scheduler<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"../src/react/packages/scheduler"</span><span class="token punctuation">)</span></span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><p>接着，如果start的话会报错，大致意思是react的源码里面有flow的语法，ts不认识。我们只要安装插件忽略掉这个问题即可。</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers=""><span class="token function">yarn</span> <span class="token function">add</span> -D @babel/plugin-transform-flow-strip-types
</code></pre><p>在这个位置加入这个插件</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers="">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">[</span>
            <span class="token keyword">require</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'babel-plugin-named-asset-import'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                loaderMap<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                svg<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    ReactComponent<span class="token punctuation">:</span>
                    <span class="token string">'@svgr/webpack?-svgo,+titleProp,+ref![path]'</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="highlighted-line">            <span class="token punctuation">[</span><span class="token keyword">require</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"@babel/plugin-transform-flow-strip-types"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>            isEnvDevelopment <span class="token operator">&amp;&amp;</span>
            shouldUseReactRefresh <span class="token operator">&amp;&amp;</span>
            <span class="token keyword">require</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'react-refresh/babel'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">,</span>
</code></pre><h3 id="step3-修复报错">Step3 修复报错</h3><p>run起来，可以看到报错</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">Failed to compile.

./src/react/packages/react-reconciler/src/ReactFiberCommitWork.js
Attempted <span class="token function">import</span> error: <span class="token string">'appendChild'</span> is not exported from <span class="token string">'./ReactFiberHostConfig'</span><span class="token builtin class-name">.</span>
</code></pre><p>找到<code>src/react/packages/react-reconciler/src/ReactFiberHostConfig.js</code>文件，修改如下：</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="highlighted-line"><span class="token comment">// invariant(false, 'This module must be shimmed by a specific renderer.');</span></span><span class="highlighted-line"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./forks/ReactFiberHostConfig.dom"</span><span class="token punctuation">;</span></span></code></pre><p>接着会看到报错</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">./src/react/packages/react-reconciler/src/ReactFiberWorkLoop.old.js
Attempted <span class="token function">import</span> error: <span class="token string">'unstable_flushAllWithoutAsserting'</span> is not exported from <span class="token string">'scheduler'</span> <span class="token punctuation">(</span>imported as <span class="token string">'Scheduler'</span><span class="token punctuation">)</span>.
</code></pre><p>找到</p><p>文件<code>src/react/packages/scheduler/index.js</code>增加内容</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'./src/Scheduler'</span><span class="token punctuation">;</span>
<span class="highlighted-line"><span class="token keyword">export</span> <span class="token punctuation">{</span></span><span class="highlighted-line">    unstable_flushAllWithoutAsserting<span class="token punctuation">,</span></span><span class="highlighted-line">    unstable_flushNumberOfYields<span class="token punctuation">,</span></span><span class="highlighted-line">    unstable_flushExpired<span class="token punctuation">,</span></span><span class="highlighted-line">    unstable_clearYields<span class="token punctuation">,</span></span><span class="highlighted-line">    unstable_flushUntilNextPaint<span class="token punctuation">,</span></span><span class="highlighted-line">    unstable_flushAll<span class="token punctuation">,</span></span><span class="highlighted-line">    unstable_yieldValue<span class="token punctuation">,</span></span><span class="highlighted-line">    unstable_advanceTime</span><span class="highlighted-line">  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./src/SchedulerHostConfig.js'</span><span class="token punctuation">;</span></span></code></pre><p>再在<code>src/react/packages/scheduler/src/SchedulerHostConfig.js</code>修改并增加内容</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="highlighted-line"><span class="token comment">// throw new Error('This module must be shimmed by a specific build.');</span></span><span class="highlighted-line"><span class="token keyword">export</span> <span class="token punctuation">{</span></span><span class="highlighted-line">  unstable_flushAllWithoutAsserting<span class="token punctuation">,</span></span><span class="highlighted-line">  unstable_flushNumberOfYields<span class="token punctuation">,</span></span><span class="highlighted-line">  unstable_flushExpired<span class="token punctuation">,</span></span><span class="highlighted-line">  unstable_clearYields<span class="token punctuation">,</span></span><span class="highlighted-line">  unstable_flushUntilNextPaint<span class="token punctuation">,</span></span><span class="highlighted-line">  unstable_flushAll<span class="token punctuation">,</span></span><span class="highlighted-line">  unstable_yieldValue<span class="token punctuation">,</span></span><span class="highlighted-line">  unstable_advanceTime</span><span class="highlighted-line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./forks/SchedulerHostConfig.mock.js"</span><span class="token punctuation">;</span></span><span class="highlighted-line"></span><span class="highlighted-line"><span class="token keyword">export</span> <span class="token punctuation">{</span></span><span class="highlighted-line">  requestHostCallback<span class="token punctuation">,</span></span><span class="highlighted-line">  requestHostTimeout<span class="token punctuation">,</span></span><span class="highlighted-line">  cancelHostTimeout<span class="token punctuation">,</span></span><span class="highlighted-line">  shouldYieldToHost<span class="token punctuation">,</span></span><span class="highlighted-line">  getCurrentTime<span class="token punctuation">,</span></span><span class="highlighted-line">  forceFrameRate<span class="token punctuation">,</span></span><span class="highlighted-line">  requestPaint</span><span class="highlighted-line"><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./forks/SchedulerHostConfig.default.js"</span><span class="token punctuation">;</span></span></code></pre><p>然后cli里面不报错了，但是browser里面报错</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">ReferenceError: __DEV__ is not defined
Module.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span>
src/react/packages/react/src/ReactBaseClasses.js:13
</code></pre><p>找到<code>config/env.js</code>，在末尾修改</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// Stringify all values so we can feed into webpack DefinePlugin</span>
  <span class="token keyword">const</span> stringified <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string">'process.env'</span><span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">env<span class="token punctuation">,</span> key</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
      env<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>raw<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> env<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="highlighted-line">    __DEV__<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//true,</span></span><span class="highlighted-line">    __PROFILE__<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// true,</span></span><span class="highlighted-line">    __UMD__<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span><span class="highlighted-line">    __EXPERIMENTAL__<span class="token punctuation">:</span> <span class="token boolean">true</span></span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>可以看到又报错了，</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">TypeError: Cannot destructure property <span class="token string">'ReactCurrentDispatcher'</span> of <span class="token string">'shared_ReactSharedInternals__WEBPACK_IMPORTED_MODULE_3__.default'</span> as it is undefined.
Module.<span class="token operator">&lt;</span>anonymous<span class="token operator">></span>
src/react/packages/shared/ReactComponentStackFrame.js:28
</code></pre><p>修改<code>src/react/packages/shared/ReactSharedInternals.js</code>文件，</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="highlighted-line"><span class="token comment">// const ReactSharedInternals =</span></span><span class="highlighted-line"><span class="token comment">//   React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;</span></span><span class="highlighted-line"><span class="token keyword">import</span> ReactSharedInternals <span class="token keyword">from</span> <span class="token string">"../react/src/ReactSharedInternals"</span><span class="token punctuation">;</span></span><span class="token keyword">export</span> <span class="token keyword">default</span> ReactSharedInternals<span class="token punctuation">;</span>
</code></pre><p>然后又报错惹！</p><pre><code class="language-bash" data-language="bash" data-highlighted-line-numbers="">×
Error: Internal React error: invariant<span class="token punctuation">(</span><span class="token punctuation">)</span> is meant to be replaced at compile time. There is no runtime version.
</code></pre><p>修改<code>src/react/packages/shared/invariant.js</code>文件</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token parameter">condition<span class="token punctuation">,</span> format<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>
    <span class="token string">'Internal React error: invariant() is meant to be replaced at compile '</span> <span class="token operator">+</span>
      <span class="token string">'time. There is no runtime version.'</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h3 id="linter配置修改">linter配置修改</h3><p>首先eslint会报错，说react的包中fbjs的eslint-config不存在，我们让eslint忽略掉<code>src/react</code>就行。</p><p>新增<code>.eslintignore</code></p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="highlighted-line">src<span class="token operator">/</span>react</span></code></pre><p>修改<code>tsconfig.json</code>，排除掉react代码</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token punctuation">{</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>
    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"dom"</span><span class="token punctuation">,</span>
      <span class="token string">"dom.iterable"</span><span class="token punctuation">,</span>
      <span class="token string">"esnext"</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"skipLibCheck"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"allowSyntheticDefaultImports"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token property">"forceConsistentCasingInFileNames"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"noFallthroughCasesInSwitch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"esnext"</span><span class="token punctuation">,</span>
    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>
    <span class="token property">"resolveJsonModule"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"isolatedModules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"react"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">"src"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="highlighted-line">  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span></span><span class="highlighted-line">    <span class="token string">"src/react"</span></span><span class="highlighted-line">  <span class="token punctuation">]</span></span><span class="token punctuation">}</span>
</code></pre><h2 id="总结和最终代码">总结和最终代码</h2><p>完成了这些设定之后，我们就可以愉快的在app里玩react的源码啦～</p><p>工程的代码在<a href="https://github.com/mzvast/debug-react-ts">github</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[General principles of software development]]></title>
            <link>/posts/2020-12-03-2102-General-Principles-of-software-development</link>
            <guid>/posts/2020-12-03-2102-General-Principles-of-software-development</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>本文是对《软件设计的 201 个原则》的第1章——软件开发的一般原则的学习</p><h2 id="001-质量第一">001 质量第一</h2><p>质量第一，没有可权衡的余地</p><p>当你被要求加快测试、忽视剩余的少量bug、在设计或需求达成一致前就开始编码时，直接说&quot;不&quot;。</p><h2 id="002-质量在每个人眼中不同">002 质量在每个人眼中不同</h2><p>对开发者来说，质量可能是优雅的设计或优雅的代码。</p><p>对在紧张环境中工作的用户来说，质量可能是响应时间或大容量。</p><p>对成本敏感的项目来说，质量可能是低开发成本。</p><p>对一些客户来说，质量可能是满足他们所有已知和未知的需求。</p><p>这里的难题是，以上要求可能无法<code>完全兼顾</code>。</p><p>当优化某人关注的质量时，可能会危害其他人关注的质量（这就是温伯格的“政治困境”原则）。</p><p>项目必须确定各因素的<code>优先级</code>，并清晰地传达给所有相关方。</p><h2 id="003-开发效率和质量密不可分">003 开发效率和质量密不可分</h2><p>对质量要求越高，开发效率就越低。对质量要求越低，开发效率就越高。</p><h2 id="004-高质量软件是可以实现的">004 高质量软件是可以实现的</h2><p>大型软件系统可以以非常高的质量构建，但价格昂贵：每行代码高达 1000美元。</p><p>作为软件开发人员，应该学习和了解已被验证、可以极大提高软件质量的方法。</p><p>这些方法包括：<code>让客户参与（原则 8）、原型设计（在全面开发之前验证需求；原则 11 至 13）、保持设计简单（原则 67）、代码评审（原则 98）和雇用最优秀的人（原则 130 和 131）</code>。</p><p>作为客户，追求卓越的同时，要意识到随之而来的高额成本。</p><h2 id="005-不要试图改进质量">005 不要试图改进质量</h2><p>质量无法通过软件的改进来获得。</p><p>这适用于质量的任何定义：可维护性、可靠性、适应性、可测试性、安全性等等。</p><p>即使我们在开发过程中努力，使软件具备高质量也是十分不易的。如果我们不努力，又怎么可能期望获得高质量呢？</p><p>这就是绝不能将“一次性原型”转换成产品的主要原因（原则 11）。</p><h2 id="006-低可靠性比低效率更糟糕">006 低可靠性比低效率更糟糕</h2><p>如果软件执行效率不高，通常可以分离消耗大部分执行时间的程序单元，重新设计或编码以提高效率（原则194）。</p><p>低可靠性问题不仅难以发现，也更难以修复。</p><p>一旦低可靠性问题显现，通常难以隔离其影响。</p><h2 id="007-尽早把产品交给客户">007 尽早把产品交给客户</h2><p>如果遵循传统的瀑布模型，那么在99%的开发资源已经耗尽之后，才会第一次向客户交付产品。</p><p>可在开发过程的早期构建一个快速而粗糙的原型，将这个原型交付给客户，收集反馈，然后编写需求规格说明、并进行正规的开发。使用这种方法，当客户体验到第一个产品版本时，只消耗了5–20%的开发资源。</p><p>这有助于确保将剩余的资源用于开发正确的系统。</p><h2 id="008-与客户用户沟通">008 与客户/用户沟通</h2><p>永远不要忽视软件开发的原因：满足真正的需求，解决真正的问题。</p><p>解决真正需求的<strong><em><code>唯一</code></em></strong>方法，是去跟有真正需求的人沟通。</p><h2 id="009-激励开发者与客户对齐">009 激励开发者与客户对齐</h2><p>为对齐双方的目标，有如下方法：</p><p>（1）按优先级对需求排序（原则50），以便开发人员了解它们的相对重要性</p><p>（2）根据需求的优先级奖励开发人员（例如：所有高优先级的需求必须完成；每完成一个中优先级的需求，开发人员可获得一些额外的小奖励；每完成一个低优先级的需求，可获得的奖励非常小）</p><p>（3）对逾期交付实行严厉的处罚</p><h2 id="010-做好抛弃的准备">010 做好抛弃的准备</h2><p>对一个项目来说，最关键的成功因素之一是，它是否是全新的。</p><p>在全新领域(可能涉及：应用程序、体系结构、接口、算法等)研发的程序很少第一次就成功。</p><p>弗雷德·布鲁克斯（Fred Brooks）在《人月神话》中明确建议：“无论如何，你一定要做好抛弃的准备”。</p><p>这个建议最初由温斯顿·罗伊斯（Winston Royce）在1970年提出，他说一个人应该做好准备：<code>第一个完整部署的系统，往往是第二个被创建的系统</code>。</p><p>第一个系统至少可用于验证关键的设计问题和操作概念。</p><p>此外，罗伊斯建议，应该使用大约25%的资源开发这样的预发布版本。</p><p>作为一个全新定制产品的开发人员，在开始全面的开发之前，要规划开发一系列“一次性原型”(原则11、12和13)。</p><p>作为商用大规模系统的开发人员，可以预期，第一个产品版本在一定年限内将能够被修改，之后它将被完全替换（相关原则185，186，188和201）。</p><p>作为产品的维护者，请注意，在程序变得不稳定以至于必须被替换之前，你对程序可以调整的地方还有很多 (请参阅相关原则 186，191，195 和 197)。</p><h2 id="010-开发正确的原型">010 开发正确的原型</h2><p>有两种原型：一次性（throwaway）原型和演进式（evolutionary）原型</p><p>一次性原型用快速而粗糙的方式构建，交给客户以获得反馈，在得到期待的信息后即被废弃。获得的信息被整理进需求规格说明，用于正规的产品开发。</p><p>演进式原型用高质量的方式构建，交给客户以获得反馈，获得期待的信息便进行修改，以更加贴近用户的需求。重复此过程，直到产品收敛到所期望的样子。</p><p>一次性原型应该在关键需求特性没有很好理解时使用。</p><p>演进式原型应该在关键特性已被充分理解，但很多其他需求特性没被充分理解时使用。</p><p>如果对大多数功能都不了解，则首先构建一个一次性原型，然后从零开始构建一个演进式原型。</p><h2 id="012-构建合适功能的原型">012 构建合适功能的原型</h2><p>当建立一次性原型时，只需要开发那些没有被充分理解的特性。如果你开发已充分理解的特性，最终除了浪费资源外，将一无所获。</p><p>当建立演进式原型（原则13）时，要优先开发那些已经被充分理解的特性。（注意，它们可能已经被充分理解，因为之前已使用一次性原型进行验证）</p><p>你的希望是，通过体验这些特性，用户能更好地确定其它需求。</p><p>如果你基于模糊的需求(高质量的)开发了一个演进式原型，一旦需求搞错了，你将不得不抛弃这个高质量的软件，并且浪费了资源。</p><h2 id="013-要快速的开发一次性原型">013 要快速的开发一次性原型</h2><p>如果你已经决定开发一次性原型，就要用最快的方式。</p><p>不用担心质量。可使用“一页纸”的需求规格说明。不用担心设计或编码中的文档。可以使用任何工具。可以使用任何编程语言，只要能够便利程序的快速开发。不用担心编程语言的可维护性。</p><h2 id="014-渐进地扩展系统">014 渐进地扩展系统</h2><p>渐进地扩展系统，是降低软件开发风险的最有效方法之一。</p><p>从一个小的可用系统开始，只实现少数功能。然后逐步扩展，覆盖越来越多的最终功能子集。</p><p>这样做的好处是：（1）降低每次开发的风险；（2）看到一个产品版本，通常可以帮助用户想象出他们想要的其他功能。</p><p>这样做的缺点是：如果过早选择了一个不合适的系统架构，则可能需要全面的重新设计、才能适应后续的变更。在开始增量开发之前，开发一次性原型（原则11，12和13），可以降低这种风险。</p><h2 id="015-看到越多，需要越多">015 看到越多，需要越多</h2><p>在软件行业，一次次见证了：提供给用户越多的功能（或性能），用户想要的功能（或性能）就越多。</p><p>当然，这支持了原则7（尽早把产品交给客户），原则14（渐进的开发系统），原则185（软件将会持续改变）以及原则201（系统的存在促进演变）。</p><p>但更重要的是，你必须为不可避免的情况做好准备。</p><p>管理和工程流程的每个方面都应该意识到，一旦客户看到产品，他们就会想要更多。</p><p>这意味着，所产生的每个文档都应该以有利于更改的方式进行存储和组织。</p><p>这意味着，配置管理流程（原则174）必须在距离交付很长时间之前就位。</p><p>这也意味着，在软件部署后不久，你就应该准备好，以应对用户口头或书面请求的冲击。</p><p>这还意味着，你选择的设计方案应使容量、输入速率和功能都很容易变更。</p><h2 id="016-开发过程中的变化是不可避免的">016 开发过程中的变化是不可避免的</h2><p>爱德华·伯索夫（Edward Bersoff）等人将系统工程的第一定律定义为：“<code>无论你在系统[开发]生命周期中的何处，系统都将发生变化，并且对其进行改变的愿望将在整个生命周期中持续存在。</code>”</p><p>与原则 185 和 201（强调软件部署后，需求可能发生巨大变化）不同，本原则想表达，在开发过程中，软件也可能发生巨大变化。</p><p>这些变化可能体现在编写新的代码、新的测试计划或新的需求规格说明。</p><p>这些变化可能意味着，要去修复某个被发现是不正确的中间产品。可能它们反映了完善、或改进产品的自然过程。</p><p>为变化做好准备，要确保：软件开发涉及的所有产品之间的相互引用都是适当的（原则 43，62 和 107）；变更管理流程已就位（原则 174，178 至 183）；预算和进度表有足够的余地，不会为了满足预算和进度表而倾向于忽略必要的变化（原则 147，148 和 160）。</p><h2 id="017-只要可能，购买而非开发">017 只要可能，购买而非开发</h2><p>要降低不断上涨的软件开发成本和风险，最有效的方法就是，购买现成的软件，而不是自己从头开发。</p><p>确实，现成的软件也许只能解决 75％ 的问题。</p><p>但考虑一下从头开发的选择吧：支付至少 10 倍于购买软件的费用，冒着超出预算 100％ 且延期的风险（如果最后能够完成！），并且最终发现，它只能满足75%的预期。</p><p>对一个客户来说，新的软件开发项目似乎最初总是令人兴奋。</p><p>开发团队也是“乐观的”，对“最终”解决方案充满了希望。</p><p>但几乎很少有软件开发项目能够顺利运行。不断增加的成本通常会导致需求被缩减，最终研发出的软件，它可以满足的需求，也许跟现成的软件差不多。</p><p><code>作为一个开发者，应该复用尽可能多的软件。复用是“购买而非开发”原则在较小范围内的体现</code>。参考相关的原则 84。</p><h2 id="018-让软件只需简短的用户手册">018 让软件只需简短的用户手册</h2><p>手册越短，软件质量越好。</p><h2 id="019-每个复杂问题都有一个解决方案">019 每个复杂问题都有一个解决方案</h2><p>Wlad Turski说，“每一个复杂的问题，都有一个简单的解决方案…但这是错误的！”</p><p>无论任何人向你提出“只要遵循这10个简单步骤，软件质量问题就会消失”，或是其他类似建议，都要保持高度的怀疑。</p><h2 id="020-记录你的假设">020 记录你的假设</h2><p>系统运行的环境在本质上是无限的，不可能被完全理解。</p><p>当我们开发一个系统，宣称要解决某个环境中的一个问题时，我们会对该环境进行假设。</p><p>对需求工程、设计、编码和测试期间所做的所有假设，始终保持觉察是不可能的。</p><p>尽管如此，我还是建议，对你有意识做出的假设做个记录。即使这个假设是显而易见的、或其它选项很荒谬，也要这样做。</p><p>还要记录它们的影响，也就是说在产品中，这些假设是如何体现的？理想情况下，你应该会通过封装每个假设来隔离这些影响（原则65）。</p><h2 id="021-不同的阶段，使用不同的语言">021 不同的阶段，使用不同的语言</h2><p>使用越多的符号、越丰富多样的表达方式，我们就越能更好地对开发中的产品进行可视化。</p><p>对于需求工程，应该选择一组最优的技术和语言（原则47和48）。</p><p>对于设计工作，应该选择一组最优的技术和语言（原则63和81）。</p><p>对于编码，应该选择一个最适合的语言（原则102和103）。</p><p>另一方面，如果一个语言从某方面在两个阶段都是最优选择，就务必使用它。</p><h2 id="022-技术优先于工具">022 技术优先于工具</h2><p>在使用工具前，你应该“有规矩”（即，理解并遵循适当的软件开发方法）。</p><p>当然，你也要了解如何使用工具，但这和“有规矩”相比是第二位的。</p><p>我强烈建议，在投资于工具、以对某个技术“自动化”之前，先手工验证这个技术，并说服自己和管理层、这个技术是可行的。</p><p>在大多数情况下，如果一项技术在手工时不灵，那在自动时它也不灵。</p><h2 id="023-使用工具，但要务实">023 使用工具，但要务实</h2><p>一些软件工具（如CASE）会让他们的用户更加高效。</p><p>务必要使用它们。</p><h2 id="024-把工具交给优秀的工程师">024 把工具交给优秀的工程师</h2><p>然而，就像文字处理软件不能让一个平庸的小说家（写小说，但卖不出去）变得出色，CASE工具也不能让一个平庸的软件工程师（写软件，但不可靠、不满足用户需求等）变的出色。</p><p>因此，你想把CASE工具只提供给优秀的工程师。</p><p>你最不想做的一件事，就是把CASE工具提供给平庸的工程师：你希望他们尽量少（而非多）的开发出质量低劣的软件。</p><h2 id="025-case工具是昂贵的">025 CASE工具是昂贵的</h2><p>CASE工具对软件开发是必需的。</p><p>它们应该被视为业务成本的一部分。</p><p>在做投资回报分析时，不仅需要考虑购买工具的高额费用，还需要考虑没有购买工具带来的更高代价（更低开发效率、更高的客户失望率、延迟的产品发布、增加的重复工作、更差的产品质量、增加的员工流动）。</p><h2 id="026-知道何时和知道如何同样重要">026 “知道何时”和“知道如何”同样重要</h2><p>知道如何很好地使用技术，既不会让技术本身成为好技术，也不会让你成为一名优秀的工程师。</p><p>一名优秀的工程师了解很多不同种类的技术，并且知道每种技术何时适合项目或项目的一部分。</p><p>在进行需求工程时，要了解哪种技术对问题的哪些方面最有用（原则 47）。</p><p>当进行设计时，要理解哪些技术对系统的哪些方面最有用（原则 63）。</p><p>当进行编码时，要选择最合适的编程语言（原则 102）。</p><h2 id="027-实现目标就停止">027 实现目标就停止</h2><p>软件工程师遵循许多方法（也称为技术或流程）。</p><p>每个方法都有各自的用途，通常对应软件开发的一个子目标。</p><p>例如，结构化（或者面向对象）分析的目标是理解要解决的问题，DARTS的目标是处理架构，结构化设计的目标是理清调用层次结构。</p><p>这些例子中的方法都包含一系列的步骤。</p><p>不要太过陷于具体的方法，而忘记了目标本身。</p><p>不要为更换目标而感到内疚。</p><p>例如，如果只执行了方法的一半步骤，你就理解了问题，那就停下来。</p><p>另一方面，你需要对整个软件过程有很好的认识，因为基于本原则所抛弃的某个方法的后续步骤可能会对未来软件的使用产生重要影响。</p><h2 id="028-了解形式化方法">028 了解形式化方法</h2><p>每个项目中，至少应该有一个人熟练使用形式化方法，以确保不会错过提升产品质量的机会。</p><p>很多人以为，使用形式化方法的唯一途径，就是完全使用它们来定义系统。</p><p>其实并非如此。</p><p>实际上，最有效的方法之一，是先用自然语言描述。</p><p>尝试用更形式化的方式书写，会帮助你发现在自然语言中存在的问题。</p><p>修正自然语言表达中的问题，你会得到一个更好的文档。</p><h2 id="029-和组织荣辱与共">029 和组织荣辱与共</h2><p>尽管有许多影响因素，有个日本的观念与此密切相关：产品中的缺陷是公司的耻辱；软件工程师引起的公司耻辱，是工程师的耻辱。</p><p>一般而言，当任何人发现你在产品中的错误时，你应该心存感激，而不是试图辩解。</p><p>将错误广而告之有两个好处：(1) 帮助其他工程师，避免同样的错误 (2) 对后续的错误修正，也可以不那么抵触。</p><h2 id="030-跟风要小心">030 跟风要小心</h2><p>大家都做的事情，不一定对你也是正确的。</p><p>也许它是正确的，但你也应该评估它对你所处环境的适用性。</p><p>这样的例子包括：面向对象，软件度量（原则142、143、149、150 和 151)，软件复用（原则84），过程成熟度（原则163），计算机辅助软件工程（CASE，原则22至25），原型设计（原则11、12、13、42）。</p><p>在所有案例中，这些方法都提供了非常积极的帮助，体现在提高质量、降低成本、提高用户满意度等方面。</p><p>然而，这些好处只在它们有作用的组织中才会显现出来。</p><p>尽管回报显著，它们的作用常常被过度宣传，其实它们并不是那么必然或通用。</p><p>当你学习“新”技术，不要轻易接受与之相关的不可避免的炒作（原则129）。</p><p>仔细阅读。</p><p>理性考虑它的收益和风险。</p><p>在大规模应用之前进行试验。</p><p>但同时也绝对不要忽略“新”技术（参见原则31）。</p><h2 id="031-不要忽视技术">031 不要忽视技术</h2><p>软件工程技术日新月异。在几年内对新的发展视而不见，是你无法承受的。</p><p>软件工程的发展像波浪一样。每一波都会带来大量的“潮流元素”和流行语。</p><p>尽管每一波只持续5–7年，但它们并不是简单消失。恰恰相反，其后每一波都是基于前一波的最好特征。(理想情况，“最好”应该指“最有效”，但遗憾的是，它往往指“最流行”)</p><p>有两种方式可以让你紧跟技术潮流：阅读正确的杂志，和正确的人交谈。《IEEE Software》期刊就是一个很好的渠道，可以了解未来5年内可能有用的技术。</p><p>《PC Week》、《MacWorld》等是学习硬件平台、常见商用工具和语言的好地方。要通过和人交谈来学习，就要找到正确的人。虽然和同事交流很必要，但还不够。</p><p>每年都应该努力参加1–2个关键会议。和参会者的交流，很可能比会议报告更重要。</p><h2 id="032-使用文档标准">032 使用文档标准</h2><p>如果你的项目、组织或客户要求遵循一套文档标准，就要遵循它。无论如何，永远不要抱怨标准，认为这是不需要的。</p><p>所有我熟悉的标准，无论是政府标准还是商业标准，都提供了组织和内容方面的指导。</p><p>创新！即遵循标准，同时聪明的执行。无论标准怎么规定，把你知道应有的内容都包含进去。</p><p>这意味着用清晰的语言来编写，意味着添加额外的有意义的组织层级。</p><p>IEEE发布的文档标准，是我所知道的、最广泛的可用软件文档标准之一。</p><h2 id="033-文档要有术语表">033 文档要有术语表</h2><h2 id="034-软件文档都要有索引">034 软件文档都要有索引</h2><h2 id="035-对相同的概念，用相同的名字">035 对相同的概念，用相同的名字</h2><p>在技术文档中，必须使用相同的术语来表示相同的概念，使用相同的语句结构来表述相似的信息。</p><h2 id="036-研究再转化，不可行">036 研究再转化，不可行</h2><p>要实现从研究所到开发机构的最成功的成果转化，从一开始双方就要紧密合作。需要使用工业界的环境作为萌发想法并验证效果的实验室，而不是在想法成形后再做技术转化。</p><h2 id="037-要承担责任">037 要承担责任</h2><p>在所有工程学科中，如果一个设计失败，工程师会受到责备。因此，当一座大桥倒塌，我们会问“工程师哪里做错了？”当一个软件失败了，工程师很少受到责备。如果他们被责备了，他们会回答，“肯定是编译器出错了”，或“我只是按照指定方法的15个步骤做的”，或“我的经理让我这么干的”，或“计划剩余的时间不够”。</p><p>事实是，在任何工程学科中，用最好的方法也可能产出糟糕的设计，用最过时的方法也可能做出精致的设计。</p><p>不要有任何借口。如果你是一个系统的开发者，把它做好是你的责任。要承担这个责任。<code>要么做好，要么就压根不做</code>。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Management Principles of software development]]></title>
            <link>/posts/2020-12-03-2230-Management-Principles-of-software-development</link>
            <guid>/posts/2020-12-03-2230-Management-Principles-of-software-development</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>本文是对《软件设计的 201 个原则》的第7章——软件开发的管理原则的学习</p><p>管理 是围绕软件开发的所有工程活动，进行计划（plan）、控制（control）、监视（monitor）和报告（report）的一组活动。</p><h2 id="127-好的管理比好的技术更重要">127 好的管理比好的技术更重要</h2><p>所有伟大的技术（CASE工具、技术、计算机、文字处理器等）都弥补不了拙劣的管理。</p><p>好的管理，即使是在资源匮乏的情况下，也能产生巨大的效果。</p><h2 id="128-使用恰当的方法">128 使用恰当的方法</h2><p>技术问题需要使用技术的方法。</p><p>管理问题需要使用管理的方法。</p><p>政治问题需要用政治的方法。</p><p>切忌用不恰当的方法来解决问题。</p><h2 id="129-不要相信你读到的一切">129 不要相信你读到的一切</h2><h2 id="130-理解客户的优先级">130 理解客户的优先级</h2><p>很有可能的是，如果客户能按时获得10%的系统功能，那么他们宁愿90%的功能延迟交付。</p><p>原则 8 的推论更令人震惊，但很有可能就是这样的。一定要弄明白！</p><p>当你和客户沟通时，一定要确认你知道客户的优先级。</p><p>这些可以很容易地记录在需求规格说明中（原则 50），但<code>真正的挑战是理解可能不断变化的优先级</code>。</p><p>此外，你必须理解客户对于“必要”（essential）、“期望”（desirable）和“可选”（optional）的说明。</p><h2 id="131-人是成功的关键">131 人是成功的关键</h2><p>具备合适经验、才能、培训的高技能人才，是在预算内按时完成满足用户需求软件的关键。</p><p>根据构造性成本模型（COCOMO）(Boehm, B., Software Enginering Economics, Englewood Cliffs, N.J.: Prentice Hall, 1984)估算，<code>最优秀的人效率是其他人的四倍</code>。</p><p>如果最优秀的人花费四倍的薪水，你可以做到收支平衡，而且最终你很可能会得到一个更好地产品（原则 82）。</p><p>如果他们的花费没有这么多，你降低了成本，还得到更好的产品。</p><p>这是双赢。</p><p>在面试候选人时，记住<code>人才质量是无法替代的</code>。</p><p>在面试完两个人后，公司经常说，“面试者 x 比 y 更好，但是 y 已经足够好了，并且成本更低”。</p><p>你不可能有个全明星阵容的组织，但是，除非你现在拥有的超级明星过多，否则雇佣他们吧！</p><h2 id="132-几个好手要强过很多生手">132 几个好手要强过很多生手</h2><p>本原则与原则 131 是一致的。原则 131 说你应该总是雇佣最好的工程师。</p><p>本原则想说：对一个关键任务，你最好只安排少数有足够经验的工程师，而不是安排许多没有经验的工程师。</p><p>另一方面，Manny Lehman 警告说，你不能完全依赖“少数优秀的人”。如果他们离职了呢？</p><p>最好的建议是，在一个项目中建立合适的人员配比，并且切忌不要向两个极端发展。</p><h2 id="133-倾听你的员工">133 倾听你的员工</h2><p>你必须信任那些为你工作的人。</p><p>信任的第一个原则就是倾听。</p><h2 id="134-信任你的员工">134 信任你的员工</h2><p>相互信任是成功管理的要素。</p><p>成为一个坏人的机会远远比成为一个好人要多。</p><p>抓住每个能让你成为好人的机会。</p><h2 id="135-期望优秀">135 期望优秀</h2><p>如果你对员工有更高的期待，他们将表现的更好。</p><h2 id="136-沟通技巧是必要的">136 沟通技巧是必要的</h2><p>在为你的项目招募成员时，不要低估团队合作和沟通的重要性。</p><p>最好的设计师可能会变成差劲的资产，如果他/她不能沟通、说服、倾听和妥协。</p><h2 id="137-端茶送水">137 端茶送水</h2><p>当你的员工要工作很长时间来完成软件工程的工作时，你应该工作相同的时间。</p><h2 id="138-人们的动机是不同的">138 人们的动机是不同的</h2><p>众所周知，人各不同，负面和正面的激励都起作用，但是正面的激励经常被管理层忽视。</p><h2 id="139-让办公室保持安静">139 让办公室保持安静</h2><p>最有效率的员工和公司都拥有安静和私密的办公区。</p><h2 id="140-人和时间是不可互换的">140 人和时间是不可互换的</h2><p>只用“人-月”来衡量一个项目几乎没有任何意义。</p><p>假设你有 10 个人在做一个预期三个月完工的项目。</p><p>现在你认为你比计划晚了三个月，也就是说，你预估还需要 60 人月（6个月 * 10个人）。</p><p>你不能再加 10 个人并期望项目回到计划上来。</p><p>这个原则通常叫做布鲁克斯定律（Brooks’ Law）。</p><h2 id="141-软件工程师之间存在巨大的差异">141 软件工程师之间存在巨大的差异</h2><p>从最好的软件工程师到最差的软件工程师，研发效率（按每人月的代码行来衡量）可能相差 25 倍之多，质量（按每千行代码中发现的错误来衡量）可能相差 10 倍之多。</p><h2 id="142-你可以优化任何你想要优化的">142 你可以优化任何你想要优化的</h2><p>事实是，在产品开发过程中，有很多权衡—不同的权衡—要不断进行取舍。与你的员工一起工作，并帮助他们了解你和你的客户的优先级。</p><h2 id="143-不显眼地收集数据">143 不显眼地收集数据</h2><p>数据收集在以下方面极为重要：帮助未来成本预测，评估项目或组织的当前状态，评估管理、过程或技术变更的影响等。</p><h2 id="144-每行代码的成本是没用的">144 每行代码的成本是没用的</h2><h2 id="145-衡量开发效率没有完美的方法">145 衡量开发效率没有完美的方法</h2><p>接受这个事实：完美是不可能的。使用开发效率度量和成本估算模型来确认你的直觉和你的亲身经验。永远不要依靠它们作为你唯一的衡量。</p><h2 id="146-剪裁成本估算方法">146 剪裁成本估算方法</h2><h2 id="147-不要设定不切实际的截止日期">147 不要设定不切实际的截止日期</h2><p>不可避免的结局是，一个不切实际的截止日期将无法得到满足。这样截止日期的设立削弱士气，使你的员工不信任你，造成高离职率，并产生其他不良影响。</p><p>为了满足日程表的约束，质量通常会被降低。这损害了整个软件行业的信誉。</p><p>问题通常不在于软件工程师的生产力低下或经理的管理不善。问题在于预先做出的估算很差。</p><h2 id="148-避免不可能">148 避免不可能</h2><p>Barry Boehm 将“不可能的区域”定义为：预期的产品开发时间与需要消耗的人月数之间的关系。</p><p>具体来说，从编写软件需求规格说明到交付产品所花费的时间不会少于 2.15 乘以人月的立方根，即：</p><pre><code>T &gt; 2.15 * sqrt[3]{PM}
</code></pre><p>所有已完成项目中有 99％ 遵守了该规则。是什么让你认为自己可以做得更好？ 如果你仍然认为可以做更好，请参阅原则 3、19、158 和 159。</p><h2 id="149-评估之前先要了解">149 评估之前先要了解</h2><p>当为你的项目选择指标时，请确保你在测量的与你要实现的目标有关。（请参阅 1993 年 9 月 《IEEE Software》的Manager Column中的开头段落）。这通常需要使用多个指标。</p><p>记住：即使每个人都以同一种方式进行衡量某事，这种方式也并非自动适合你。要考虑你的指标。由于所有东西都可以被观察（并且在大多数情况下可以被测量），因此请仔细选择什么是你想要观察（和测量）的。</p><h2 id="150-收集生产力数据">150 收集生产力数据</h2><p>少量经过充分理解、认真收集、模型化及演绎的数据，要好于大量没有这些特性的数据。</p><h2 id="151-不要忘记团队开发效率">151 不要忘记团队开发效率</h2><p>优化所有个体的生产力并不一定会产出最佳的团队生产力。</p><p>曼尼·雷曼（Manny Lehman）报告了一项软件开发工作，其中个人生产力增加了两倍，而企业生产力却下降了！</p><p>这里有两个教训要总结：首先，不同的措施适用于不同的人。其次，要衡量团队的整体效率，可通过跟踪一些数据（如，按照时间周期和问题难度总结的、反映团队解决突出问题能力的报告）。</p><h2 id="152-locpm-与语言无关">152 LOC/PM 与语言无关</h2><p>通常认为，不管使用哪种语言，程序员平均每人每月可以生成 x 行高质量代码。</p><p>C.Jones在《Programming Productivity》（New York: McGraw-Hill, 1986, 第一章）中提出相反的观点。使用高级语言时，实际的生产力当然会大大提高，因为 500 行 Ada 代码可以做的事比 500 行汇编代码多得多。此外，语言选择会极大地影响可维护性（原则 193）。</p><h2 id="153-相信排期">153 相信排期</h2><p>一旦建立了可行的排期（原则 146、147 和 148）并分配了适当的资源（原则 157），所有各方都必须相信排期。</p><p>最好的建议是，让工程师制定排期。不幸的是，这并不总是可能的。</p><h2 id="154-精确的成本估算并不是万无一失的">154 精确的成本估算并不是万无一失的</h2><p>原因有三个：（1）你，（2）假设（3）概率。</p><p>首先，是你。你的领导能力将对实际结果产生重大影响。例如，你可以在五秒钟内破坏团队花了一年时间建立的士气。</p><p>其次，你为生成初始估计所做的所有假设可能不都证明是准确的。例如，如果你只有数量更少的合格人才怎么办？如果需求改变怎么办？如果你的关键人物生病了怎么办？如果一半的工作站在你最需要的时候出现故障怎么办？</p><p>第三，估计值只是概率分布中的峰值。如果我告诉你我要抛硬币 100 次，并要求你预测出现硬币正面的次数，你很可能会选择 50 次。这是否意味着真的会出现 50 次正面？当然不是。实际上，如果真的刚好出现了 50 次正面，你将感到很惊奇！</p><h2 id="155-定期重新评估排期">155 定期重新评估排期</h2><p>排期通常在项目启动时设定。其中包括中间期限和产品交付期限。每个阶段完成后，排期必须被重新评估。</p><p>一个进度落后的项目很少能在后续阶段恢复到原计划。</p><p>作为一名管理者，你的责任是预防灾难。</p><p>相反，应与客户和/或上级建立工作关系。要报告每个可能的日期变更（通常是延期），并讨论克服这些困难的可选策略。只有各方的早期干预和参与才能防止延期升级。</p><h2 id="156-轻微的低估不总是坏事">156 轻微的低估不总是坏事</h2><p>假设士气没有削弱，在被认为稍稍落后进度的项目中，其成员会努力工作赶上进度，从而提高生产力。类似地，在被认为稍稍提前进度的项目中，其成员经常会休假、工作更少时间、花更长的时间读邮件、以其他方式放松，从而降低生产力。因此，成本预估本身就会影响项目产出。对任何一个特定的项目，被轻微低估成本对比被轻微高估成本，都会花费更少的资源。然而要注意，如果项目成员认为排期被严重低估了，士气和生产力都会下降。</p><h2 id="157-分配合适的资源">157 分配合适的资源</h2><p>不管人员的质量如何，工具、语言或流程的可用性如何，人为强加的进度和不恰当的预算将会毁了一个项目。</p><p>如果你试图压缩排期或预算，参与项目的工程师将不会高效地工作，当不可避免的延期发生时，没有人会采取行动，士气将受到影响，并且最重要的是，项目的花费很可能比合理的成本要高。</p><h2 id="158-制定详细的项目计划">158 制定详细的项目计划</h2><p>每个软件项目都需要一个计划。详细程度应该适合于项目的大小和复杂性。</p><p>你需要计划的最小集合如下：</p><ul><li><p>显示任务之间相互依赖关系的PERT表。</p></li><li><p>显示每个任务的活动何时进行的甘特图。</p></li><li><p>实际里程碑的列表(基于早期的项目，见原则 150)。</p></li><li><p>编写文档和代码的一套标准。</p></li><li><p>各种不同的任务中的人员分配。</p></li></ul><p>一个没有计划的项目，在它开始之前就已经失控了。</p><p>正如《爱丽丝梦游仙境》中柴郡猫对爱丽丝所说：“如果你不知道要去哪里，那你也就无法达到那里！”</p><h2 id="159-及时更新你的计划">159 及时更新你的计划</h2><p>有一个过时的计划比完全没有计划更糟糕。当你没有计划时，你应该知道你已经失控了。</p><p>一份写得好的计划应该列举风险、潜在风险正成为威胁的警告信号、为减少威胁而制定的应急计划（原则 162 ）。</p><p>随着项目的进行，如果预期的风险成为威胁，要实施应急计划并更新项目计划。</p><p>真正的挑战是那些不可预见的变化。在这种时候，人们常常需要重新做计划。</p><p>在这种时候，人们常常需要全面地重新规划整个项目的其余部分，包括新的假设、新的风险、新的应急计划、新的排期、新的里程碑、新的人力资源分配等等。</p><h2 id="160-避免驻波">160 避免驻波</h2><p>遵循原则 159 (保持你的计划是最新的)的一个奇怪的副作用是驻波。</p><p>不要因为你只是落后了几天，就认为问题会消失。所有的项目都是&quot;一天一天地落后&quot;。</p><h2 id="161-知晓十大风险">161 知晓十大风险</h2><ul><li><p>人员短缺（原则 131）。</p></li><li><p>不切实际的排期（原则 148）。</p></li><li><p>不理解需求（原则 40）。</p></li><li><p>开发糟糕的用户界面（原则 42）。</p></li><li><p>当客户并不需要时尝试镀金（原则 67）。</p></li><li><p>不控制需求变更（原则 179 和 189）。</p></li><li><p>缺乏可重用的或者接口化的组件。</p></li><li><p>外部执行任务不足。(由外部承包商完成的任务不满足要求。)</p></li><li><p>糟糕的响应时间。</p></li><li><p>试图超越当前计算机技术的能力。</p></li></ul><h2 id="162-预先了解风险">162 预先了解风险</h2><p>在项目计划的早期阶段，要梳理与你项目相关的最大风险列表。</p><p>对于每个风险，要量化其真正发生会带来的破坏程度，并量化这种损失发生的可能性。</p><p>这两个数字的乘积，是你对特定风险的风险敞口。</p><p>在项目开始时，构建一个决策树，梳理所有可能降低风险敞口的方法。</p><p>然后要么立刻对可能造成的后果采取行动；要么制定计划，在风险敞口超过可接受范围时，采取各种措施。</p><h2 id="163-使用适当的流程模型">163 使用适当的流程模型</h2><p>软件项目中可以使用很多流程模型：瀑布模型、一次性原型、增量开发、螺旋模型、操作原型等等。</p><p>没有任何一种流程模型适用于公司中的所有项目。</p><p>每个项目都必须选择一个最适合它的流程。</p><h2 id="164-方法无法挽救你">164 方法无法挽救你</h2><p>那些以往表现不佳的组织，在采用最新流行的方法后仍然会表现不佳。</p><p>作为一名管理者，要提防那些声称基于新的方法将大大提高质量或生产力的虚假的预言家。</p><p>采用新的方法并没有错，但一个公司如果过去“失败”过（不论是生产力还是质量），在寻找解决方案之前，请尝试找出失败的根源。</p><p>你现在使用的方法，很可能不是问题的根源！</p><h2 id="165-没有奇迹般提升效率的秘密">165 没有奇迹般提升效率的秘密</h2><p>软件行业的生产力正在适度提高（每年 3% 至 5％）。事实是，我们有一种简单的方法来降低需求工程的成本：就是不做！对所有其它阶段也是如此。实际上，<code>只通过不开发软件，我们就可以节省很多钱！</code></p><p>你应该会对可削减几个百分点成本或提高几个百分点质量的工具、语言和方法感到满意。然而，如果不了解对客户满意度的影响，降低成本毫无意义。</p><h2 id="166-了解进度的含义">166 了解进度的含义</h2><p>下面是一些衡量进度的有意义的标准：</p><ul><li><p>BCWP：“已完成工作预算费用”（Budgeted cost of work performed）衡量你预期目前已完成的工作会花费多少。</p></li><li><p>ACWP：“已完成工作实际费用”（Actual cost of work performed）衡量你在项目中实际花费了多少。</p></li><li><p>BCWE：“预期工作预算费用”（Budgeted cost of work expected）衡量你预期花费多少。</p></li><li><p>(BCWP-BCWE)/BCWE：它体现了真实的技术状态。值大于零表示你比排期提前的百分比。值小于零表示落后排期的百分比。</p></li><li><p>(BCWP-ACWP)/BCWP：它体现真实的预算状态。值大于零表示低于预算的百分比。值小于零表示超出预算的百分比。</p></li></ul><h2 id="167-按差异管理">167 按差异管理</h2><p>当你汇报进度时（无论是书面、口头、正式还是非正式），只需汇报计划和实际之间的差异。</p><p>通过这种方式，可以将注意力和资源放在有问题的地方。</p><h2 id="168-不要过度使用你的硬件">168 不要过度使用你的硬件</h2><p>要注意硬件限制对软件开发成本的巨大影响。</p><p>尤其是，有数据显示，当内存或 CPU 使用率接近 90% 时，软件开发成本将 翻倍 ！</p><p>当接近 95% 时，成本将会增加 两倍 ！</p><p>如果你的环境使你必须压缩每个字内存和 CPU 周期，那么一定要相应地增加排期。</p><h2 id="169-对硬件的演化要乐观">169 对硬件的演化要乐观</h2><h2 id="170-对软件的进化要悲观">170 对软件的进化要悲观</h2><h2 id="171-认为灾难是不可能的想法往往导致灾难">171 认为灾难是不可能的想法往往导致灾难</h2><p>最大的管理灾难会在你认为不会发生的时候出现。</p><h2 id="172-做项目总结">172 做项目总结</h2><p><code>忘记过去的人注定会重蹈覆辙</code>。——乔治·桑塔亚纳（George Santayana）, 1908</p><p>每个项目都有问题。</p><p>原则 125 涉及记录、分析技术错误并从中学习。</p><p>本原则用于对管理错误或者整体的技术错误进行同样的操作。</p><p>在每个项目结束时，给所有的项目关键参与者一个3–4天的任务来分析项目中出现的每一个问题。</p><p>总的来说，主要思路是记录、分析所有不符合预期的事情并从中学习。</p><p>同时，记录下你认为将来可以采取的不同措施以预防问题发生。</p><p>未来的项目将会极大受益。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Coding Principles of software development]]></title>
            <link>/posts/2020-12-03-2335-Coding-Principles-of-software-development</link>
            <guid>/posts/2020-12-03-2335-Coding-Principles-of-software-development</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>本文是对《软件设计的 201 个原则》的第5章——软件开发的编码原则的学习</p><p>编码是包含以下行为的集合：</p><ul><li><p>将设计阶段确定的算法转换为用计算机语言编写的程序。</p></li><li><p>将程序（通常是自动化的）转换为可被计算机直接执行的语言。</p></li></ul><p>编码的主要输出结果就是一组形成文件的程序清单。</p><h2 id="087-避免使用特殊技巧">087 避免使用特殊技巧</h2><p>底线：避免编写使用特殊技巧的代码，以向世界展示你有多聪明！</p><h2 id="088-避免使用全局变量">088 避免使用全局变量</h2><p>“全局”意味着，任何人都可能错误的修改它的值。</p><p>可以将重要数据封装在对应模块中（原则 65），这样任何人都必须通过指定方式来访问或者修改它。可以显式传递参数给需要特定数据的程序。如果发现参数过多，那么可能你的设计需要改造。</p><h2 id="089-编写可自上而下阅读的程序">089 编写可自上而下阅读的程序</h2><p>要编写有助于读者理解的程序。</p><ul><li><p>顶部要包含详细的对外说明，用以明确定义程序的目的与用途。</p></li><li><p>顶部要说明外部可访问的方式、局部变量和算法。</p></li><li><p>使用被称为“结构化”的编程结构，这从本质上更易于遵循。</p></li></ul><h2 id="090-避免副作用">090 避免副作用</h2><p>程序的副作用，是指程序的某些操作不是其主要目的，并且这些操作对程序外部可见（或其结果能被外部感知）。</p><p>副作用是软件中许多细微错误的来源。即，这些错误是潜伏最深的，一旦它们的症状表现出来是最难排查的。</p><h2 id="091-使用有意义的命名">091 使用有意义的命名</h2><h2 id="092-程序首先是写给人看的">092 程序首先是写给人看的</h2><p>现在最有价值的资源是人力：开发软件的人力，维护软件的人力和提高软件能力的人力。</p><p>如果你需要执行效率，这没问题，但要提升程序的可读性，以免在提升执行效率的过程中浪费人力。</p><h2 id="093-使用最优的数据结构">093 使用最优的数据结构</h2><p>如果你选择了正确的数据结构，算法（以及代码）将变得易于编写、阅读以及维护。</p><p>当你准备编写程序时，应该将算法和数据结构一起考虑。</p><p>在选择最佳组合之前，请尝试两个或三个或更多不同的组合。</p><p>应确保将数据结构封装在一个组件内（原则65），这样当发现更好的数据结构时，可以轻松地修改。</p><h2 id="094-先确保正确，再提升性能">094 先确保正确，再提升性能</h2><p>提升正常运行程序的性能，比“让高性能程序正常运行”容易很多。</p><p>当你进行初始编码时，不要担心优化问题。</p><p>在这种情况下，在任何时候一个组件要是能够按时（或者提前）完成并且可靠运行，应值得庆祝。</p><h2 id="095-在写完代码之前写注释">095 在写完代码之前写注释</h2><p>我们写代码注释是为了让软件更易于调试、测试以及维护。</p><p>在写代码的同时写注释（或者提前写注释，参见原则 96），这会让你更容易调试软件。</p><p>当你调试软件时，无疑会发现一些错误。</p><p>如果从算法到代码的转换过程存在错误，那么你只需要修改代码，而不需要修改注释。</p><p>如果算法存在错误，那么你对注释和代码都需要修改。</p><p>但如果不写代码注释，你怎么能发现算法的错误呢？</p><h2 id="096-先写文档后写代码">096 先写文档后写代码</h2><p>在为一个组件完成详细设计（即，将它的外部接口和算法写为文档）之后，在代码中编写行间注释。</p><p>这些注释大部分与前面完成的接口与算法的文档没什么不同。</p><p>之后将每行注释转化为与之对应的代码片段。（注意：如果最后发现每条注释只对应一行代码，你很可能对算法描述的过于细致了。）</p><p>你会发现调试过程变得顺畅许多。</p><h2 id="097-手动运行每个组件">097 手动运行每个组件</h2><p>手工执行一些简单的测试用例，一个软件组件或许会花 30 分钟时间。</p><p>如果不这么做？现在节省30分钟，直接去做单元测试、集成测试和系统测试。</p><p>一旦系统挂了，将花费3–4人天的成本去定位失败的原因。</p><p>总之，30分钟比3–4人天加上6×30分钟的成本要少。</p><h2 id="098-代码审查">098 代码审查</h2><p>软件的详细设计评审和代码审查，由 Michael Fagan 首次提出，论文标题为“用设计和代码审查减少程序中的错误”（&quot;Design and Code Inspections to Reduce Errors in Program Development&quot;，IBM Systems Journal, 15, 3 (July 1976), pp. 182–211）。</p><p>由此发现的错误，能占到所有被发现的软件错误的82%。</p><p>数据显示，你甚至可以减少 50% 至 90% 的测试时间。</p><h2 id="099-你可以使用非结构化的语言">099 你可以使用非结构化的语言</h2><p>非结构化的代码打破了 Edsger Dijkstra 的建议，其要求对控制结构限制在 IF-THEN-ELSE, DO-WHILE, DO-UNTIL 和 CASE 几类。</p><p>注意，使用一种没有这些控制结构的语言（如，汇编语言），也可以写出结构化的代码。可以在代码中增加结构化控制的注释，并限制 GOTO 只能用来实现这些控制结构。</p><p>GOTO 语句会被使用到，但它们将实现更好的控制结构，并且将促进而不是妨碍可读性、可维护性和可证明性。</p><h2 id="100-结构化的代码，未必是好的代码">100 结构化的代码，未必是好的代码</h2><p>但需要注意的是，并非所有的“结构化”程序都是好的。</p><p>对高质量的程序，结构几乎是必要条件，但远不是充分条件。</p><h2 id="101-不要嵌套太深">101 不要嵌套太深</h2><p>嵌套超过三层会严重降低可理解性。</p><p>人类的头脑在变得混乱之前只能记住一定数量的逻辑。</p><h2 id="102-使用合适的语言">102 使用合适的语言</h2><h2 id="103-编程语言不是借口">103 编程语言不是借口</h2><p>事实上，如果你是一个好的程序员，对任何一种编程语言你都应该是个好程序员（原则104）；尽管不太理想的编程语言可能会让你的工作困难一些。</p><h2 id="104-编程语言的知识没那么重要">104 编程语言的知识没那么重要</h2><p>不管使用哪种语言，优秀的程序员都是优秀的。不管使用哪种语言，糟糕的程序员仍然是糟糕的。不可能有一个人是&quot;优秀的C程序员&quot;，同时是&quot;糟糕的Ada程序员&quot;。如果他确实在Ada语言上表现的很糟糕，那大概率也不会在C语言上表现很好！除此之外，一个真正优秀的程序员应该可以很容易的学会一种新语言。这是因为一个真正优秀的程序员理解和赞赏高质量编程的概念，而不只是某些编程语言的语法和语义特性。</p><p>所以，为一个项目选择语言的首要驱动力应该是什么语言更合适（原则102），而不是程序员都在抱怨“我们只知道C语言”。如果由于项目选择了其他语言而导致一些人退出，这个项目很可能会更好！</p><h2 id="105-格式化你的代码">105 格式化你的代码</h2><p>使用标准的缩进规则，可大大提高程序的可读性。选择遵循哪种规则无关紧要，但一旦选择了，就要维持一致。</p><h2 id="106-不要太早编码">106 不要太早编码</h2><p>编写软件和盖房子类似。这两者都需要很多准备工作。没有坚固稳定的混凝土地基，盖房子不会成功。没有坚固稳定的需求和设计作为基础，编码也不会成功。想一想当地基已经浇筑完成之后，对房子做修改有多么困难！</p><p>不要因为管理层想看到“进展”，就被迫过早编写代码。在设立基线前，要确认需求和设计是正确且合适的，在对最终产品编码前更要确认。附带说一下，不要从这个原则推断出原型试验的方法有问题（原则5，10，11，12，13）。在需求基线完成很早之前，试验性编码没有错。只是不要认为这是最终的产品。针对本条原则，Manny Lehman 提出了一个相反的观点：不要太晚编码！</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Evolution principles of software development]]></title>
            <link>/posts/2020-12-04-0007-Evolution-principles-of-software-development</link>
            <guid>/posts/2020-12-04-0007-Evolution-principles-of-software-development</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>本文是对《软件设计的 201 个原则》的第9章——软件开发的演变原则的学习</p><p>演变是与修改软件产品相关的一系列工作，用于：</p><ol><li><p>满足新功能</p></li><li><p>更有效地运行</p></li><li><p>正常运行（当检测到原始产品中的错误时）</p></li></ol><h2 id="185-软件会持续变化">185 软件会持续变化</h2><p>任何正在使用的大型软件系统都将经历不断的变化，因为系统的使用会使人想出新的功能。</p><p>它会一直变化，直到从头开始重写变得更划算。这就是曼尼·雷曼（Manny Lehman）的<code>“持续变化定律”</code>（Law of Continuing Change）。</p><h2 id="186-软件的熵增加">186 软件的熵增加</h2><p>任何经历持续变化的软件系统都会变得越来越复杂，并且变得越来越杂乱无章。</p><p>由于所使用的所有软件系统都会发生变化（原则 185），并且变化会导致不稳定，因此所有有用的软件系统都将朝着较低的可靠性和可维护性迁移。这就是曼尼·雷曼（Manny Lehman）的<code>“熵增加定律”</code>。</p><h2 id="187-如果没有坏就不要修理它">187 如果没有坏就不要修理它</h2><p>假设你在维护一个系统。你正在检查组件的源代码。你可能是想增强它，或者是想找到错误的原因。</p><p>在检查时，你觉得自己发现了另外一个错误。不要试图“修复”它。很有可能你会引入而不是修复一个错误（原则 190）。</p><p>相反，应记录并提交变更请求。期望通过配置控制和相关的技术评审来确定它是否是一个错误，以及应该以什么样的优先级进行修复。（原则 175，177，178 和 179）</p><h2 id="188-解决问题，而不是症状">188 解决问题，而不是症状</h2><p>当软件出错时，你的责任是彻底理解错误的原因，而不只是草草分析一下，并对你认为的原因进行一个快速的修复。</p><h2 id="189-先变更需求">189 先变更需求</h2><p>如果各方都同意对软件进行增强，那么第一件事就是更新软件需求规格说明（SRS: Software Requirements Specification），并获得批准。</p><h2 id="190-发布之前的错误也会在发布后出现">190 发布之前的错误也会在发布后出现</h2><p>发布之前错误就比较多的组件，发布之后也会发现比较多的错误。这对开发者来说是个令人失望的消息，但确实是被经验数据所充分支持的（而且由原则 114 可知，你在一个组件中发现的错误越多，将来也会发现更多）。</p><p>最好的建议是废弃、替换、从头创建任何具有不良历史记录的组件。不要花钱填坑。</p><h2 id="191-一个程序越老，维护起来就越困难">191 一个程序越老，维护起来就越困难</h2><p>在对软件系统进行更改（无论是维修还是增强）时，系统中必定有一些组件要被修改。</p><p>随着程序变“老”，每次改动时，整个系统中需要修改的组件的比例也会随之增加。</p><p>每次更改都会使所有后续的更改更加困难，因为程序的结构必然会恶化。</p><h2 id="192-语言影响可维护性">192 语言影响可维护性</h2><p>倾向于强制高内聚和低耦合（原则 73）的语言，例如 Eiffel，通常有助于开发和后续维护。级别很低的语言（如汇编语言）通常会在开发和维护期间抑制开发效率。可对照查看原则 99。</p><h2 id="193-有时重新开始会更好">193 有时重新开始会更好</h2><p>如今关于重建（reengineering）、翻新（renovation）和逆向工程（reverse engineering）的讨论太多了，我们可能都开始相信这样做很容易。</p><p>这很难做。有时这很有意义，值得投资。</p><p>其它时候这是对珍稀资源的浪费，从头开始设计和编码可能是更好的选择。</p><p>举例来说，扪心自问，如果你制作了设计文档，维护者们真的会使用它们吗？</p><h2 id="194-首先翻新最差的">194 首先翻新最差的</h2><p>原则 193 建议，重新开始有时可能是最好的主意。另一个不那么痛苦的方法是，完全重新设计和重新编码“最差”的组件。</p><p>这里“最差”的组件是指那些消耗了最多改正性维护费用的组件。</p><p>Gerald Weinberg 报告说，在一个系统中重写一个 800 行的模块（占全部改正性维护成本的 30%），就可以为整体维护工作节省大量的资源。</p><h2 id="195-维护阶段比开发阶段产生的错误更多">195 维护阶段比开发阶段产生的错误更多</h2><p>维护期间对程序的修改（无论是改进功能还是修正缺陷）引入的错误远远超过最初的开发阶段。维护团队报告说，维护期间有 20％ 到 50％ 的改动会引入更多错误。</p><p>出于这个原因，遵守“规则”是如此重要：制定 SCM 计划（原则 174），控制基准（原则 179），并且不要绕过变更控制（原则 182）。</p><h2 id="196-每次变更后都要进行回归测试">196 每次变更后都要进行回归测试</h2><h2 id="197-变更很容易的想法，会使变更更容易出错">197 “变更很容易”的想法，会使变更更容易出错</h2><p>为了避免这种情况，要确保你正在做的变更是经过核准的（原则 182 及 183 ），对每项变更进行核查（原则 97），并在每组变更后进行回归测试（原则 196）。</p><h2 id="198-对非结构化代码进行结构化改造，并不一定会使它更好">198 对非结构化代码进行结构化改造，并不一定会使它更好</h2><p>相反的，你应该采用合理的软件工程原则，重新考虑模块，并从头开始重新设计。</p><h2 id="199-在优化前先进行性能分析">199 在优化前先进行性能分析</h2><p>当需要优化程序以使其更快时，请记住 <code>80% 的CPU周期将被 20% 的代码消耗</code>（Pareto定律）。</p><p>因此，先去找到那些能够带来优化效果的 20% 的代码。</p><p>最好的方法是使用任何市场上可买到的可用的性能分析工具。</p><p>性能分析工具在你的程序运行过程中监控它，并识别出“热点”，也就是消耗最多 CPU 周期的部分。优化这部分。</p><h2 id="200-保持熟悉">200 保持熟悉</h2><p>这就是 Manny Lehman 的“熟悉守恒定律”（Law of Conservation of Familiarity）。</p><p>软件修改的时间越长，开发人员对它的“感觉”就越陌生。</p><p>总结：保持产品发布版本之间的改动量相对稳定。</p><h2 id="201-系统的存在促进了演变">201 系统的存在促进了演变</h2><p>系统引入到它要解决的问题的环境中，本身就改变了这个环境，也就会引发新的问题。</p><p>无论你认为自己多完美地实现了需求，都必须为部署之后必要的变更做好计划。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Testing Principles of software development]]></title>
            <link>/posts/2020-12-04-0023-Testing-Principles-of-software-development</link>
            <guid>/posts/2020-12-04-0023-Testing-Principles-of-software-development</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>本文是对《软件设计的 201 个原则》的第6章——软件开发的测试原则的学习</p><p>测试是包含以下行为的集合：</p><ol><li><p>对独立的软件组件执行测试（即：单元测试，Unit Testing），以确保其行为与组件设计规格说明中的定义足够的接近</p></li><li><p>对执行过单元测试的组件集合执行测试（即：集成测试，Integration Testing），以确保这些组件一起工作时的行为足够接近设计中的说明。</p></li><li><p>对集成测试过的所有组件进行测试（即：软件系统级测试，Software Systems-level Testing），以确保它们可以作为一个系统来运行，且行为足够接近软件需求规格说明中的定义。</p></li><li><p>制定软件系统级测试的测试计划。</p></li><li><p>制定软件集成测试的测试计划。</p></li><li><p>制定单元测试的测试计划。</p></li><li><p>建立测试装置（test harness）和测试环境（test environment）。</p></li></ol><h2 id="107-依据需求跟踪测试">107 依据需求跟踪测试</h2><p>理解哪些测试可以验证哪些需求是很重要的。有如下两个原因:（1）在生成测试时，你会发现，了解是否所有需求都在被测试是很有用的。（2）在执行测试时，你会发现，了解正在验证哪些需求是很有用的。</p><p>此外，如果你的需求已经排了优先级（原则 50），可以很容易得出测试的相对优先级；也就是说，一个测试的优先级是其所有对应需求的优先级的最大值。</p><p>维护一个大二进制表，其中行对应于所有软件测试，列对应于软件需求规格说明中的每个需求。任何位置的 1 表示此测试有助于验证此需求。</p><p>注意，一整行都没有被置 1 表示此测试没有目的，一整列都没有被置 1 表示该需求漏测。能够成功地创建这样一个表，取决于你唯一地引用每个需求的能力（原则 52）。</p><h2 id="108-在测试之前早做测试计划">108 在测试之前早做测试计划</h2><h2 id="109-不要测试自己开发的软件">109 不要测试自己开发的软件</h2><p>软件开发人员永远不应成为自己软件的主要测试者。开发人员比较适合进行初始调试（译者注：自测）和单元测试。 [相反的观点，可参见Mills, H., et al., &quot;Cleanroom Software Engineering&quot;，in IEEE Software, 4, 5 (September 1987), pp. 19–25.]</p><p>PS，目前确实有新的倾向，由程序员来测试自己的代码。但本原则提到的因素依然值得考虑。一个能够充分对自己代码进行测试的程序员，需要能够把自己的视角切换到一个测试人员，并且有发现bug的足够欲望。</p><h2 id="110-不要为自己的软件做测试计划">110 不要为自己的软件做测试计划</h2><p>你不仅不应该测试自己的软件（原则 109），而且也不应该负责为软件生成测试数据、测试方案或测试计划。如果你负责了，那么你可能会在测试生成中犯与软件创建中相同的错误。例如，如果你在设计软件时对合法输入的范围做了一个错误的假设，那么在生成测试计划时，你很可能会做出同样的假设。</p><h2 id="111-测试只能揭示缺陷的存在">111 测试只能揭示缺陷的存在</h2><p>无论多么彻底和深入，测试只能揭示程序中缺陷的存在，而并不能确保程序没有缺陷。它可以增加你对程序正确性的信心，但它不能证明程序的正确性。为了获得真正的正确性，必须使用完全不同的方法，即正确性证明。</p><h2 id="112-虽然大量的错误可证明毫无价值，但是零错误并不能说明软件的价值">112 虽然大量的错误可证明毫无价值，但是零错误并不能说明软件的价值</h2><p>这是杰拉尔德·温伯格（Gerald Weinberg）的“无差错谬论”（Absence of Errors Fallacy）。它真正地将测试纳入了视野。它还将所有的软件工程和管理纳入视野。本原则的第一部分显然是正确的，有很多错误的软件是没用的。第二部分则发人深省。它表达的是：无论你多么努力地消除错误，除非你在开发正确的系统，否则你都是在浪费时间。</p><p>Akao 的《质量功能部署》（Quality Function Deployment, Cambridge, Mass.: Productivity Press, 1990）详细介绍了一种方法，用于确保你在整个软件生命周期中开发正确的系统。本原则的一个推论是，如果你在开发错误的系统，那么世界上所有的形式化方法、所有的测试和所有的产品保证都将于事无补。</p><h2 id="113-成功的测试应发现错误">113 成功的测试应发现错误</h2><h2 id="114-半数的错误出现在-15-的模块中">114 半数的错误出现在 15% 的模块中</h2><p>保守估算，在大型系统中，大约所有软件错误的半数出现在 15% 的模块中，80% 的软件错误出现在 50% 的模块中。Gary Okimoto 和 Gerald Weinberg 的结论更引人注目，所有错误的 80% 是在仅仅 2% 的模块中发现的（参见 Weinberg 的《质量软件管理》： Quality Software Managetnent, Vol. 1: Systems Thinking, New York: Dorset House, 1992）。因此，在测试软件时，你可以这样认为，在发现错误的地方，很可能会发现更多错误。</p><p>要维护日志（译者注：指测试日志），不仅记录在项目的每个时间段内发现了多少错误，还要记录每个模块发现了多少错误。当历史表明一个模块非常容易出错时，你最好从头开始重写它，强调简单性（原则67），而不是聪明。</p><h2 id="115-使用黑盒测试和白盒测试">115 使用黑盒测试和白盒测试</h2><h2 id="116-测试用例应包含期望的结果">116 测试用例应包含期望的结果</h2><h2 id="117-测试不正确的输入">117 测试不正确的输入</h2><h2 id="118-压力测试必不可少">118 压力测试必不可少</h2><h2 id="119-大爆炸理论不适用">119 大爆炸理论不适用</h2><p>你不能通过忽略单元测试和集成测试来节省时间。</p><h2 id="120-使用-mccabe-复杂度指标">120 使用 McCabe 复杂度指标</h2><h2 id="121-使用有效的测试完成度标准">121 使用有效的测试完成度标准</h2><p>有效度量测试进度的两个想法是：</p><ul><li><p>每周发现新错误的比率。</p></li><li><p>暗中在软件中埋下已知的 bug （ Tom Gilb 管这个叫 bebugging ）后，这些 bug 到目前为止被发现的百分比。</p></li></ul><p>对于测试进度的一个无效指标是测试用例通过的百分比（当然除非你确定测试用例很好地覆盖了需求）。</p><h2 id="122-达成有效的测试覆盖">122 达成有效的测试覆盖</h2><p>在测试计划生成或测试执行阶段，有一些指标可以用来确定代码执行测试的全面程度。</p><ol><li><p>行覆盖率，用于衡量至少执行一次的语句的百分比。</p></li><li><p>分支覆盖率，用于衡量程序中被执行的分支的百分比。</p></li><li><p>路径覆盖率，用于衡量所有可能路径（通常是无限的）覆盖程度</p></li></ol><h2 id="123-不要在单元测试之前集成">123 不要在单元测试之前集成</h2><h2 id="124-测量你的软件">124 测量你的软件</h2><p>一个发现原因的方法是测量你的软件，也就是，嵌入特殊的指令到软件中，来报告执行轨迹、异常状况、过程调用等等</p><h2 id="125-分析错误的原因">125 分析错误的原因</h2><p>错误在软件中是很常见的。我们会花费大量的资源来发现和修复它们。</p><p>从一开始就防止它们的发生，从而降低它们的影响，是更划算的。</p><p>为此的一个方法是，当检测到错误的时候，分析它们的原因。</p><h2 id="126-对错不对人">126 对“错”不对人</h2><p>当你或他人在你的代码中发现错误时，公开坦诚得讨论它。与其责骂自己，不如将它当作自己和他人的学习经历（更多信息见原则 125）。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[official website project review part2 on ssr]]></title>
            <link>/posts/2020-12-07-2322-official-website-project-review2</link>
            <guid>/posts/2020-12-07-2322-official-website-project-review2</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><p>本文是某官网项目二期的一些回顾</p><h2 id="razzleafter--？">razzle+after = ？</h2><p>在项目一期中，我们选型是razzle就是为了能切换到SSR。而After并未列入初期选型。after是一个用于实现SSR的框架。after跟next可以类比，after用react-router作为路由基础，支持基于路由的代码分割，并且支持了基于路由的各种功能（数据预载等）。</p><p>可以简单看一下after的目录结构</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers="">packages/after.js/src
├── After.tsx // 路由（基于react-router）
├── Document.tsx // 页面模板
├── NotFoundComponent.tsx // <span class="token number">404</span>页面
├── asyncComponent.tsx // 异步组件hoc，类似loadableComponent
├── ensureReady.ts // 浏览器确保路由对应的js片段load完成后，将预渲染数据进行传给路由所对应的组件作为初始值
├── getAssets.ts // 从webpack打出的包中取出路由对应的js，css
├── index.tsx
├── loadInitialProps.tsx // 匹配路由，执行getInitialProps
├── render.tsx // render成html string
├── serializeData.tsx // 以script标签作为载体，进行序列化、反序列化
├── <span class="token builtin class-name">test</span>
├── types.ts
└── utils.ts
</code></pre><h2 id="如何让ssr基于ua提供pc和h5双版本？">如何让SSR基于ua提供PC和H5双版本？</h2><p>UA侦测，在路由上对PC/H5代码分割。比如</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers="">src
├── pages // PC路由
├── pages-h5 // H5 路由
├── components // PC组件
└── components-h5 // H5组件
</code></pre><h2 id="如何让ssr结合ssg、csr提高整体可用性">如何让SSR结合SSG、CSR提高整体可用性</h2><p>按不同需求场景，采用不同的渲染方式。</p><p>SSG：不需要SEO、不变的页面，用SSG预渲染。然后在SSR的路由判定中适时返回这些文件。</p><p>CSR：负载压力大的时候，直接切成CSR，增加QPS能力。</p><p>极端SSR：对于爬虫特殊照顾，通过UA判定，只给他SSR。其他都走CSR/SSG。</p><h2 id="ssr注意的点">SSR注意的点</h2><p>Node单线程，不要污染全局变量，渲染前后环境要保持一致，否则影响下一次渲染。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[official website project review part3]]></title>
            <link>/posts/2020-12-08-0152-official-website-project-review-part3</link>
            <guid>/posts/2020-12-08-0152-official-website-project-review-part3</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><h2 id="帧动画方案的变更">帧动画方案的变更</h2><p>由于 part1 部分提到的“换图的方案”产生的网络请求过多，影响了页面整体的加载。</p><p>为此改变了方案，采用了 CSS Sprites 动画。说人话就是 N 张帧动画合成一张大图，然后按顺序换背景图的取图位置。</p><p>为此我做了一个工具项目<a href="https://github.com/mzvast/frame-animation-sprite-maker">frame-animation-sprite-maker</a>，里面主要是用到了 gka 这个包，使用的方法是把图片放入 images 目录下，运行<code>npm run build:gka</code>会在 build 目录下生成合成的图，之后如果图片尺寸比较大，那么 gka 压缩会出错，我们可以手动采用 imagemin 再压一遍，执行<code>npm run imagemin</code>即可在 dist 目录下产生如下配置的压缩图片啦。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// frame-animation-sprite-maker/imagemin.js</span>
<span class="token keyword">const</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'imagemin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// const imageminJpegtran = require('imagemin-jpegtran');</span>
<span class="token keyword">const</span> imageminPngquant <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'imagemin-pngquant'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">imagemin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'build/**/**.{jpg,png}'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        destination<span class="token punctuation">:</span> <span class="token string">'dist'</span><span class="token punctuation">,</span>
        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token comment">// imageminJpegtran(),</span>
            <span class="token function">imageminPngquant</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                quality<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.8</span><span class="token punctuation">]</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//=> [{data: &lt;Buffer 89 50 4e …>, destinationPath: 'build/images/foo.jpg'}, …]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><p>而在移动端，这套动画的兼容性还是不够好。为此我们用 Gif 图做了 H5 的动画。CSS 动画还是留给了 PC。</p><h2 id="移动端返回位置问题，hook-相关">移动端返回位置问题，hook 相关</h2><p>这个问题主要出现在移动端，用户在返回上一个页面的时候，有一定几率停在错误的地方。据称在 Android 上较为容易出现。为此，只好手动实现一个简单的位置记录器。但逻辑对的，但就是拿不到正确的高度，在页面销毁的时候，总是会发生高度突变。
然后，就想到了 useEffect 是异步入列的，可以试试同步执行的 useLayoutEffect，结果还真好了，执行提前了，高度不会突变了。</p><pre><code class="language-typescript" data-language="typescript" data-highlighted-line-numbers=""><span class="token keyword">import</span> Env <span class="token keyword">from</span> <span class="token string">'Env'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>useEffect<span class="token punctuation">,</span> useLayoutEffect<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>useLocation<span class="token punctuation">,</span> useHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isFirstLoad <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// blocking mode will delay page render, so element will not show immediately</span>
<span class="token keyword">let</span> scrollMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lastPathname <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">ScrollToTopPatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>pathname<span class="token punctuation">,</span> state<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>action<span class="token punctuation">,</span> length<span class="token punctuation">,</span> location<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log('ddt::action', action, isFirstLoad);</span>
    <span class="token keyword">let</span> skip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">'POP'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isFirstLoad<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// history返回不跳转顶部</span>
        skip <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token comment">// fix hooks order change , DON'T return null</span>
    <span class="token punctuation">}</span>
    isFirstLoad <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="highlighted-line">    <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>        <span class="token comment">// console.log('ddt::pathname', pathname);</span>
        <span class="token comment">// console.log('ddt::action', action, pathname, lastPathname);</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">===</span> <span class="token string">'POP'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// console.log('ddt::doScroll', action);</span>
            <span class="token comment">// back?</span>
<span class="highlighted-line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>pathname <span class="token keyword">in</span> scrollMap<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>                <span class="token comment">// pop时，如果有存，则回到记忆的位置</span>
                <span class="token comment">// console.log('ddt::doScroll', action, scrollMap[pathname]);</span>
                window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> scrollMap<span class="token punctuation">[</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>skip<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token comment">// use search instead of hash when using history router</span>
        <span class="token keyword">const</span> hasJumpSignal <span class="token operator">=</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'anchor='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasJumpSignal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> anchor<span class="token punctuation">:</span> <span class="token builtin">string</span> <span class="token operator">=</span> location<span class="token punctuation">.</span>search
                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'anchor='</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
                <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> element<span class="token punctuation">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> backScrollOffset <span class="token operator">=</span> Env<span class="token punctuation">.</span>ua<span class="token punctuation">.</span>isH5 <span class="token operator">?</span> <span class="token number">100</span> <span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">;</span>
            element <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> element<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> backScrollOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// console.log('ddt::top!');</span>
            window<span class="token punctuation">.</span><span class="token function">scrollTo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>pathname<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="highlighted-line">    <span class="token function">useLayoutEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>        <span class="token comment">// 此处用useEffect则会读到错误的尺寸</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
            <span class="token comment">// console.log('ddt::unmount!', pathname);</span>
            scrollMap<span class="token punctuation">[</span>pathname<span class="token punctuation">]</span> <span class="token operator">=</span> window<span class="token punctuation">.</span>scrollY<span class="token punctuation">;</span> <span class="token comment">//max; //</span>
            <span class="token comment">// console.log('ddt::do scrollMap', scrollMap);</span>
            lastPathname <span class="token operator">=</span> pathname<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><h2 id="开发效率的相关工具、库">开发效率的相关工具、库</h2><p>hygen 做代码生成器，统一 components、pages 的模板</p><p>storybook 做 UI 组件的独立开发环境（单测环境）</p><h2 id="ssr-模式下的-es5-直连调试方法">SSR 模式下的 es5 直连调试方法</h2><p>part1 提到 SPA 模式下的直连方法。但在 SSR 模式下，由于端口占用等问题，就失效了。</p><p>其实要解决两个问题：</p><h3 id="第一步是如何让双server在代理的情况下run起来。">第一步是如何让双server在代理的情况下run起来。</h3><p>razzle的ssr开发环境的双server架构，大致如下：</p><p>3000=&gt; express server 负责renderToString，流量的直接入口
3001=&gt; webpackDevServer 负责静态文件（默认注入localhost:3001）</p><p>而在外部设备如手机端通过proxy连接，将不能解析localhost:3001，因此可以通过如下配置转发。</p><pre><code>http://vredu.baidu.com localhost:3000
http://vvredu.baidu.com localhost:3001
</code></pre><p>这样就完成了端口转发。</p><h3 id="第二部是如何编译成es5">第二部是如何编译成es5</h3><p>第一步完成后，发现外部的js转成了es5，但是一些razzle内部的代码还是es6.</p><p>还好我们在 github 上找到这样的实现方法，将这些文件再次进行babel编译。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token comment">// razzle.config.js</span>
<span class="token keyword">const</span> ieRule <span class="token operator">=</span> <span class="token punctuation">{</span>
    test<span class="token punctuation">:</span> <span class="token regex">/\.jsx?$/</span><span class="token punctuation">,</span>
    include<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>
        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">node_modules/(?=(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">[</span>
            <span class="token string">'acorn-jsx'</span><span class="token punctuation">,</span>
            <span class="token string">'estree-walker'</span><span class="token punctuation">,</span>
            <span class="token string">'regexpu-core'</span><span class="token punctuation">,</span>
            <span class="token string">'unicode-match-property-ecmascript'</span><span class="token punctuation">,</span>
            <span class="token string">'unicode-match-property-value-ecmascript'</span><span class="token punctuation">,</span>
            <span class="token string">'react-dev-utils'</span><span class="token punctuation">,</span>
            <span class="token string">'ansi-styles'</span><span class="token punctuation">,</span>
            <span class="token string">'ansi-regex'</span><span class="token punctuation">,</span>
            <span class="token string">'chalk'</span><span class="token punctuation">,</span>
            <span class="token string">'strip-ansi'</span>
        <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">))</span><span class="token template-punctuation string">`</span></span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    use<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>
        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
            presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>
                <span class="token punctuation">[</span>
                    <span class="token string">'@babel/preset-env'</span><span class="token punctuation">,</span>
                    <span class="token punctuation">{</span>
                        targets<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                            ie<span class="token punctuation">:</span> <span class="token number">11</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">]</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            name<span class="token punctuation">:</span> <span class="token string">'typescript'</span><span class="token punctuation">,</span>
            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                useBabel<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                tsLoader<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    transpileOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    experimentalWatchApi<span class="token punctuation">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                forkTsChecker<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    tsconfig<span class="token punctuation">:</span> <span class="token string">'./tsconfig.json'</span><span class="token punctuation">,</span>
                    tslint<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                    watch<span class="token punctuation">:</span> <span class="token string">'./src'</span><span class="token punctuation">,</span>
                    typeCheck<span class="token punctuation">:</span> <span class="token boolean">true</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">modifyWebpackConfig</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>env<span class="token punctuation">:</span> <span class="token punctuation">{</span>target<span class="token punctuation">,</span> dev<span class="token punctuation">}</span><span class="token punctuation">,</span> webpackConfig<span class="token punctuation">:</span> config<span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dev <span class="token operator">&amp;&amp;</span> target <span class="token operator">===</span> <span class="token string">'web'</span> <span class="token operator">&amp;&amp;</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">ECMA</span> <span class="token operator">===</span> <span class="token string">'5'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'es5 running'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// config.entry.client[0] = require.resolve('webpack/hot/dev-server');</span>
            config<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>ieRule<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token comment">// .babelrc</span>
<span class="token punctuation">{</span>
    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span>
        <span class="token string">"razzle/babel"</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
          <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">"browsers"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
              <span class="token string">"ie 11"</span><span class="token punctuation">,</span>
              <span class="token string">"last 2 Chrome versions"</span><span class="token punctuation">,</span>
              <span class="token string">"last 2 Firefox versions"</span><span class="token punctuation">,</span>
              <span class="token string">"last 2 Safari versions"</span>
            <span class="token punctuation">]</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[talk of sharing ssr project]]></title>
            <link>/posts/2020-12-09-0107-talk-of-sharing-ssr-project</link>
            <guid>/posts/2020-12-09-0107-talk-of-sharing-ssr-project</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><h2 id="ssr在官网的应用">SSR在官网的应用</h2><h3 id="什么算ssr">什么算SSR</h3><p>​		判断标准并不是ReactDOMServer.renderToXXX函数是否在server调用。而是server是否render具体页面内容。（因此，带有renderToXXX也可做CSR）</p><p>​		准确来说，我们的React SSR app是个Isomorphic app。即Server render一遍，Client又render（hydrate）一遍。</p><p>​		hydrate（针对SSR场景特殊优化的render方法）：复用原本已经存在的 DOM 节点，减少重新生成节点以及删除原本 DOM 节点的开销，来加速初次渲染。</p><h3 id="ssr工作流程">SSR工作流程</h3><ul><li><p>特点：单线程，计算密集型。</p></li><li><p>同构：UA、canUseWebp</p></li><li><p>非技术优势：所有环境有关的变量都由server掌控。无需通过domain判定环境，不会出现cp01事件。</p></li></ul><p>注意点⚠️：</p><ol><li>window/global：window在server的回落保护，保护环境。</li><li>必要的双重实现：UA侦测、canUseWebp在server和client是两套实现。</li></ol><p>render阶段做的事</p><ol><li><p>路由匹配匹配出页面组件</p></li><li><p>server预加载数据（optional），renderToString并抽取预渲染内容</p></li><li><p>组装产物</p></li></ol><h3 id="ssg工作流程">SSG工作流程</h3><p>render阶段同SSR</p><h3 id="csr工作流程">CSR工作流程</h3><p>工作流程同SSR，render阶段如下图。</p><ul><li>client端行为与SSR区别：页面加载时需要调用getInitialProps</li></ul><h3 id="如何扛住更多的流量">如何扛住更多的流量</h3><p>按不同需求场景，采用不同的渲染方式。</p><ul><li><p>SSG：不需要SEO、不变的页面，用SSG预渲染。然后在SSR的路由判定中适时返回这些文件。</p></li><li><p>CSR：负载压力大的时候，直接切成CSR，增加QPS能力。</p></li><li><p>极端SSR：对于爬虫特殊照顾，通过UA判定，只给他SSR。其他都走CSR/SSG。</p></li></ul><h3 id="多种render模式结合的工作流程">多种render模式结合的工作流程</h3><h3 id="测试性能">测试性能</h3><p>工具loadtest or ab</p><pre><code class="language-shell" data-language="shell" data-highlighted-line-numbers=""><span class="token comment"># demo</span>
<span class="token function">npm</span> run build:ssr
<span class="token function">npm</span> run <span class="token builtin class-name">export</span> 
<span class="token function">npm</span> run start:prod:test
<span class="token comment"># SSR qps 90</span>
loadtest -n <span class="token number">1000</span> -c <span class="token number">100</span> <span class="token string">"http://127.0.0.1:3000/news"</span> -H user-agent:chrome
<span class="token comment"># SSG page qps 1298</span>
loadtest -n <span class="token number">1000</span> -c <span class="token number">100</span> <span class="token string">"http://127.0.0.1:3000/xxxx"</span> -H user-agent:chrome
<span class="token comment"># CSR 1012</span>
loadtest -n <span class="token number">1000</span> -c <span class="token number">100</span> <span class="token string">"http://127.0.0.1:3000/news"</span> -H user-agent:chrome
</code></pre><p>可见SSR和CSR有大约10倍的性能差异</p><p>SSR本身即app内部渲染逻辑还可以进一步进行性能优化（组件级别的缓存等技术）</p><h2 id="坑分享">坑分享</h2><h3 id="移动端1px问题">移动端1px问题</h3><ul><li><p>不是新问题。奇数像素宽度导致box模型在部分3x屏幕上下边距<code>不对称</code>。</p></li><li><p>在styled中</p><ul><li>编写组件基于transform scale（放大再缩小）</li><li>Stylis 插件在运行时根据设备dpr替换组件中的值</li></ul></li></ul><h3 id="头图帧动画性能">头图帧动画性能</h3><ul><li>起初实现方案：144张图，js定时切换img的src。缺点：请求数量太多，性能差，兼容性差（某些PC浏览器闪烁）。</li><li>改进型：合图144合1，css background动画。缺点：兼容性不算太好（某些情况会闪烁，挑分辨率）</li><li>极端型：GIF图，缺点：不能很精确的控制重播。</li></ul><h3 id="移动端返回位置问题">移动端返回位置问题</h3><p>问题描述：在Android的某些浏览器中，页面跳转再返回，会回不到之前看的位置（不可思议）。</p><p>尝试解决：模拟浏览器记录离开位置，却拿不到稳定值。</p><p>aha：useLayoutEffect</p><h3 id="unicode编码">unicode编码</h3><p>在走查视觉的时候会发现一行字中有两种不同的字体。但看源码中文本并没有什么字体差别。其实文案中存在两种不同范围的 unicode 编码。<a href="https://blog.csdn.net/gstianfu/article/details/84643320">参见</a></p><p>其中用于<code>部首</code>的 unicode，编码范围是从 U+2F00 到 U+2FD5。</p><p>另一种用于<code>常用汉字</code>的编码范围是 U+4E00 到 U+9FFF。</p><p>显示字体不同原因：在某些 win10 机器的“雅黑”字库中常用汉字字体有映射，另部首则没有，故采用回落字体（等线）显示。</p><p>问题产生原因猜测：文案编写者采用的输入法有问题，未按照常用汉字的规范化编码。</p><p>目前 unicode 有：NFD（默认）、NFC、NFKD、NFKC 四种规范化形式。英文和一些部首采用 NFD、NFC，而常用汉字采用 NFKD、NFKC 形式。</p><p>解决思路：将部首转换到常用汉字编码范围。比如都转换成 NFKD。</p><p>ES6 中提供了工具函数<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize">String.prototype.normalize()</a>，可以传入参数<code>&quot;NFKD&quot;</code>。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[what we can learn from Dao Sheng He Fu]]></title>
            <link>/posts/2020-12-14-0059-what-we-can-learn-from-Dao-Sheng-He-Fu</link>
            <guid>/posts/2020-12-14-0059-what-we-can-learn-from-Dao-Sheng-He-Fu</guid>
            <content:encoded><![CDATA[<h2 id="引子">引子</h2><p>就很奇怪，人有时候在很久很久以前种下了一颗种子，隐隐约约记得有一个什么概念，但是没有与自己产生直接的关联，就不会刻意去回望。</p><p>可冥冥中，有一天开始，这个概念相关的许多东西，突然出现在你生活中，不只用一种形式，它以多种渠道刺激着你的记忆，和你say hi。</p><h2 id="为什么想要读稻盛和夫？">为什么想要读稻盛和夫？</h2><p>也许这就是命运吧，该解开的谜题，再晚也不迟。</p><p>只是当年的背景知识，不足以支持我理解老先生的哲学思想和哲学公式。</p><p>在职场摸爬滚打了几年，读起来感觉就像是自己经历过的事情一样。</p><h3 id="这个种子是什么呢？">这个种子是什么呢？</h3><p>读研期间一门职业素养相关的课，老师给咱们培训的课程就是稻盛和夫的《六项精进》，当年就感性的了解了老先生的“哲学”。</p><h3 id="最近的刺激有哪些？">最近的刺激有哪些？</h3><p>拯救日航在日剧中的出现，阿米巴经营在电梯广告中的出现，等等，一系列立体的“宣传”。</p><h3 id="读了什么？">读了什么？</h3><p>我的操作步骤是先把稻盛和夫相关的书全下下来，然后先后翻了2本非本人写的书，把稻盛的哲学思想和公式一股脑说了一通。其中一本叫</p><h3 id="《稻盛和夫写给年轻人的工作秘籍》">《稻盛和夫写给年轻人的工作秘籍》</h3><p>合上书，留给我的脑海只有一个公式<code>人生·工作结果=思考方式*热情*能力</code>。</p><p>翻译的通俗一点就是<code>成功=选择*努力*天分</code>。</p><p>也就是只要选择了正确的方向，工作狂就能赢！（打个问号）</p><p>其中呢，右边三个数值，是乘积，其中“思考方式”是有符号数，后面两个是正数。</p><p>这就揭示了老先生认为的，选择比努力更重要。毕竟乘上负数了再努力再聪明也是南辕北辙。</p><p>也似乎可以解释了为什么该在合适的时机跳上合适的车，让自己发展更顺利（美国式的个人主义职业观？）。但老先生本人是日本传统职业观念倾向多一些，即一个人一生只应该服务于一家公司。</p><p>这个咱也不深究，毕竟老先生的成功只是成功的一种途径。</p><p>后来，筛选出本人的作品（感觉有点像是翻源码😂），但因为时间关系，挑了两本重点研究。</p><h3 id="《企业经营的真谛》">《企业经营的真谛》</h3><p>这里讲到很多企业经营和治理的哲学。其中拯救日航正是这些经验的组合运用典范。</p><p>老先生去日航的时候是临危受命，当时公司里懂航空的人一个都没有。带到日航去的只有“<code>京瓷哲学</code>”和“<code>阿米巴经营</code>”管理方式。</p><p>正是这两个东西，让日航起死回生，创造出奇迹。</p><h3 id="《赌在技术开发上》">《赌在技术开发上》</h3><p>这标题就很吸引人。</p><p>老先生本身技术出身，因此对研发非常执着。（这点有别于马云这种非技术出身）</p><p>书中提到企业家精神，All in 研发，市场化，专业化，创新，研发领导人等等非常多的主题。</p><h2 id="总结">总结</h2><p>总之，老先生的著作非常多，解读他的人也写了很多书。读原著有它的好处，但可能没有读过他的大佬总结的话，看起来也是蛮费劲的。</p><p>所以，我还是喜欢先看大佬的框架性总结，然后针对性的去看其中一些观点所在的原文。然后自己判断大佬的话和老先生是不是意思一致。嗯，得有自己的判断和理解！</p><p>时间允许的情况下，我当然是愿意把原文都翻一翻的啦，虽然有些不一定对目前的我们管用。</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Mermaid And Mdx]]></title>
            <link>/posts/2021-09-12-1514-Mermaid-And-Mdx</link>
            <guid>/posts/2021-09-12-1514-Mermaid-And-Mdx</guid>
            <content:encoded><![CDATA[<h2 id="mermaid">Mermaid</h2><p><a href="https://github.com/mermaid-js/mermaid">Mermaid</a>是一款用代码绘制UML图的开源库。
依赖少（纯JS），学习曲线平滑，很适合上手。再加上JS编写的跨端优势，更容易集成到其他项目中。</p><p><a href="https://github.com/mermaid-js/mermaid-live-editor">Mermaid Live Editor</a>可以在线使用。</p><p>可以简单看一下Mermaid依赖的库。用到了<code>d3</code>作为图形库，<code>dagre-d3</code>用于有向布局，<code>graphlib</code>提供数据结构存储,<code>khroma</code>用于AI智能色彩管理，<code>moment-mini</code>lite版本的momentjs，<code>stylis</code>CSS库
可以说看这几个依赖已经感觉很强了。</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"@braintree/sanitize-url"</span><span class="token operator">:</span> <span class="token string">"^3.1.0"</span><span class="token punctuation">,</span>
    <span class="token property">"d3"</span><span class="token operator">:</span> <span class="token string">"^7.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"dagre"</span><span class="token operator">:</span> <span class="token string">"^0.8.5"</span><span class="token punctuation">,</span>
    <span class="token property">"dagre-d3"</span><span class="token operator">:</span> <span class="token string">"^0.6.4"</span><span class="token punctuation">,</span>
    <span class="token property">"dompurify"</span><span class="token operator">:</span> <span class="token string">"2.3.1"</span><span class="token punctuation">,</span>
    <span class="token property">"graphlib"</span><span class="token operator">:</span> <span class="token string">"^2.1.8"</span><span class="token punctuation">,</span>
    <span class="token property">"khroma"</span><span class="token operator">:</span> <span class="token string">"^1.4.1"</span><span class="token punctuation">,</span>
    <span class="token property">"moment-mini"</span><span class="token operator">:</span> <span class="token string">"^2.24.0"</span><span class="token punctuation">,</span>
    <span class="token property">"stylis"</span><span class="token operator">:</span> <span class="token string">"^4.0.10"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><h2 id="如何改造mdx-loader支持mdx-mermaid">如何改造mdx-loader支持mdx-mermaid</h2><p>本文不是讲如何使用Mermaid绘图，而是侧重在将其和MDX进行整合，从而优化写作体验。</p><p>下面这幅图就是mdx渲染出来的。本blog的mdx与mermaid自上而下依赖关系如下。</p><div class="mermaid">graph TD;
    react-scripts-mdx --&gt;mdx-loader;
    mdx-loader--&gt;mdx-mermai;</div><p>在实际接入过程中就遇到了挑战。</p><h3 id="首先，在mdx-loader增加插件">首先，在mdx-loader增加插件</h3><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">diff <span class="token operator">--</span>git a<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>loader<span class="token operator">/</span>index<span class="token punctuation">.</span>js b<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>loader<span class="token operator">/</span>index<span class="token punctuation">.</span>js
index <span class="token number">60</span>c954a<span class="token punctuation">.</span><span class="token punctuation">.</span>bc0c9a6 <span class="token number">100644</span>
<span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>loader<span class="token operator">/</span>index<span class="token punctuation">.</span>js
<span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>loader<span class="token operator">/</span>index<span class="token punctuation">.</span>js
@@ <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span> @@ <span class="token keyword">const</span> mdxExportJSONByDefault <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mdx-constant'</span><span class="token punctuation">)</span>
 <span class="token keyword">const</span> grayMatter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'gray-matter'</span><span class="token punctuation">)</span>
 <span class="token keyword">const</span> typography <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./typography'</span><span class="token punctuation">)</span>
 <span class="token keyword">const</span> rehypePrism <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prism'</span><span class="token punctuation">)</span>
<span class="highlighted-line"><span class="token operator">+</span><span class="token keyword">const</span> mdxMermaid <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mdx-mermaid'</span><span class="token punctuation">)</span></span> 
 module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> result
@@ <span class="token operator">-</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">6</span> <span class="token operator">+</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">7</span> @@ module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">source</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">const</span> options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>
     <span class="token punctuation">{</span>
       remarkPlugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>
<span class="highlighted-line"><span class="token operator">+</span>        mdxMermaid<span class="token punctuation">,</span></span>         slug<span class="token punctuation">,</span>
         images<span class="token punctuation">,</span> 
         emoji<span class="token punctuation">,</span>
</code></pre><p>接入完成后，竟然ts报错了，提示<code>mdx-mermaid/Mermaid</code>不能resolve。这就很困惑了。
于是就去看node_modules，他的package.json如下</p><pre><code class="language-json" data-language="json" data-highlighted-line-numbers=""><span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"mdx-mermaid"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.1.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Display mermaid diagrams in mdx files."</span><span class="token punctuation">,</span>
  <span class="token property">"types"</span><span class="token operator">:</span> <span class="token string">"index.d.ts"</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"lib/mdxast-mermaid.js"</span><span class="token punctuation">,</span>
  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"."</span><span class="token operator">:</span> <span class="token string">"./lib/mdxast-mermaid.js"</span><span class="token punctuation">,</span>
    <span class="token property">"./Mermaid"</span><span class="token operator">:</span> <span class="token string">"./lib/Mermaid.js"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><p>首先这个mdx-mermaid包在package.json中定义了exports字段，其中将<code>./lib</code>导出成<code>./</code>,<code>./lib/Mermaid.js</code>导出成<code>./Mermaid</code>。
经过一番调查，发现<a href="https://github.com/microsoft/TypeScript/issues/33079">TS还没实现这个功能</a>。</p><p>那我们就得把引用关系给改一下，接下来定位是什么地方写死的呢。</p><h3 id="改造mdx-mermail">改造mdx-mermail</h3><p>mdxast-mermaid很明显是一个babel插件，通过对代码parse再transform输出改造后的代码。</p><p>可以看到visit遍历文件，如果引入了Mermai，就不处理，否则，就增加一条import记录。问题就出在这个路径ts不认。</p><p>就改对就行了。</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers="">diff <span class="token operator">--</span>git a<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>mermaid<span class="token operator">/</span>lib<span class="token operator">/</span>mdxast<span class="token operator">-</span>mermaid<span class="token punctuation">.</span>js b<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>mermaid<span class="token operator">/</span>lib<span class="token operator">/</span>mdxast<span class="token operator">-</span>mermaid<span class="token punctuation">.</span>js
index dbc38e4<span class="token punctuation">.</span><span class="token punctuation">.</span>e9872d4 <span class="token number">100644</span>
<span class="token operator">--</span><span class="token operator">-</span> a<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>mermaid<span class="token operator">/</span>lib<span class="token operator">/</span>mdxast<span class="token operator">-</span>mermaid<span class="token punctuation">.</span>js
<span class="token operator">++</span><span class="token operator">+</span> b<span class="token operator">/</span>node_modules<span class="token operator">/</span>mdx<span class="token operator">-</span>mermaid<span class="token operator">/</span>lib<span class="token operator">/</span>mdxast<span class="token operator">-</span>mermaid<span class="token punctuation">.</span>js
@@ <span class="token operator">-</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token operator">+</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">7</span> @@ <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token comment">// See if there is already an import for the Mermaid component</span>
         <span class="token keyword">let</span> importFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
         unist_util_visit_1<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">'import'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
<span class="token operator">-</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/\s*import\s*{\s*Mermaid\s*}\s*from\s*'mdx-mermaid\/Mermaid'\s*;?\s*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line"><span class="token operator">+</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/\s*import\s*{\s*Mermaid\s*}\s*from\s*'mdx-mermaid\/lib\/Mermaid'\s*;?\s*/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>                 importFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                 <span class="token keyword">return</span> unist_util_visit_1<span class="token punctuation">.</span>default<span class="token punctuation">.</span><span class="token constant">EXIT</span><span class="token punctuation">;</span>
             <span class="token punctuation">}</span>
@@ <span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">7</span> <span class="token operator">+</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">7</span> @@ <span class="token keyword">function</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>importFound<span class="token punctuation">)</span> <span class="token punctuation">{</span>
             ast<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                 type<span class="token punctuation">:</span> <span class="token string">'import'</span><span class="token punctuation">,</span>
<span class="token operator">-</span>                value<span class="token punctuation">:</span> <span class="token string">'import { Mermaid } from \'mdx-mermaid/Mermaid\';'</span>
<span class="highlighted-line"><span class="token operator">+</span>                value<span class="token punctuation">:</span> <span class="token string">'import { Mermaid } from \'mdx-mermaid/lib/Mermaid\';'</span></span>             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
</code></pre><h2 id="patch-package的使用">patch-package的使用</h2><p>一开始我说clone了两个代码库，本地通过yalc打包发布，调通。并给作者提了issue和PR</p><p>但问题是假如PR没有被合入，那如何在其他设备上同步我的“魔改”呢？</p><p>下面就要请出主角<a href="https://github.com/ds300/patch-package">patch-package</a>,</p><p>简单概括一下就是</p><p>1、先在node_modules里面直接修改代码</p><p>2、通过<code>npx patch-package 包名</code>的方式产生patch文件（根目录的patches文件夹下）</p><p>3、确保package.json中的postinstall存在patch应用的代码（如下）</p><pre><code class="language-jsx" data-language="jsx" data-highlighted-line-numbers=""><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>
<span class="highlighted-line"><span class="token operator">+</span>  <span class="token string">"postinstall"</span><span class="token punctuation">:</span> <span class="token string">"npx patch-package"</span></span> <span class="token punctuation">}</span>
</code></pre><p>上面的两处修正我都是直接在node_modules里面改的，并且fork了代码库提交了issue和PR。</p><p>感觉这样比用yalc修复bug的效率高多了呢。你觉得呢？</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Two History Bug]]></title>
            <link>/posts/2021-12-27-1728-Two-History-Bug</link>
            <guid>/posts/2021-12-27-1728-Two-History-Bug</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><h3 id="背景">背景</h3><p>有一个项目，在做 UT 改造的时候。由于组件经常会对 history 的进行操作(push、replace 等)，为了方便测试，决定对其功能收口。
也参考了一些开源项目，尤其是<a href="https://github.com/mattermost/mattermost-webapp">mattermost-app</a>。其中<code>utils/browser_history.jsx</code>模块就是一个典型的例子。
他有一个<a href="https://github.com/mattermost/mattermost-webapp/blob/master/utils/browser_history.jsx">browser_history 模块</a></p><p>可以看到它主要做了两件事</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span>createBrowserHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'history'</span><span class="token punctuation">;</span>
<span class="token comment">// 实例化一个history</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">createBrowserHistory</span><span class="token punctuation">(</span><span class="token punctuation">{</span>basename<span class="token punctuation">:</span> window<span class="token punctuation">.</span>basename<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 劫持其push方法，返回一个新的history对象（内容是shallow copy了b）</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> browserHistory <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>b<span class="token punctuation">,</span>
    <span class="token function-variable function">push</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>isDesktop<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><p>我们也模仿着在项目中新建一个<code>utils/browserHistory.ts</code>模块，将从此模块导出 app 全局共享的 history（想法很美好哇）。
然后在 app 主入口注入这个 history 给 ReactRouter</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span>Suspense<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>Router<span class="token punctuation">,</span> Redirect<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-router-dom'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> NotFound <span class="token keyword">from</span> <span class="token string">'pages/error/NotFound'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>browserHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'utils/browserHistory'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>routes<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./routes'</span><span class="token punctuation">;</span>

<span class="token comment">/* Use components to define routes */</span>
<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>
<span class="highlighted-line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Router</span></span> <span class="token attr-name">history</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>browserHistory<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Suspense</span></span> <span class="token attr-name">fallback</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token punctuation">{</span>routes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token punctuation">(</span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span>
                            <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>route<span class="token punctuation">.</span>path<span class="token punctuation">}</span></span>
                            <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>route<span class="token punctuation">.</span>path<span class="token punctuation">}</span></span>
                            <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>route<span class="token punctuation">.</span>component<span class="token punctuation">}</span></span>
                            <span class="token attr-name">exact</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>route<span class="token punctuation">.</span>exact<span class="token punctuation">}</span></span>
                        <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span>
                    <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token punctuation">{</span><span class="token comment">/* 找不到，不要跳走去默认页面，否则缓存无法及时更新（用户可以停留在出错页面，刷新来获取新页面） */</span><span class="token punctuation">}</span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Route</span></span> <span class="token attr-name">path</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token string">'*'</span><span class="token punctuation">}</span></span> <span class="token attr-name">component</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>NotFound<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Route</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Switch</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Suspense</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Router</span></span><span class="token punctuation">></span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><h3 id="bug-被发现">bug 被发现</h3><p>然后比如我们在另一个组件里面去用这个 location 值。从其他页面跳转到新页面。这个页面如下。</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> PrivateComp<span class="token punctuation">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Props</span></span><span class="token punctuation">></span></span><span class="token plain-text"> = ({children}) => </span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span>pathname<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>location<span class="token punctuation">;</span> <span class="token comment">// 来自useHistory的location值</span>
    <span class="token keyword">const</span> location <span class="token operator">=</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 来自useLocation的location值</span>
    <span class="token keyword">const</span> currentUrl <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">;</span>
<span class="highlighted-line">    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ddt::pathname,currentUrl'</span><span class="token punctuation">,</span> pathname<span class="token punctuation">,</span> currentUrl<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="highlighted-line">    <span class="token comment">// ddt::pathname,currentUrl /create2021 /create2021/works</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>children<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'children must exist'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// onClickCapture 捕获</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClickCapture</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleClick<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">handleClick</span><span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">:</span> React<span class="token punctuation">.</span>MouseEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token plain-text">;</span>
<span class="token plain-text">export default PrivateComp;</span>
<span class="token plain-text"></span></code></pre><p>可以看到打印结果的两个 location 不一样。这是为什么呢？</p><h3 id="原因定位和解决">原因定位和解决</h3><p>首先我们的 browserHistory 是基本上 copy 的 mattermost 的，人家没遇到bug么。</p><p>那么顺着这个思路我们去捋一下这个 bug。</p><p>我们放慢一点</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">import</span> <span class="token punctuation">{</span>createBrowserHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'history'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> pathConfig <span class="token keyword">from</span> <span class="token string">'config/pathConfig'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> b <span class="token operator">=</span> createBrowserHistory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">></span></span><span class="token plain-text">(</span><span class="token punctuation">{</span>basename<span class="token punctuation">:</span> pathConfig<span class="token punctuation">.</span><span class="token constant">BASENAME</span><span class="token punctuation">}</span><span class="token plain-text">);

// bug case
export const c = </span><span class="token punctuation">{</span>
    <span class="token operator">...</span>b<span class="token punctuation">,</span>
    <span class="token function-variable function">push</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'browserHistory::push'</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//@ts-ignore</span>
        <span class="token keyword">return</span> b<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token plain-text">;
export default c;
</span></code></pre><p>可以看到 c 的 push 方法修改的是 b 对象。而我们传给 Router 的是 c。</p><p>我们先看看 history 这个包的 push 方法做了什么。</p><pre><code class="language-ts" data-language="ts" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">path<span class="token punctuation">,</span> state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span>
        <span class="token operator">?</span> <span class="token function">warning</span><span class="token punctuation">(</span>
              <span class="token operator">!</span><span class="token punctuation">(</span>
                  <span class="token keyword">typeof</span> path <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span>
                  path<span class="token punctuation">.</span>state <span class="token operator">!==</span> undefined <span class="token operator">&amp;&amp;</span>
                  state <span class="token operator">!==</span> undefined
              <span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token string">'You should avoid providing a 2nd state argument to push when the 1st '</span> <span class="token operator">+</span>
                  <span class="token string">'argument is a location-like object that already has state; it is ignored'</span>
          <span class="token punctuation">)</span>
        <span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> action <span class="token operator">=</span> <span class="token string">'PUSH'</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> location <span class="token operator">=</span> <span class="token function">createLocation</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> state<span class="token punctuation">,</span> <span class="token function">createKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> history<span class="token punctuation">.</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    transitionManager<span class="token punctuation">.</span><span class="token function">confirmTransitionTo</span><span class="token punctuation">(</span>
        location<span class="token punctuation">,</span>
        action<span class="token punctuation">,</span>
        getUserConfirmation<span class="token punctuation">,</span>
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ok</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ok<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> href <span class="token operator">=</span> <span class="token function">createHref</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> key <span class="token operator">=</span> location<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
                state <span class="token operator">=</span> location<span class="token punctuation">.</span>state<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>canUseHistory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 更新window.history对象（全局的）</span>
<span class="highlighted-line">                globalHistory<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span></span>                    <span class="token punctuation">{</span>
                        key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>
                        state<span class="token punctuation">:</span> state
                    <span class="token punctuation">}</span><span class="token punctuation">,</span>
                    <span class="token keyword">null</span><span class="token punctuation">,</span>
                    href
                <span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>forceRefresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> href<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">var</span> prevIndex <span class="token operator">=</span> allKeys<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>location<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">var</span> nextKeys <span class="token operator">=</span> allKeys<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> prevIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    nextKeys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    allKeys <span class="token operator">=</span> nextKeys<span class="token punctuation">;</span>
<span class="highlighted-line">                    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>                        action<span class="token punctuation">:</span> action<span class="token punctuation">,</span>
                        location<span class="token punctuation">:</span> location
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新history对象</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">'production'</span>
                    <span class="token operator">?</span> <span class="token function">warning</span><span class="token punctuation">(</span>
                          state <span class="token operator">===</span> undefined<span class="token punctuation">,</span>
                          <span class="token string">'Browser history cannot push state in browsers that do not support HTML5 history'</span>
                      <span class="token punctuation">)</span>
                    <span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
                window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> href<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>可以看到会更新这个 history 对象 </p><p>setState 方法如下</p><pre><code class="language-ts" data-language="ts" data-highlighted-line-numbers=""><span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">nextState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">_extends</span><span class="token punctuation">(</span>history<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span>

    history<span class="token punctuation">.</span>length <span class="token operator">=</span> globalHistory<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    transitionManager<span class="token punctuation">.</span><span class="token function">notifyListeners</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>location<span class="token punctuation">,</span> history<span class="token punctuation">.</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><p>所以这解释了为什么 useHistory 的 location 没变。（c 没变，b 变了，传给 router 的是吧 c）。</p><p>至此问题解开了一半。</p><p>那么为什么 useLocation 的 pathname 变了？</p><p>我们去看 ReactRouter 的 Router 的构造函数</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token comment">// packages/react-router/modules/Router.js</span>
<span class="token keyword">class</span> <span class="token class-name">Router</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="highlighted-line">            location<span class="token punctuation">:</span> props<span class="token punctuation">.</span>history<span class="token punctuation">.</span>location <span class="token comment">// 内部维护了一份location</span></span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">// This is a bit of a hack. We have to start listening for location</span>
        <span class="token comment">// changes here in the constructor in case there are any &lt;Redirect>s</span>
        <span class="token comment">// on the initial render. If there are, they will replace/push when</span>
        <span class="token comment">// they mount and since cDM fires in children before parents, we may</span>
        <span class="token comment">// get a new location before the &lt;Router> is mounted.</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_pendingLocation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>staticContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">            <span class="token keyword">this</span><span class="token punctuation">.</span>unlisten <span class="token operator">=</span> props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">location</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span></span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>location<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>_pendingLocation <span class="token operator">=</span> location<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RouterContext.Provider</span></span>
                <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
                    history<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">,</span>
<span class="highlighted-line">                    location<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>location<span class="token punctuation">,</span></span>                    match<span class="token punctuation">:</span> Router<span class="token punctuation">.</span><span class="token function">computeRootMatch</span><span class="token punctuation">(</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>location<span class="token punctuation">.</span>pathname
                    <span class="token punctuation">)</span><span class="token punctuation">,</span>
                    staticContext<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>staticContext
                <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
            <span class="token punctuation">></span></span><span class="token plain-text"></span>
<span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HistoryContext.Provider</span></span>
                    <span class="token attr-name">children</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">}</span></span>
                    <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">}</span></span>
                <span class="token punctuation">/></span></span><span class="token plain-text"></span>
<span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">RouterContext.Provider</span></span><span class="token punctuation">></span></span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>可以看到 Router 调用了 history 的 listen 方法，将自己注册为观察者。因此 push 方法调用会通知到 Router，从而引起 setState。
这个 setState 更新自己内部的 location。所以即使绑定错了 history，location 依然会更新。（另一半问题得到了解释）</p><p>接着我们看那两个 hooks</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token comment">// packages/react-router/modules/hooks.js</span>
<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> invariant <span class="token keyword">from</span> <span class="token string">'tiny-invariant'</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> Context <span class="token keyword">from</span> <span class="token string">'./RouterContext.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> HistoryContext <span class="token keyword">from</span> <span class="token string">'./HistoryContext.js'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> matchPath <span class="token keyword">from</span> <span class="token string">'./matchPath.js'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> useContext <span class="token operator">=</span> React<span class="token punctuation">.</span>useContext<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">    <span class="token keyword">return</span> <span class="token function">useContext</span><span class="token punctuation">(</span>HistoryContext<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回注入的history</span></span><span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="highlighted-line">    <span class="token keyword">return</span> <span class="token function">useContext</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">.</span>location<span class="token punctuation">;</span> <span class="token comment">// 返回Router的state.location</span></span><span class="token punctuation">}</span>
</code></pre><p>可见 ReactRouter 用了两个 Context，一个 HistoryContext，一个 RouterContext。
useHistory 返回注入的 history，我们注入错了。
useLocation 返回 Router 自己维护的 location，与 history 无关，因此一直是对的。</p><p>这个问题的解决办法有多种，核心就是就是不要复制 b，而是修改 b 或者通过 proxy 拦截和转发。
不用proxy的改法如下。</p><pre><code class="language-tsx" data-language="tsx" data-highlighted-line-numbers=""><span class="token keyword">const</span> b <span class="token operator">=</span> createBrowserHistory<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>any</span><span class="token punctuation">></span></span><span class="token plain-text">(</span><span class="token punctuation">{</span>basename<span class="token punctuation">:</span> pathConfig<span class="token punctuation">.</span><span class="token constant">BASENAME</span><span class="token punctuation">}</span><span class="token plain-text">);
const _push = b.push; // 保存一份
const browserHistory = b;
browserHistory.push = (path, ...args) => </span><span class="token punctuation">{</span>
    <span class="token comment">// 可以打些log啥的</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'browserHistory::push'</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">_push</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token plain-text">;

export </span><span class="token punctuation">{</span>browserHistory<span class="token punctuation">}</span><span class="token plain-text">;
</span></code></pre><h3 id="反思">反思</h3><p>通过这个bug，我们将history和ReactRouter串联了起来。</p><p>mattermost之所以没遇到这个bug是因为他们拿pathname永远都是从this.props.location或者useLocation拿，一旦有人从history拿就会出问题。</p><p>有机会还是应该把这个bug report给他们的。</p><p>教训：copy paste要小心，别把bug copy过来！</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fix Git Merge Mis-Deleting files]]></title>
            <link>/posts/2021-12-27-2027-Fix-Git-Merge-Mis-Deleting-files</link>
            <guid>/posts/2021-12-27-2027-Fix-Git-Merge-Mis-Deleting-files</guid>
            <content:encoded><![CDATA[<h2 id="你可以从本文了解到">你可以从本文了解到</h2><h3 id="背景">背景</h3><p>看到了一片其他团队的关于<a href="https://mp.weixin.qq.com/s/UtTVKA5kZ7RXTNAQupczeg">冲代码的文</a>，这篇文章做了一些分析和定位问题，但是没有给出特别好的拯救办法。本文结合实际经验，进行补充。</p><p>咱们有一个项目，有很多人在不同的分支上开发。有一天，A 同学提交了一个 merge 提交，这个 merge 把其他人的代码删除了。在不知道的情况下，大家又默默开发了好几天。</p><p>最后，这个问题被发现了，然后大家很着急，不知道该怎么还原被删的代码。</p><h3 id="问题分析和方案比较">问题分析和方案比较</h3><p>首先，为什么提交前后代码都可以编译通过呢？</p><p>1、A 在开发的时候，肯定代码是可以跑的。
2、merge 合入主干后，别人的代码被删了，理论上，也有一定概率可以跑的（被删的代码是静态资源或者没有被什么依赖到）。</p><p>然后，回到灾难现场。现在的 git 提交是个什么情况呢？</p><img src="/static/media/1.9413fe76.png" style="width:100%"/><p>简化成如下，a比b少了一堆文件</p><pre><code>a [merge 节点]
｜\ b
｜ |c
</code></pre><p>假如a提交是一个普通提交，那么我们只需要revert a提交即可。</p><p>但是a这个merge提交不携带任何信息，不能revert。该如何修复呢？</p><p>有很多方法，不同的方法复杂度不一样。其中咱们采用的是如下的方法。其思路如下。</p><p>1、求出b从a删除的文件</p><p>2、并把他们加回来，提交，解决冲突。</p><p>其中1这个步骤我们可以以一种反向思维去做。先<code>git checkout</code>到b，然后<code>git reset --soft</code>到a，这样，工作区就出现了被删掉的文件，直接将其提交即可。</p><p>这是什么原理呢？我们这样来理解一下。</p><p>首先，假如先checkout到a，然后reset到b，那么工作区暂存的就是<code>b删掉的文件</code>。</p><p>咱们反过来操作，先checkout到b，然后reset到a，那么工作区暂存的就是<code>revert b删掉的文件</code>即加回来这些文件。</p><p>其实，reset —soft做了什么呢？</p><p><code>reset --soft 会在重置 HEAD 和 branch 时，保留工作目录和暂存区中的内容，并把重置 HEAD 所带来的新的差异放进暂存区。</code>。</p><p>理解了这句话。差异是<code>before - after</code>。那么我们带入a和b<code>before:b, after:a</code>，这个差异就是<code>b-a=被删的文件加回来</code></p><p>步骤2的操作可以用<code>git pull -r</code>将本地提交追加到最新，并解决冲突即可。</p><h3 id="反思">反思</h3><p>1、预防：CR要仔细，发现有大量文件别通过，仔细核对。</p><p>2、错误已经发生，要沉着冷静。有时候正向走不通，可以考虑反向操作，会有意想不到的效果。</p>]]></content:encoded>
        </item>
    </channel>
</rss>